
FAT_EXAMPLE1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000066e2  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008800  80008800  00008c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000a58  80008a00  80008a00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000010  00000008  80009458  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000910  00000018  00000018  00000000  2**2
                  ALLOC
  8 .heap         0000e6d8  00000928  00000928  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00009c18  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000e40  00000000  00000000  00009c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000026b5  00000000  00000000  0000aa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00011826  00000000  00000000  0000d13d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028be  00000000  00000000  0001e963  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b2f1  00000000  00000000  00021221  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002774  00000000  00000000  0002c514  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000044d1  00000000  00000000  0002ec88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00006b52  00000000  00000000  00033159  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 01065f50  00000000  00000000  00039cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000df8  00000000  00000000  0109fc00  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf b0 c0 	sub	pc,pc,-20288

Disassembly of section .text:

80002004 <sd_mmc_spi_get_capacity>:
80002004:	d4 01       	pushm	lr
80002006:	4c 18       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002008:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x108>
8000200c:	11 8a       	ld.ub	r10,r8[0x0]
8000200e:	30 38       	mov	r8,3
80002010:	f0 0a 18 00 	cp.b	r10,r8
80002014:	c2 71       	brne	80002062 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002016:	4b d8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002018:	f1 3a 00 08 	ld.ub	r10,r8[8]
8000201c:	f1 39 00 09 	ld.ub	r9,r8[9]
80002020:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002024:	11 fa       	ld.ub	r10,r8[0x7]
80002026:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202a:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
8000202e:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002030:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002034:	16 99       	mov	r9,r11
80002036:	f4 08 15 13 	lsl	r8,r10,0x13
8000203a:	4b 6a       	lddpc	r10,80002110 <sd_mmc_spi_get_capacity+0x10c>
8000203c:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002040:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002044:	4b 48       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
80002046:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80002048:	f4 ea 00 00 	ld.d	r10,r10[0]
8000204c:	90 09       	ld.sh	r9,r8[0x0]
8000204e:	f4 08 16 09 	lsr	r8,r10,0x9
80002052:	f1 eb 11 78 	or	r8,r8,r11<<0x17
80002056:	20 18       	sub	r8,1
80002058:	b7 79       	lsl	r9,0x17
8000205a:	12 08       	add	r8,r9
8000205c:	4a f9       	lddpc	r9,80002118 <sd_mmc_spi_get_capacity+0x114>
8000205e:	93 08       	st.w	r9[0x0],r8
80002060:	c4 28       	rjmp	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002062:	4a a8       	lddpc	r8,80002108 <sd_mmc_spi_get_capacity+0x104>
80002064:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002068:	f1 39 00 08 	ld.ub	r9,r8[8]
8000206c:	a7 89       	lsr	r9,0x6
8000206e:	11 fe       	ld.ub	lr,r8[0x7]
80002070:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002074:	11 ee       	ld.ub	lr,r8[0x6]
80002076:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207a:	ab 6e       	lsl	lr,0xa
8000207c:	1c 09       	add	r9,lr
8000207e:	2f f9       	sub	r9,-1
80002080:	f1 38 00 09 	ld.ub	r8,r8[9]
80002084:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002088:	f8 0e 16 07 	lsr	lr,r12,0x7
8000208c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002090:	2f e8       	sub	r8,-2
80002092:	f2 08 09 49 	lsl	r9,r9,r8
80002096:	20 19       	sub	r9,1
80002098:	4a 08       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
8000209a:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
8000209c:	70 0e       	ld.w	lr,r8[0x0]
8000209e:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a2:	2f fe       	sub	lr,-1
800020a4:	fc 0b 09 48 	lsl	r8,lr,r11
800020a8:	30 09       	mov	r9,0
800020aa:	49 ae       	lddpc	lr,80002110 <sd_mmc_spi_get_capacity+0x10c>
800020ac:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b0:	49 98       	lddpc	r8,80002114 <sd_mmc_spi_get_capacity+0x110>
800020b2:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b4:	30 98       	mov	r8,9
800020b6:	f0 0b 18 00 	cp.b	r11,r8
800020ba:	e0 88 00 08 	brls	800020ca <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020be:	49 78       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x114>
800020c0:	70 09       	ld.w	r9,r8[0x0]
800020c2:	20 9b       	sub	r11,9
800020c4:	f2 0b 09 4b 	lsl	r11,r9,r11
800020c8:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ca:	58 0a       	cp.w	r10,0
800020cc:	c0 c1       	brne	800020e4 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020ce:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020d6:	48 d9       	lddpc	r9,80002108 <sd_mmc_spi_get_capacity+0x104>
800020d8:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020dc:	a3 7c       	lsl	r12,0x3
800020de:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e2:	c0 c8       	rjmp	800020fa <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e4:	48 9a       	lddpc	r10,80002108 <sd_mmc_spi_get_capacity+0x104>
800020e6:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ea:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020ee:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f2:	a7 98       	lsr	r8,0x7
800020f4:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020f8:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fa:	2f f9       	sub	r9,-1
800020fc:	2f f8       	sub	r8,-1
800020fe:	b1 39       	mul	r9,r8
80002100:	48 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x118>
80002102:	b0 09       	st.h	r8[0x0],r9
}
80002104:	d8 02       	popm	pc
80002106:	00 00       	add	r0,r0
80002108:	00 00       	add	r0,r0
8000210a:	06 00       	add	r0,r3
8000210c:	00 00       	add	r0,r0
8000210e:	05 fe       	ld.ub	lr,r2[0x7]
80002110:	00 00       	add	r0,r0
80002112:	05 ec       	ld.ub	r12,r2[0x6]
80002114:	00 00       	add	r0,r0
80002116:	05 f4       	ld.ub	r4,r2[0x7]
80002118:	00 00       	add	r0,r0
8000211a:	05 f8       	ld.ub	r8,r2[0x7]
8000211c:	00 00       	add	r0,r0
8000211e:	05 f6       	ld.ub	r6,r2[0x7]

80002120 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002120:	5e fc       	retal	r12
80002122:	d7 03       	nop

80002124 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002124:	d4 01       	pushm	lr
80002126:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002128:	18 9b       	mov	r11,r12
8000212a:	fe 7c 28 00 	mov	r12,-55296
8000212e:	f0 1f 00 09 	mcall	80002150 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002132:	fa cb ff fe 	sub	r11,sp,-2
80002136:	fe 7c 28 00 	mov	r12,-55296
8000213a:	f0 1f 00 07 	mcall	80002154 <sd_mmc_spi_send_and_read+0x30>
8000213e:	58 1c       	cp.w	r12,1
80002140:	c0 41       	brne	80002148 <sd_mmc_spi_send_and_read+0x24>
80002142:	e0 6c 00 ff 	mov	r12,255
80002146:	c0 28       	rjmp	8000214a <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002148:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214a:	2f fd       	sub	sp,-4
8000214c:	d8 02       	popm	pc
8000214e:	00 00       	add	r0,r0
80002150:	80 00       	ld.sh	r0,r0[0x0]
80002152:	30 c2       	mov	r2,12
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	30 de       	mov	lr,13

80002158 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
80002158:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215a:	30 1b       	mov	r11,1
8000215c:	fe 7c 28 00 	mov	r12,-55296
80002160:	f0 1f 00 10 	mcall	800021a0 <sd_mmc_spi_wait_not_busy+0x48>
80002164:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002166:	e0 65 00 ff 	mov	r5,255
8000216a:	48 f4       	lddpc	r4,800021a4 <sd_mmc_spi_wait_not_busy+0x4c>
8000216c:	3f f6       	mov	r6,-1
8000216e:	c0 b8       	rjmp	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002170:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002172:	e2 57 0d 40 	cp.w	r7,200000
80002176:	c0 71       	brne	80002184 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002178:	30 1b       	mov	r11,1
8000217a:	fe 7c 28 00 	mov	r12,-55296
8000217e:	f0 1f 00 0b 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
80002182:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002184:	0a 9c       	mov	r12,r5
80002186:	f0 1f 00 0a 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x54>
8000218a:	a8 8c       	st.b	r4[0x0],r12
8000218c:	ec 0c 18 00 	cp.b	r12,r6
80002190:	cf 01       	brne	80002170 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002192:	30 1b       	mov	r11,1
80002194:	fe 7c 28 00 	mov	r12,-55296
80002198:	f0 1f 00 04 	mcall	800021a8 <sd_mmc_spi_wait_not_busy+0x50>
8000219c:	da 2a       	popm	r4-r7,pc,r12=1
8000219e:	00 00       	add	r0,r0
800021a0:	80 00       	ld.sh	r0,r0[0x0]
800021a2:	2f 90       	sub	r0,-7
800021a4:	00 00       	add	r0,r0
800021a6:	06 10       	sub	r0,r3
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	2f dc       	sub	r12,-3
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	21 24       	sub	r4,18

800021b0 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b2:	a9 7c       	lsl	r12,0x9
800021b4:	48 38       	lddpc	r8,800021c0 <sd_mmc_spi_write_open+0x10>
800021b6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021b8:	f0 1f 00 03 	mcall	800021c4 <sd_mmc_spi_write_open+0x14>
}
800021bc:	d8 02       	popm	pc
800021be:	00 00       	add	r0,r0
800021c0:	00 00       	add	r0,r0
800021c2:	00 18       	sub	r8,r0
800021c4:	80 00       	ld.sh	r0,r0[0x0]
800021c6:	21 58       	sub	r8,21

800021c8 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021c8:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ca:	f0 1f 00 02 	mcall	800021d0 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021ce:	d8 02       	popm	pc
800021d0:	80 00       	ld.sh	r0,r0[0x0]
800021d2:	21 58       	sub	r8,21

800021d4 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021d6:	a9 7c       	lsl	r12,0x9
800021d8:	48 38       	lddpc	r8,800021e4 <sd_mmc_spi_read_open+0x10>
800021da:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021dc:	f0 1f 00 03 	mcall	800021e8 <sd_mmc_spi_read_open+0x14>
}
800021e0:	d8 02       	popm	pc
800021e2:	00 00       	add	r0,r0
800021e4:	00 00       	add	r0,r0
800021e6:	00 18       	sub	r8,r0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	21 58       	sub	r8,21

800021ec <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021ec:	eb cd 40 f8 	pushm	r3-r7,lr
800021f0:	18 96       	mov	r6,r12
800021f2:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f4:	e0 6b 00 ff 	mov	r11,255
800021f8:	fe 7c 28 00 	mov	r12,-55296
800021fc:	f0 1f 00 2b 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002200:	0c 9b       	mov	r11,r6
80002202:	a7 ab       	sbr	r11,0x6
80002204:	5c 5b       	castu.b	r11
80002206:	fe 7c 28 00 	mov	r12,-55296
8000220a:	f0 1f 00 28 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000220e:	ee 0b 16 18 	lsr	r11,r7,0x18
80002212:	fe 7c 28 00 	mov	r12,-55296
80002216:	f0 1f 00 25 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221a:	ee 0b 16 10 	lsr	r11,r7,0x10
8000221e:	fe 7c 28 00 	mov	r12,-55296
80002222:	f0 1f 00 22 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002226:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222a:	fe 7c 28 00 	mov	r12,-55296
8000222e:	f0 1f 00 1f 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002232:	0e 9b       	mov	r11,r7
80002234:	5c 7b       	castu.h	r11
80002236:	fe 7c 28 00 	mov	r12,-55296
8000223a:	f0 1f 00 1c 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
  switch(command)
8000223e:	30 08       	mov	r8,0
80002240:	f0 06 18 00 	cp.b	r6,r8
80002244:	c0 60       	breq	80002250 <sd_mmc_spi_command+0x64>
80002246:	30 88       	mov	r8,8
80002248:	f0 06 18 00 	cp.b	r6,r8
8000224c:	c1 01       	brne	8000226c <sd_mmc_spi_command+0x80>
8000224e:	c0 88       	rjmp	8000225e <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002250:	e0 6b 00 95 	mov	r11,149
80002254:	fe 7c 28 00 	mov	r12,-55296
80002258:	f0 1f 00 14 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000225c:	c0 e8       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000225e:	e0 6b 00 87 	mov	r11,135
80002262:	fe 7c 28 00 	mov	r12,-55296
80002266:	f0 1f 00 11 	mcall	800022a8 <sd_mmc_spi_command+0xbc>
         break;
8000226a:	c0 78       	rjmp	80002278 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000226c:	e0 6b 00 ff 	mov	r11,255
80002270:	fe 7c 28 00 	mov	r12,-55296
80002274:	f0 1f 00 0d 	mcall	800022a8 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002278:	3f f9       	mov	r9,-1
8000227a:	48 d8       	lddpc	r8,800022ac <sd_mmc_spi_command+0xc0>
8000227c:	b0 89       	st.b	r8[0x0],r9
8000227e:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002280:	e0 64 00 ff 	mov	r4,255
80002284:	10 93       	mov	r3,r8
80002286:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002288:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228a:	c0 68       	rjmp	80002296 <sd_mmc_spi_command+0xaa>
  {
    retry++;
8000228c:	2f f7       	sub	r7,-1
8000228e:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002290:	ea 07 18 00 	cp.b	r7,r5
80002294:	c0 80       	breq	800022a4 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002296:	08 9c       	mov	r12,r4
80002298:	f0 1f 00 06 	mcall	800022b0 <sd_mmc_spi_command+0xc4>
8000229c:	a6 8c       	st.b	r3[0x0],r12
8000229e:	ec 0c 18 00 	cp.b	r12,r6
800022a2:	cf 50       	breq	8000228c <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022a8:	80 00       	ld.sh	r0,r0[0x0]
800022aa:	30 c2       	mov	r2,12
800022ac:	00 00       	add	r0,r0
800022ae:	06 10       	sub	r0,r3
800022b0:	80 00       	ld.sh	r0,r0[0x0]
800022b2:	21 24       	sub	r4,18

800022b4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b4:	eb cd 40 c0 	pushm	r6-r7,lr
800022b8:	18 97       	mov	r7,r12
800022ba:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022bc:	30 1b       	mov	r11,1
800022be:	fe 7c 28 00 	mov	r12,-55296
800022c2:	f0 1f 00 09 	mcall	800022e4 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022c6:	0c 9b       	mov	r11,r6
800022c8:	0e 9c       	mov	r12,r7
800022ca:	f0 1f 00 08 	mcall	800022e8 <sd_mmc_spi_send_command+0x34>
800022ce:	48 87       	lddpc	r7,800022ec <sd_mmc_spi_send_command+0x38>
800022d0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d2:	30 1b       	mov	r11,1
800022d4:	fe 7c 28 00 	mov	r12,-55296
800022d8:	f0 1f 00 06 	mcall	800022f0 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022dc:	0f 8c       	ld.ub	r12,r7[0x0]
800022de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e2:	00 00       	add	r0,r0
800022e4:	80 00       	ld.sh	r0,r0[0x0]
800022e6:	2f 90       	sub	r0,-7
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	21 ec       	sub	r12,30
800022ec:	00 00       	add	r0,r0
800022ee:	06 10       	sub	r0,r3
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	2f dc       	sub	r12,-3

800022f4 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f4:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022f8:	49 a8       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
800022fa:	11 89       	ld.ub	r9,r8[0x0]
800022fc:	30 08       	mov	r8,0
800022fe:	f0 09 18 00 	cp.b	r9,r8
80002302:	c1 f1       	brne	80002340 <sd_mmc_spi_check_presence+0x4c>
80002304:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002306:	0e 94       	mov	r4,r7
80002308:	49 73       	lddpc	r3,80002364 <sd_mmc_spi_check_presence+0x70>
8000230a:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000230c:	e0 62 00 ff 	mov	r2,255
80002310:	fe 71 28 00 	mov	r1,-55296
      retry++;
      if (retry > 10)
80002314:	30 b5       	mov	r5,11
80002316:	c0 c8       	rjmp	8000232e <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002318:	04 9b       	mov	r11,r2
8000231a:	02 9c       	mov	r12,r1
8000231c:	f0 1f 00 13 	mcall	80002368 <sd_mmc_spi_check_presence+0x74>
      retry++;
80002320:	2f f7       	sub	r7,-1
80002322:	5c 87       	casts.h	r7
      if (retry > 10)
80002324:	ea 07 19 00 	cp.h	r7,r5
80002328:	c0 31       	brne	8000232e <sd_mmc_spi_check_presence+0x3a>
8000232a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000232e:	08 9b       	mov	r11,r4
80002330:	08 9c       	mov	r12,r4
80002332:	f0 1f 00 0f 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002336:	a6 8c       	st.b	r3[0x0],r12
80002338:	ec 0c 18 00 	cp.b	r12,r6
8000233c:	ce e1       	brne	80002318 <sd_mmc_spi_check_presence+0x24>
8000233e:	c0 e8       	rjmp	8000235a <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002340:	30 0b       	mov	r11,0
80002342:	33 bc       	mov	r12,59
80002344:	f0 1f 00 0a 	mcall	8000236c <sd_mmc_spi_check_presence+0x78>
80002348:	48 78       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x70>
8000234a:	b0 8c       	st.b	r8[0x0],r12
8000234c:	58 0c       	cp.w	r12,0
8000234e:	c0 60       	breq	8000235a <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002350:	30 09       	mov	r9,0
80002352:	48 48       	lddpc	r8,80002360 <sd_mmc_spi_check_presence+0x6c>
80002354:	b0 89       	st.b	r8[0x0],r9
80002356:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235a:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000235e:	00 00       	add	r0,r0
80002360:	00 00       	add	r0,r0
80002362:	00 30       	cp.w	r0,r0
80002364:	00 00       	add	r0,r0
80002366:	06 10       	sub	r0,r3
80002368:	80 00       	ld.sh	r0,r0[0x0]
8000236a:	30 c2       	mov	r2,12
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	22 b4       	sub	r4,43

80002370 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002370:	eb cd 40 e0 	pushm	r5-r7,lr
80002374:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002376:	f0 1f 00 49 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000237a:	e0 80 00 8c 	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000237e:	30 1b       	mov	r11,1
80002380:	fe 7c 28 00 	mov	r12,-55296
80002384:	f0 1f 00 46 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002388:	4c 68       	lddpc	r8,800024a0 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238a:	11 89       	ld.ub	r9,r8[0x0]
8000238c:	30 38       	mov	r8,3
8000238e:	f0 09 18 00 	cp.b	r9,r8
80002392:	c0 a1       	brne	800023a6 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002394:	4c 48       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002396:	70 0b       	ld.w	r11,r8[0x0]
80002398:	a9 9b       	lsr	r11,0x9
8000239a:	31 8c       	mov	r12,24
8000239c:	f0 1f 00 43 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023a0:	4c 38       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a2:	b0 8c       	st.b	r8[0x0],r12
800023a4:	c0 88       	rjmp	800023b4 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023a6:	4c 08       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
800023a8:	70 0b       	ld.w	r11,r8[0x0]
800023aa:	31 8c       	mov	r12,24
800023ac:	f0 1f 00 3f 	mcall	800024a8 <sd_mmc_spi_write_sector_from_ram+0x138>
800023b0:	4b f8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b2:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b4:	4b e8       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	11 89       	ld.ub	r9,r8[0x0]
800023b8:	30 08       	mov	r8,0
800023ba:	f0 09 18 00 	cp.b	r9,r8
800023be:	c0 80       	breq	800023ce <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c0:	30 1b       	mov	r11,1
800023c2:	fe 7c 28 00 	mov	r12,-55296
800023c6:	f0 1f 00 3b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023ce:	e0 6b 00 ff 	mov	r11,255
800023d2:	fe 7c 28 00 	mov	r12,-55296
800023d6:	f0 1f 00 38 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023da:	e0 6b 00 fe 	mov	r11,254
800023de:	fe 7c 28 00 	mov	r12,-55296
800023e2:	f0 1f 00 35 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023e6:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ea:	fe 75 28 00 	mov	r5,-55296
800023ee:	0f 3b       	ld.ub	r11,r7++
800023f0:	0a 9c       	mov	r12,r5
800023f2:	f0 1f 00 31 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023f6:	0c 37       	cp.w	r7,r6
800023f8:	cf b1       	brne	800023ee <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fa:	e0 6b 00 ff 	mov	r11,255
800023fe:	fe 7c 28 00 	mov	r12,-55296
80002402:	f0 1f 00 2d 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002406:	e0 6b 00 ff 	mov	r11,255
8000240a:	fe 7c 28 00 	mov	r12,-55296
8000240e:	f0 1f 00 2a 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002412:	e0 6c 00 ff 	mov	r12,255
80002416:	f0 1f 00 29 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x148>
8000241a:	4a 58       	lddpc	r8,800024ac <sd_mmc_spi_write_sector_from_ram+0x13c>
8000241c:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000241e:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002422:	58 5c       	cp.w	r12,5
80002424:	c1 40       	breq	8000244c <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002426:	e0 6b 00 ff 	mov	r11,255
8000242a:	fe 7c 28 00 	mov	r12,-55296
8000242e:	f0 1f 00 22 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002432:	e0 6b 00 ff 	mov	r11,255
80002436:	fe 7c 28 00 	mov	r12,-55296
8000243a:	f0 1f 00 1f 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000243e:	30 1b       	mov	r11,1
80002440:	fe 7c 28 00 	mov	r12,-55296
80002444:	f0 1f 00 1b 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
80002448:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000244c:	e0 6b 00 ff 	mov	r11,255
80002450:	fe 7c 28 00 	mov	r12,-55296
80002454:	f0 1f 00 18 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002458:	e0 6b 00 ff 	mov	r11,255
8000245c:	fe 7c 28 00 	mov	r12,-55296
80002460:	f0 1f 00 15 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002464:	30 1b       	mov	r11,1
80002466:	fe 7c 28 00 	mov	r12,-55296
8000246a:	f0 1f 00 12 	mcall	800024b0 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000246e:	48 e8       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x134>
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	f2 c9 fe 00 	sub	r9,r9,-512
80002476:	91 09       	st.w	r8[0x0],r9
80002478:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247a:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000247c:	c0 68       	rjmp	80002488 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000247e:	2f f7       	sub	r7,-1
80002480:	5c 87       	casts.h	r7
    if (i == 10)
80002482:	ec 07 19 00 	cp.h	r7,r6
80002486:	c0 60       	breq	80002492 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002488:	f0 1f 00 04 	mcall	80002498 <sd_mmc_spi_write_sector_from_ram+0x128>
8000248c:	cf 90       	breq	8000247e <sd_mmc_spi_write_sector_from_ram+0x10e>
8000248e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002492:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002496:	00 00       	add	r0,r0
80002498:	80 00       	ld.sh	r0,r0[0x0]
8000249a:	21 58       	sub	r8,21
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	2f 90       	sub	r0,-7
800024a0:	00 00       	add	r0,r0
800024a2:	05 fe       	ld.ub	lr,r2[0x7]
800024a4:	00 00       	add	r0,r0
800024a6:	00 18       	sub	r8,r0
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	21 ec       	sub	r12,30
800024ac:	00 00       	add	r0,r0
800024ae:	06 10       	sub	r0,r3
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	2f dc       	sub	r12,-3
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	30 c2       	mov	r2,12
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 24       	sub	r4,18

800024bc <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024bc:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c0:	f0 1f 00 1c 	mcall	80002530 <sd_mmc_spi_check_hc+0x74>
800024c4:	c0 31       	brne	800024ca <sd_mmc_spi_check_hc+0xe>
800024c6:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ca:	30 1b       	mov	r11,1
800024cc:	fe 7c 28 00 	mov	r12,-55296
800024d0:	f0 1f 00 19 	mcall	80002534 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d4:	30 0b       	mov	r11,0
800024d6:	33 ac       	mov	r12,58
800024d8:	f0 1f 00 18 	mcall	80002538 <sd_mmc_spi_check_hc+0x7c>
800024dc:	49 88       	lddpc	r8,8000253c <sd_mmc_spi_check_hc+0x80>
800024de:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e0:	58 0c       	cp.w	r12,0
800024e2:	c0 80       	breq	800024f2 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e4:	30 1b       	mov	r11,1
800024e6:	fe 7c 28 00 	mov	r12,-55296
800024ea:	f0 1f 00 16 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
800024ee:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f2:	e0 6c 00 ff 	mov	r12,255
800024f6:	f0 1f 00 14 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
800024fa:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fc:	e0 6c 00 ff 	mov	r12,255
80002500:	f0 1f 00 11 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002504:	48 e7       	lddpc	r7,8000253c <sd_mmc_spi_check_hc+0x80>
80002506:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002508:	e0 6c 00 ff 	mov	r12,255
8000250c:	f0 1f 00 0e 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
80002510:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002512:	e0 6c 00 ff 	mov	r12,255
80002516:	f0 1f 00 0c 	mcall	80002544 <sd_mmc_spi_check_hc+0x88>
8000251a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000251c:	30 1b       	mov	r11,1
8000251e:	fe 7c 28 00 	mov	r12,-55296
80002522:	f0 1f 00 08 	mcall	80002540 <sd_mmc_spi_check_hc+0x84>
80002526:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000252e:	00 00       	add	r0,r0
80002530:	80 00       	ld.sh	r0,r0[0x0]
80002532:	21 58       	sub	r8,21
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	2f 90       	sub	r0,-7
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	21 ec       	sub	r12,30
8000253c:	00 00       	add	r0,r0
8000253e:	06 10       	sub	r0,r3
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	2f dc       	sub	r12,-3
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 24       	sub	r4,18

80002548 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002548:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 27 	mcall	800025e8 <sd_mmc_spi_get_if+0xa0>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_get_if+0xe>
80002552:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 1b       	mov	r11,1
80002558:	fe 7c 28 00 	mov	r12,-55296
8000255c:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002560:	e0 6b 01 aa 	mov	r11,426
80002564:	30 8c       	mov	r12,8
80002566:	f0 1f 00 23 	mcall	800025f0 <sd_mmc_spi_get_if+0xa8>
8000256a:	4a 38       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
8000256c:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000256e:	e2 1c 00 04 	andl	r12,0x4,COH
80002572:	c0 80       	breq	80002582 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002574:	30 1b       	mov	r11,1
80002576:	fe 7c 28 00 	mov	r12,-55296
8000257a:	f0 1f 00 20 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
8000257e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002582:	e0 6c 00 ff 	mov	r12,255
80002586:	f0 1f 00 1e 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
8000258a:	49 b7       	lddpc	r7,800025f4 <sd_mmc_spi_get_if+0xac>
8000258c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000258e:	e0 6c 00 ff 	mov	r12,255
80002592:	f0 1f 00 1b 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
80002596:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002598:	e0 6c 00 ff 	mov	r12,255
8000259c:	f0 1f 00 18 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025a0:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025a6:	c0 81       	brne	800025b6 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 1b       	mov	r11,1
800025aa:	fe 7c 28 00 	mov	r12,-55296
800025ae:	f0 1f 00 13 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025b2:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025b6:	e0 6c 00 ff 	mov	r12,255
800025ba:	f0 1f 00 11 	mcall	800025fc <sd_mmc_spi_get_if+0xb4>
800025be:	48 e8       	lddpc	r8,800025f4 <sd_mmc_spi_get_if+0xac>
800025c0:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c2:	3a a8       	mov	r8,-86
800025c4:	f0 0c 18 00 	cp.b	r12,r8
800025c8:	c0 80       	breq	800025d8 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ca:	30 1b       	mov	r11,1
800025cc:	fe 7c 28 00 	mov	r12,-55296
800025d0:	f0 1f 00 0a 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025d4:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d8:	30 1b       	mov	r11,1
800025da:	fe 7c 28 00 	mov	r12,-55296
800025de:	f0 1f 00 07 	mcall	800025f8 <sd_mmc_spi_get_if+0xb0>
800025e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 58       	sub	r8,21
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	2f 90       	sub	r0,-7
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	21 ec       	sub	r12,30
800025f4:	00 00       	add	r0,r0
800025f6:	06 10       	sub	r0,r3
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	2f dc       	sub	r12,-3
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	21 24       	sub	r4,18

80002600 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002600:	eb cd 40 f8 	pushm	r3-r7,lr
80002604:	20 1d       	sub	sp,4
80002606:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002608:	f0 1f 00 48 	mcall	80002728 <sd_mmc_spi_read_sector_to_ram+0x128>
8000260c:	e0 80 00 8a 	breq	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002610:	30 1b       	mov	r11,1
80002612:	fe 7c 28 00 	mov	r12,-55296
80002616:	f0 1f 00 46 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261a:	4c 68       	lddpc	r8,80002730 <sd_mmc_spi_read_sector_to_ram+0x130>
8000261c:	11 89       	ld.ub	r9,r8[0x0]
8000261e:	30 38       	mov	r8,3
80002620:	f0 09 18 00 	cp.b	r9,r8
80002624:	c0 a1       	brne	80002638 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002626:	4c 48       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
80002628:	70 0b       	ld.w	r11,r8[0x0]
8000262a:	a9 9b       	lsr	r11,0x9
8000262c:	31 1c       	mov	r12,17
8000262e:	f0 1f 00 43 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002632:	4c 38       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002634:	b0 8c       	st.b	r8[0x0],r12
80002636:	c0 88       	rjmp	80002646 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002638:	4b f8       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263a:	70 0b       	ld.w	r11,r8[0x0]
8000263c:	31 1c       	mov	r12,17
8000263e:	f0 1f 00 3f 	mcall	80002738 <sd_mmc_spi_read_sector_to_ram+0x138>
80002642:	4b f8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002644:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002646:	4b e8       	lddpc	r8,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	11 89       	ld.ub	r9,r8[0x0]
8000264a:	30 08       	mov	r8,0
8000264c:	f0 09 18 00 	cp.b	r9,r8
80002650:	c1 20       	breq	80002674 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002652:	30 1b       	mov	r11,1
80002654:	fe 7c 28 00 	mov	r12,-55296
80002658:	f0 1f 00 3a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000265c:	30 0c       	mov	r12,0
    return false;
8000265e:	c6 18       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002660:	20 17       	sub	r7,1
80002662:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002664:	c0 e1       	brne	80002680 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002666:	30 1b       	mov	r11,1
80002668:	fe 7c 28 00 	mov	r12,-55296
8000266c:	f0 1f 00 35 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
80002670:	30 0c       	mov	r12,0
       return false;
80002672:	c5 78       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
80002674:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002678:	e0 65 00 ff 	mov	r5,255
8000267c:	4b 04       	lddpc	r4,8000273c <sd_mmc_spi_read_sector_to_ram+0x13c>
8000267e:	3f f6       	mov	r6,-1
80002680:	0a 9c       	mov	r12,r5
80002682:	f0 1f 00 31 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x144>
80002686:	a8 8c       	st.b	r4[0x0],r12
80002688:	ec 0c 18 00 	cp.b	r12,r6
8000268c:	ce a0       	breq	80002660 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000268e:	3f e8       	mov	r8,-2
80002690:	f0 0c 18 00 	cp.b	r12,r8
80002694:	c0 e0       	breq	800026b0 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002696:	e0 6b 00 ff 	mov	r11,255
8000269a:	fe 7c 28 00 	mov	r12,-55296
8000269e:	f0 1f 00 2b 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a2:	30 1b       	mov	r11,1
800026a4:	fe 7c 28 00 	mov	r12,-55296
800026a8:	f0 1f 00 26 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
800026ac:	30 0c       	mov	r12,0
    return false;
800026ae:	c3 98       	rjmp	80002720 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b0:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b2:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026b6:	e0 64 00 ff 	mov	r4,255
800026ba:	fe 76 28 00 	mov	r6,-55296
    spi_read(SD_MMC_SPI,&data_read);
800026be:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c2:	08 9b       	mov	r11,r4
800026c4:	0c 9c       	mov	r12,r6
800026c6:	f0 1f 00 21 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ca:	06 9b       	mov	r11,r3
800026cc:	0c 9c       	mov	r12,r6
800026ce:	f0 1f 00 20 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d2:	9a 18       	ld.sh	r8,sp[0x2]
800026d4:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026d6:	0a 37       	cp.w	r7,r5
800026d8:	cf 51       	brne	800026c2 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026da:	49 78       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x134>
800026dc:	70 09       	ld.w	r9,r8[0x0]
800026de:	f2 c9 fe 00 	sub	r9,r9,-512
800026e2:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e4:	e0 6b 00 ff 	mov	r11,255
800026e8:	fe 7c 28 00 	mov	r12,-55296
800026ec:	f0 1f 00 17 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f0:	e0 6b 00 ff 	mov	r11,255
800026f4:	fe 7c 28 00 	mov	r12,-55296
800026f8:	f0 1f 00 14 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800026fc:	e0 6b 00 ff 	mov	r11,255
80002700:	fe 7c 28 00 	mov	r12,-55296
80002704:	f0 1f 00 11 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002708:	e0 6b 00 ff 	mov	r11,255
8000270c:	fe 7c 28 00 	mov	r12,-55296
80002710:	f0 1f 00 0e 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 1b       	mov	r11,1
80002716:	fe 7c 28 00 	mov	r12,-55296
8000271a:	f0 1f 00 0a 	mcall	80002740 <sd_mmc_spi_read_sector_to_ram+0x140>
8000271e:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	21 58       	sub	r8,21
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	2f 90       	sub	r0,-7
80002730:	00 00       	add	r0,r0
80002732:	05 fe       	ld.ub	lr,r2[0x7]
80002734:	00 00       	add	r0,r0
80002736:	00 18       	sub	r8,r0
80002738:	80 00       	ld.sh	r0,r0[0x0]
8000273a:	21 ec       	sub	r12,30
8000273c:	00 00       	add	r0,r0
8000273e:	06 10       	sub	r0,r3
80002740:	80 00       	ld.sh	r0,r0[0x0]
80002742:	2f dc       	sub	r12,-3
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	21 24       	sub	r4,18
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	30 c2       	mov	r2,12
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	30 de       	mov	lr,13

80002750 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002750:	eb cd 40 fc 	pushm	r2-r7,lr
80002754:	20 1d       	sub	sp,4
80002756:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002758:	f0 1f 00 32 	mcall	80002820 <sd_mmc_spi_get_csd+0xd0>
8000275c:	c5 f0       	breq	8000281a <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000275e:	30 1b       	mov	r11,1
80002760:	fe 7c 28 00 	mov	r12,-55296
80002764:	f0 1f 00 30 	mcall	80002824 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002768:	30 0b       	mov	r11,0
8000276a:	30 9c       	mov	r12,9
8000276c:	f0 1f 00 2f 	mcall	80002828 <sd_mmc_spi_get_csd+0xd8>
80002770:	4a f8       	lddpc	r8,8000282c <sd_mmc_spi_get_csd+0xdc>
80002772:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002774:	58 0c       	cp.w	r12,0
80002776:	c0 81       	brne	80002786 <sd_mmc_spi_get_csd+0x36>
80002778:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277a:	e0 64 00 ff 	mov	r4,255
8000277e:	10 93       	mov	r3,r8
80002780:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002782:	30 95       	mov	r5,9
80002784:	c1 78       	rjmp	800027b2 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002786:	30 1b       	mov	r11,1
80002788:	fe 7c 28 00 	mov	r12,-55296
8000278c:	f0 1f 00 29 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002790:	30 09       	mov	r9,0
80002792:	4a 98       	lddpc	r8,80002834 <sd_mmc_spi_get_csd+0xe4>
80002794:	b0 89       	st.b	r8[0x0],r9
80002796:	30 0c       	mov	r12,0
    return false;
80002798:	c4 18       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279a:	ea 07 18 00 	cp.b	r7,r5
8000279e:	c0 81       	brne	800027ae <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 1b       	mov	r11,1
800027a2:	fe 7c 28 00 	mov	r12,-55296
800027a6:	f0 1f 00 23 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
800027aa:	30 0c       	mov	r12,0
      return false;
800027ac:	c3 78       	rjmp	8000281a <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027ae:	2f f7       	sub	r7,-1
800027b0:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b2:	08 9c       	mov	r12,r4
800027b4:	f0 1f 00 21 	mcall	80002838 <sd_mmc_spi_get_csd+0xe8>
800027b8:	a6 8c       	st.b	r3[0x0],r12
800027ba:	ec 0c 18 00 	cp.b	r12,r6
800027be:	ce e1       	brne	8000279a <sd_mmc_spi_get_csd+0x4a>
800027c0:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c2:	e0 65 00 ff 	mov	r5,255
800027c6:	fe 76 28 00 	mov	r6,-55296
   spi_read(SD_MMC_SPI,&data_read);
800027ca:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027ce:	0a 9b       	mov	r11,r5
800027d0:	0c 9c       	mov	r12,r6
800027d2:	f0 1f 00 1b 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027d6:	08 9b       	mov	r11,r4
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 1a 	mcall	80002840 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027de:	9a 18       	ld.sh	r8,sp[0x2]
800027e0:	e4 07 0b 08 	st.b	r2[r7],r8
800027e4:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027e6:	59 07       	cp.w	r7,16
800027e8:	cf 31       	brne	800027ce <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ea:	e0 6b 00 ff 	mov	r11,255
800027ee:	fe 7c 28 00 	mov	r12,-55296
800027f2:	f0 1f 00 13 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027f6:	e0 6b 00 ff 	mov	r11,255
800027fa:	fe 7c 28 00 	mov	r12,-55296
800027fe:	f0 1f 00 10 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002802:	e0 6b 00 ff 	mov	r11,255
80002806:	fe 7c 28 00 	mov	r12,-55296
8000280a:	f0 1f 00 0d 	mcall	8000283c <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000280e:	30 1b       	mov	r11,1
80002810:	fe 7c 28 00 	mov	r12,-55296
80002814:	f0 1f 00 07 	mcall	80002830 <sd_mmc_spi_get_csd+0xe0>
80002818:	30 1c       	mov	r12,1
  return true;
}
8000281a:	2f fd       	sub	sp,-4
8000281c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	21 58       	sub	r8,21
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	2f 90       	sub	r0,-7
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	21 ec       	sub	r12,30
8000282c:	00 00       	add	r0,r0
8000282e:	06 10       	sub	r0,r3
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	2f dc       	sub	r12,-3
80002834:	00 00       	add	r0,r0
80002836:	00 30       	cp.w	r0,r0
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	21 24       	sub	r4,18
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	30 c2       	mov	r2,12
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	30 de       	mov	lr,13

80002844 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002844:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002846:	fe fb 02 66 	ld.w	r11,pc[614]
8000284a:	e6 68 1a 80 	mov	r8,400000
8000284e:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002850:	fe f8 02 60 	ld.w	r8,pc[608]
80002854:	70 0a       	ld.w	r10,r8[0x0]
80002856:	fe 7c 28 00 	mov	r12,-55296
8000285a:	f0 1f 00 97 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000285e:	30 1b       	mov	r11,1
80002860:	fe 7c 28 00 	mov	r12,-55296
80002864:	f0 1f 00 95 	mcall	80002ab8 <sd_mmc_spi_internal_init+0x274>
80002868:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
8000286a:	e0 66 00 ff 	mov	r6,255
8000286e:	fe 75 28 00 	mov	r5,-55296
80002872:	0c 9b       	mov	r11,r6
80002874:	0a 9c       	mov	r12,r5
80002876:	f0 1f 00 92 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
8000287a:	2f f7       	sub	r7,-1
8000287c:	58 a7       	cp.w	r7,10
8000287e:	cf a1       	brne	80002872 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002880:	30 1b       	mov	r11,1
80002882:	fe 7c 28 00 	mov	r12,-55296
80002886:	f0 1f 00 8f 	mcall	80002ac0 <sd_mmc_spi_internal_init+0x27c>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8000288a:	30 08       	mov	r8,0
8000288c:	fe f9 02 38 	ld.w	r9,pc[568]
80002890:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002892:	fe f9 02 36 	ld.w	r9,pc[566]
80002896:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002898:	30 0b       	mov	r11,0
8000289a:	16 9c       	mov	r12,r11
8000289c:	f0 1f 00 8c 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028a0:	fe f8 02 30 	ld.w	r8,pc[560]
800028a4:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028a6:	e0 6b 00 ff 	mov	r11,255
800028aa:	fe 7c 28 00 	mov	r12,-55296
800028ae:	f0 1f 00 84 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
800028b2:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028b4:	fe f6 02 1c 	ld.w	r6,pc[540]
800028b8:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028ba:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028bc:	e0 62 00 ff 	mov	r2,255
800028c0:	fe 71 28 00 	mov	r1,-55296
    // do retry counter
    retry++;
    if(retry > 100)
800028c4:	36 54       	mov	r4,101
800028c6:	c1 08       	rjmp	800028e6 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028c8:	06 9b       	mov	r11,r3
800028ca:	06 9c       	mov	r12,r3
800028cc:	f0 1f 00 80 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800028d0:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800028d2:	04 9b       	mov	r11,r2
800028d4:	02 9c       	mov	r12,r1
800028d6:	f0 1f 00 7a 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
    // do retry counter
    retry++;
800028da:	2f f7       	sub	r7,-1
800028dc:	5c 87       	casts.h	r7
    if(retry > 100)
800028de:	e8 07 19 00 	cp.h	r7,r4
800028e2:	e0 80 00 e4 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800028e6:	0d 88       	ld.ub	r8,r6[0x0]
800028e8:	ea 08 18 00 	cp.b	r8,r5
800028ec:	ce e1       	brne	800028c8 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800028ee:	f0 1f 00 7a 	mcall	80002ad4 <sd_mmc_spi_internal_init+0x290>
  if(if_cond == -1) {
800028f2:	5b fc       	cp.w	r12,-1
800028f4:	e0 80 00 db 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false; // card is bad
  } else if (if_cond == 1) {
800028f8:	58 1c       	cp.w	r12,1
800028fa:	c0 51       	brne	80002904 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800028fc:	30 29       	mov	r9,2
800028fe:	4f 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002900:	b0 89       	st.b	r8[0x0],r9
80002902:	c4 c8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002904:	30 0b       	mov	r11,0
80002906:	33 7c       	mov	r12,55
80002908:	f0 1f 00 71 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000290c:	4f 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
8000290e:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002910:	e0 6b 00 ff 	mov	r11,255
80002914:	fe 7c 28 00 	mov	r12,-55296
80002918:	f0 1f 00 69 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
8000291c:	30 0b       	mov	r11,0
8000291e:	32 9c       	mov	r12,41
80002920:	f0 1f 00 6b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002924:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002926:	e0 6b 00 ff 	mov	r11,255
8000292a:	fe 7c 28 00 	mov	r12,-55296
8000292e:	f0 1f 00 64 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002932:	0f 88       	ld.ub	r8,r7[0x0]
80002934:	e2 18 00 fe 	andl	r8,0xfe,COH
80002938:	c0 51       	brne	80002942 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000293a:	30 19       	mov	r9,1
8000293c:	4e 38       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000293e:	b0 89       	st.b	r8[0x0],r9
80002940:	c2 d8       	rjmp	8000299a <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002942:	30 09       	mov	r9,0
80002944:	4e 18       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002946:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002948:	30 0b       	mov	r11,0
8000294a:	16 9c       	mov	r12,r11
8000294c:	f0 1f 00 60 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002950:	4e 08       	lddpc	r8,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002952:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002954:	e0 6b 00 ff 	mov	r11,255
80002958:	fe 7c 28 00 	mov	r12,-55296
8000295c:	f0 1f 00 58 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
80002960:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002962:	4d c6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002964:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002966:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002968:	e0 62 00 ff 	mov	r2,255
8000296c:	fe 71 28 00 	mov	r1,-55296
        // do retry counter
        retry++;
        if(retry > 100)
80002970:	36 54       	mov	r4,101
80002972:	c1 08       	rjmp	80002992 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002974:	06 9b       	mov	r11,r3
80002976:	06 9c       	mov	r12,r3
80002978:	f0 1f 00 55 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
8000297c:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000297e:	04 9b       	mov	r11,r2
80002980:	02 9c       	mov	r12,r1
80002982:	f0 1f 00 4f 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
        // do retry counter
        retry++;
80002986:	2f f7       	sub	r7,-1
80002988:	5c 87       	casts.h	r7
        if(retry > 100)
8000298a:	e8 07 19 00 	cp.h	r7,r4
8000298e:	e0 80 00 8e 	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002992:	0d 88       	ld.ub	r8,r6[0x0]
80002994:	ea 08 18 00 	cp.b	r8,r5
80002998:	ce e1       	brne	80002974 <sd_mmc_spi_internal_init+0x130>
8000299a:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
8000299c:	4c b4       	lddpc	r4,80002ac8 <sd_mmc_spi_internal_init+0x284>
8000299e:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029a0:	0e 93       	mov	r3,r7
800029a2:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029a4:	4c b6       	lddpc	r6,80002ad0 <sd_mmc_spi_internal_init+0x28c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a6:	e0 62 00 ff 	mov	r2,255
800029aa:	fe 71 28 00 	mov	r1,-55296

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
800029ae:	09 88       	ld.ub	r8,r4[0x0]
800029b0:	ea 08 18 00 	cp.b	r8,r5
800029b4:	c1 10       	breq	800029d6 <sd_mmc_spi_internal_init+0x192>
800029b6:	c0 63       	brcs	800029c2 <sd_mmc_spi_internal_init+0x17e>
800029b8:	30 29       	mov	r9,2
800029ba:	f2 08 18 00 	cp.b	r8,r9
800029be:	c2 81       	brne	80002a0e <sd_mmc_spi_internal_init+0x1ca>
800029c0:	c1 98       	rjmp	800029f2 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800029c2:	06 9b       	mov	r11,r3
800029c4:	30 1c       	mov	r12,1
800029c6:	f0 1f 00 42 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029ca:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	04 9b       	mov	r11,r2
800029ce:	02 9c       	mov	r12,r1
800029d0:	f0 1f 00 3b 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029d4:	c1 d8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029d6:	06 9b       	mov	r11,r3
800029d8:	00 9c       	mov	r12,r0
800029da:	f0 1f 00 3d 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800029de:	06 9b       	mov	r11,r3
800029e0:	32 9c       	mov	r12,41
800029e2:	f0 1f 00 3b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
800029e6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e8:	04 9b       	mov	r11,r2
800029ea:	02 9c       	mov	r12,r1
800029ec:	f0 1f 00 34 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
800029f0:	c0 f8       	rjmp	80002a0e <sd_mmc_spi_internal_init+0x1ca>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f2:	06 9b       	mov	r11,r3
800029f4:	00 9c       	mov	r12,r0
800029f6:	f0 1f 00 36 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800029fa:	fc 1b 40 00 	movh	r11,0x4000
800029fe:	32 9c       	mov	r12,41
80002a00:	f0 1f 00 33 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a04:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a06:	04 9b       	mov	r11,r2
80002a08:	02 9c       	mov	r12,r1
80002a0a:	f0 1f 00 2d 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
      break;
    }
     // do retry counter
     retry++;
80002a0e:	2f f7       	sub	r7,-1
80002a10:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a12:	fe 78 c3 50 	mov	r8,-15536
80002a16:	f0 07 19 00 	cp.h	r7,r8
80002a1a:	c4 80       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
        return false;
  } while (r1);
80002a1c:	0d 89       	ld.ub	r9,r6[0x0]
80002a1e:	30 08       	mov	r8,0
80002a20:	f0 09 18 00 	cp.b	r9,r8
80002a24:	cc 51       	brne	800029ae <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a26:	4a 98       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a28:	11 89       	ld.ub	r9,r8[0x0]
80002a2a:	30 28       	mov	r8,2
80002a2c:	f0 09 18 00 	cp.b	r9,r8
80002a30:	c0 a1       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
    if_cond = sd_mmc_spi_check_hc();
80002a32:	f0 1f 00 2a 	mcall	80002ad8 <sd_mmc_spi_internal_init+0x294>
    if (if_cond == -1) {
80002a36:	5b fc       	cp.w	r12,-1
80002a38:	c3 90       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
      return false;
    } else if (if_cond == 1){
80002a3a:	58 1c       	cp.w	r12,1
80002a3c:	c0 41       	brne	80002a44 <sd_mmc_spi_internal_init+0x200>
          card_type = SD_CARD_2_SDHC;
80002a3e:	30 39       	mov	r9,3
80002a40:	4a 28       	lddpc	r8,80002ac8 <sd_mmc_spi_internal_init+0x284>
80002a42:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002a44:	30 0b       	mov	r11,0
80002a46:	33 bc       	mov	r12,59
80002a48:	f0 1f 00 21 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a4c:	4a 17       	lddpc	r7,80002ad0 <sd_mmc_spi_internal_init+0x28c>
80002a4e:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a50:	e0 6b 00 ff 	mov	r11,255
80002a54:	fe 7c 28 00 	mov	r12,-55296
80002a58:	f0 1f 00 19 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002a5c:	e0 6b 02 00 	mov	r11,512
80002a60:	31 0c       	mov	r12,16
80002a62:	f0 1f 00 1b 	mcall	80002acc <sd_mmc_spi_internal_init+0x288>
80002a66:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a68:	e0 6b 00 ff 	mov	r11,255
80002a6c:	fe 7c 28 00 	mov	r12,-55296
80002a70:	f0 1f 00 13 	mcall	80002abc <sd_mmc_spi_internal_init+0x278>
  if (r1 != 0x00)
80002a74:	0f 89       	ld.ub	r9,r7[0x0]
80002a76:	30 08       	mov	r8,0
80002a78:	f0 09 18 00 	cp.b	r9,r8
80002a7c:	c1 71       	brne	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002a7e:	49 8c       	lddpc	r12,80002adc <sd_mmc_spi_internal_init+0x298>
80002a80:	f0 1f 00 18 	mcall	80002ae0 <sd_mmc_spi_internal_init+0x29c>
80002a84:	c1 30       	breq	80002aaa <sd_mmc_spi_internal_init+0x266>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002a86:	f0 1f 00 18 	mcall	80002ae4 <sd_mmc_spi_internal_init+0x2a0>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002a8a:	30 19       	mov	r9,1
80002a8c:	48 e8       	lddpc	r8,80002ac4 <sd_mmc_spi_internal_init+0x280>
80002a8e:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002a90:	48 7b       	lddpc	r11,80002aac <sd_mmc_spi_internal_init+0x268>
80002a92:	e0 68 1b 00 	mov	r8,6912
80002a96:	ea 18 00 b7 	orh	r8,0xb7
80002a9a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002a9c:	48 58       	lddpc	r8,80002ab0 <sd_mmc_spi_internal_init+0x26c>
80002a9e:	70 0a       	ld.w	r10,r8[0x0]
80002aa0:	fe 7c 28 00 	mov	r12,-55296
80002aa4:	f0 1f 00 04 	mcall	80002ab4 <sd_mmc_spi_internal_init+0x270>
80002aa8:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80002aac:	00 00       	add	r0,r0
80002aae:	00 1c       	sub	r12,r0
80002ab0:	00 00       	add	r0,r0
80002ab2:	00 2c       	rsub	r12,r0
80002ab4:	80 00       	ld.sh	r0,r0[0x0]
80002ab6:	30 04       	mov	r4,0
80002ab8:	80 00       	ld.sh	r0,r0[0x0]
80002aba:	2f 90       	sub	r0,-7
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	30 c2       	mov	r2,12
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	2f dc       	sub	r12,-3
80002ac4:	00 00       	add	r0,r0
80002ac6:	00 30       	cp.w	r0,r0
80002ac8:	00 00       	add	r0,r0
80002aca:	05 fe       	ld.ub	lr,r2[0x7]
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	22 b4       	sub	r4,43
80002ad0:	00 00       	add	r0,r0
80002ad2:	06 10       	sub	r0,r3
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	25 48       	sub	r8,84
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	24 bc       	sub	r12,75
80002adc:	00 00       	add	r0,r0
80002ade:	06 00       	add	r0,r3
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	27 50       	sub	r0,117
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	20 04       	sub	r4,0

80002ae8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002ae8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002aea:	f0 1f 00 07 	mcall	80002b04 <sd_mmc_spi_mem_check+0x1c>
80002aee:	c0 a0       	breq	80002b02 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002af0:	48 68       	lddpc	r8,80002b08 <sd_mmc_spi_mem_check+0x20>
80002af2:	11 89       	ld.ub	r9,r8[0x0]
80002af4:	30 08       	mov	r8,0
80002af6:	f0 09 18 00 	cp.b	r9,r8
80002afa:	c0 20       	breq	80002afe <sd_mmc_spi_mem_check+0x16>
80002afc:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002afe:	f0 1f 00 04 	mcall	80002b0c <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b02:	d8 02       	popm	pc
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	22 f4       	sub	r4,47
80002b08:	00 00       	add	r0,r0
80002b0a:	00 30       	cp.w	r0,r0
80002b0c:	80 00       	ld.sh	r0,r0[0x0]
80002b0e:	28 44       	sub	r4,-124

80002b10 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b10:	eb cd 40 10 	pushm	r4,lr
80002b14:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b18:	48 88       	lddpc	r8,80002b38 <sd_mmc_spi_init+0x28>
80002b1a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b1c:	48 88       	lddpc	r8,80002b3c <sd_mmc_spi_init+0x2c>
80002b1e:	e8 ea 00 00 	ld.d	r10,r4[0]
80002b22:	f0 eb 00 00 	st.d	r8[0],r10
80002b26:	e8 ea 00 08 	ld.d	r10,r4[8]
80002b2a:	f0 eb 00 08 	st.d	r8[8],r10

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b2e:	f0 1f 00 05 	mcall	80002b40 <sd_mmc_spi_init+0x30>
}
80002b32:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b36:	00 00       	add	r0,r0
80002b38:	00 00       	add	r0,r0
80002b3a:	00 2c       	rsub	r12,r0
80002b3c:	00 00       	add	r0,r0
80002b3e:	00 1c       	sub	r12,r0
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	28 44       	sub	r4,-124

80002b44 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002b44:	5e fd       	retal	0

80002b46 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80002b46:	5e fd       	retal	0

80002b48 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002b48:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002b4a:	49 88       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b4c:	11 88       	ld.ub	r8,r8[0x0]
80002b4e:	30 19       	mov	r9,1
80002b50:	f2 08 18 00 	cp.b	r8,r9
80002b54:	c1 40       	breq	80002b7c <sd_mmc_spi_test_unit_ready+0x34>
80002b56:	c0 63       	brcs	80002b62 <sd_mmc_spi_test_unit_ready+0x1a>
80002b58:	30 29       	mov	r9,2
80002b5a:	f2 08 18 00 	cp.b	r8,r9
80002b5e:	c2 01       	brne	80002b9e <sd_mmc_spi_test_unit_ready+0x56>
80002b60:	c1 a8       	rjmp	80002b94 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002b62:	30 09       	mov	r9,0
80002b64:	49 28       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b66:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80002b68:	f0 1f 00 12 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b6c:	c0 31       	brne	80002b72 <sd_mmc_spi_test_unit_ready+0x2a>
80002b6e:	30 2c       	mov	r12,2
80002b70:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002b72:	30 19       	mov	r9,1
80002b74:	48 d8       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b76:	b0 89       	st.b	r8[0x0],r9
80002b78:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b7a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80002b7c:	f0 1f 00 0d 	mcall	80002bb0 <sd_mmc_spi_test_unit_ready+0x68>
80002b80:	c0 20       	breq	80002b84 <sd_mmc_spi_test_unit_ready+0x3c>
80002b82:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002b84:	30 29       	mov	r9,2
80002b86:	48 98       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b88:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002b8a:	30 09       	mov	r9,0
80002b8c:	48 88       	lddpc	r8,80002bac <sd_mmc_spi_test_unit_ready+0x64>
80002b8e:	b0 89       	st.b	r8[0x0],r9
80002b90:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002b92:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b94:	30 09       	mov	r9,0
80002b96:	48 58       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002b98:	b0 89       	st.b	r8[0x0],r9
80002b9a:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002b9c:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002b9e:	30 09       	mov	r9,0
80002ba0:	48 28       	lddpc	r8,80002ba8 <sd_mmc_spi_test_unit_ready+0x60>
80002ba2:	b0 89       	st.b	r8[0x0],r9
80002ba4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002ba6:	d8 02       	popm	pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 08       	add	r8,r0
80002bac:	00 00       	add	r0,r0
80002bae:	00 30       	cp.w	r0,r0
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	2a e8       	sub	r8,-82

80002bb4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002bb4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002bb6:	f0 1f 00 02 	mcall	80002bbc <sd_mmc_spi_mem_init+0x8>
}
80002bba:	d8 02       	popm	pc
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	28 44       	sub	r4,-124

80002bc0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80002bc4:	18 96       	mov	r6,r12
80002bc6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002bc8:	f0 1f 00 12 	mcall	80002c10 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80002bcc:	49 28       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bce:	11 89       	ld.ub	r9,r8[0x0]
80002bd0:	30 08       	mov	r8,0
80002bd2:	f0 09 18 00 	cp.b	r9,r8
80002bd6:	c0 c1       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80002bd8:	f0 1f 00 10 	mcall	80002c18 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80002bdc:	48 e8       	lddpc	r8,80002c14 <sd_mmc_spi_ram_2_mem+0x54>
80002bde:	11 89       	ld.ub	r9,r8[0x0]
80002be0:	30 08       	mov	r8,0
80002be2:	f0 09 18 00 	cp.b	r9,r8
80002be6:	c0 41       	brne	80002bee <sd_mmc_spi_ram_2_mem+0x2e>
80002be8:	30 2c       	mov	r12,2
80002bea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002bee:	0c 9c       	mov	r12,r6
80002bf0:	f0 1f 00 0b 	mcall	80002c1c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80002bf4:	0e 9c       	mov	r12,r7
80002bf6:	f0 1f 00 0b 	mcall	80002c20 <sd_mmc_spi_ram_2_mem+0x60>
80002bfa:	c0 61       	brne	80002c06 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002bfc:	f0 1f 00 0a 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c00:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002c02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002c06:	f0 1f 00 08 	mcall	80002c24 <sd_mmc_spi_ram_2_mem+0x64>
80002c0a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002c0e:	00 00       	add	r0,r0
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	22 f4       	sub	r4,47
80002c14:	00 00       	add	r0,r0
80002c16:	00 30       	cp.w	r0,r0
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b b4       	sub	r4,-69
80002c1c:	80 00       	ld.sh	r0,r0[0x0]
80002c1e:	21 b0       	sub	r0,27
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	23 70       	sub	r0,55
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	21 20       	sub	r0,18

80002c28 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002c28:	eb cd 40 c0 	pushm	r6-r7,lr
80002c2c:	18 97       	mov	r7,r12
80002c2e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002c30:	f0 1f 00 12 	mcall	80002c78 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80002c34:	49 28       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 c1       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80002c40:	f0 1f 00 10 	mcall	80002c80 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80002c44:	48 e8       	lddpc	r8,80002c7c <sd_mmc_spi_mem_2_ram+0x54>
80002c46:	11 89       	ld.ub	r9,r8[0x0]
80002c48:	30 08       	mov	r8,0
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	c0 41       	brne	80002c56 <sd_mmc_spi_mem_2_ram+0x2e>
80002c50:	30 2c       	mov	r12,2
80002c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002c56:	0e 9c       	mov	r12,r7
80002c58:	f0 1f 00 0b 	mcall	80002c84 <sd_mmc_spi_mem_2_ram+0x5c>
80002c5c:	c0 c0       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002c5e:	0c 9c       	mov	r12,r6
80002c60:	f0 1f 00 0a 	mcall	80002c88 <sd_mmc_spi_mem_2_ram+0x60>
80002c64:	c0 80       	breq	80002c74 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002c66:	f0 1f 00 0a 	mcall	80002c8c <sd_mmc_spi_mem_2_ram+0x64>
80002c6a:	ec 1c 00 01 	eorl	r12,0x1
80002c6e:	5c 5c       	castu.b	r12
80002c70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002c78:	80 00       	ld.sh	r0,r0[0x0]
80002c7a:	22 f4       	sub	r4,47
80002c7c:	00 00       	add	r0,r0
80002c7e:	00 30       	cp.w	r0,r0
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b b4       	sub	r4,-69
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	21 d4       	sub	r4,29
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	26 00       	sub	r0,96
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	21 c8       	sub	r8,28

80002c90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // ommited because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80002c96:	48 c8       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002c98:	11 89       	ld.ub	r9,r8[0x0]
80002c9a:	30 08       	mov	r8,0
80002c9c:	f0 09 18 00 	cp.b	r9,r8
80002ca0:	c0 c1       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80002ca2:	f0 1f 00 0a 	mcall	80002cc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80002ca6:	48 88       	lddpc	r8,80002cc4 <sd_mmc_spi_read_capacity+0x34>
80002ca8:	11 89       	ld.ub	r9,r8[0x0]
80002caa:	30 08       	mov	r8,0
80002cac:	f0 09 18 00 	cp.b	r9,r8
80002cb0:	c0 41       	brne	80002cb8 <sd_mmc_spi_read_capacity+0x28>
80002cb2:	30 2c       	mov	r12,2
80002cb4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002cb8:	48 58       	lddpc	r8,80002ccc <sd_mmc_spi_read_capacity+0x3c>
80002cba:	70 08       	ld.w	r8,r8[0x0]
80002cbc:	2f f8       	sub	r8,-1
80002cbe:	8f 08       	st.w	r7[0x0],r8
80002cc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002cc4:	00 00       	add	r0,r0
80002cc6:	00 30       	cp.w	r0,r0
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	2b b4       	sub	r4,-69
80002ccc:	00 00       	add	r0,r0
80002cce:	05 f8       	ld.ub	r8,r2[0x7]

80002cd0 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002cd0:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002cd4:	49 18       	lddpc	r8,80002d18 <LED_On+0x48>
80002cd6:	70 09       	ld.w	r9,r8[0x0]
80002cd8:	f9 e9 10 09 	or	r9,r12,r9
80002cdc:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002cde:	58 0c       	cp.w	r12,0
80002ce0:	5e 0c       	reteq	r12
80002ce2:	48 f8       	lddpc	r8,80002d1c <LED_On+0x4c>
80002ce4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002ce6:	18 9a       	mov	r10,r12
80002ce8:	5c 9a       	brev	r10
80002cea:	f4 0a 12 00 	clz	r10,r10
80002cee:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002cf0:	f4 09 15 04 	lsl	r9,r10,0x4
80002cf4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002cf6:	70 09       	ld.w	r9,r8[0x0]
80002cf8:	a9 69       	lsl	r9,0x8
80002cfa:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80002cfe:	70 1b       	ld.w	r11,r8[0x4]
80002d00:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002d04:	70 1b       	ld.w	r11,r8[0x4]
80002d06:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002d0a:	70 1b       	ld.w	r11,r8[0x4]
80002d0c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002d0e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002d12:	ce a1       	brne	80002ce6 <LED_On+0x16>
80002d14:	5e fc       	retal	r12
80002d16:	00 00       	add	r0,r0
80002d18:	00 00       	add	r0,r0
80002d1a:	00 0c       	add	r12,r0
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	8a 00       	ld.sh	r0,r5[0x0]

80002d20 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002d20:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002d24:	49 28       	lddpc	r8,80002d6c <LED_Off+0x4c>
80002d26:	70 09       	ld.w	r9,r8[0x0]
80002d28:	f8 0a 11 ff 	rsub	r10,r12,-1
80002d2c:	f5 e9 00 09 	and	r9,r10,r9
80002d30:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002d32:	58 0c       	cp.w	r12,0
80002d34:	5e 0c       	reteq	r12
80002d36:	48 f8       	lddpc	r8,80002d70 <LED_Off+0x50>
80002d38:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002d3a:	18 9a       	mov	r10,r12
80002d3c:	5c 9a       	brev	r10
80002d3e:	f4 0a 12 00 	clz	r10,r10
80002d42:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002d44:	f4 09 15 04 	lsl	r9,r10,0x4
80002d48:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002d4a:	70 09       	ld.w	r9,r8[0x0]
80002d4c:	a9 69       	lsl	r9,0x8
80002d4e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002d52:	70 1b       	ld.w	r11,r8[0x4]
80002d54:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002d58:	70 1b       	ld.w	r11,r8[0x4]
80002d5a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002d5e:	70 1b       	ld.w	r11,r8[0x4]
80002d60:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002d62:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002d66:	ce a1       	brne	80002d3a <LED_Off+0x1a>
80002d68:	5e fc       	retal	r12
80002d6a:	00 00       	add	r0,r0
80002d6c:	00 00       	add	r0,r0
80002d6e:	00 0c       	add	r12,r0
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	8a 00       	ld.sh	r0,r5[0x0]

80002d74 <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002d74:	f8 08 16 05 	lsr	r8,r12,0x5
80002d78:	a9 68       	lsl	r8,0x8
80002d7a:	e0 28 f0 00 	sub	r8,61440

  // Enable the correct function.
  switch (function)
80002d7e:	58 1b       	cp.w	r11,1
80002d80:	c0 d0       	breq	80002d9a <gpio_enable_module_pin+0x26>
80002d82:	c0 63       	brcs	80002d8e <gpio_enable_module_pin+0x1a>
80002d84:	58 2b       	cp.w	r11,2
80002d86:	c1 00       	breq	80002da6 <gpio_enable_module_pin+0x32>
80002d88:	58 3b       	cp.w	r11,3
80002d8a:	c1 40       	breq	80002db2 <gpio_enable_module_pin+0x3e>
80002d8c:	5e ff       	retal	1
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002d8e:	30 19       	mov	r9,1
80002d90:	f2 0c 09 49 	lsl	r9,r9,r12
80002d94:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002d96:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002d98:	c1 28       	rjmp	80002dbc <gpio_enable_module_pin+0x48>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002d9a:	30 19       	mov	r9,1
80002d9c:	f2 0c 09 49 	lsl	r9,r9,r12
80002da0:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002da2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002da4:	c0 c8       	rjmp	80002dbc <gpio_enable_module_pin+0x48>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002da6:	30 19       	mov	r9,1
80002da8:	f2 0c 09 49 	lsl	r9,r9,r12
80002dac:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002dae:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002db0:	c0 68       	rjmp	80002dbc <gpio_enable_module_pin+0x48>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002db2:	30 19       	mov	r9,1
80002db4:	f2 0c 09 49 	lsl	r9,r9,r12
80002db8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002dba:	91 99       	st.w	r8[0x24],r9
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002dbc:	30 19       	mov	r9,1
80002dbe:	f2 0c 09 4c 	lsl	r12,r9,r12
80002dc2:	91 2c       	st.w	r8[0x8],r12
80002dc4:	5e fd       	retal	0
80002dc6:	d7 03       	nop

80002dc8 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002dc8:	d4 21       	pushm	r4-r7,lr
80002dca:	18 97       	mov	r7,r12
80002dcc:	16 94       	mov	r4,r11
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002dce:	58 0b       	cp.w	r11,0
80002dd0:	c0 31       	brne	80002dd6 <gpio_enable_module+0xe>
80002dd2:	30 05       	mov	r5,0
80002dd4:	c0 d8       	rjmp	80002dee <gpio_enable_module+0x26>
80002dd6:	30 06       	mov	r6,0
80002dd8:	0c 95       	mov	r5,r6
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002dda:	0f 9b       	ld.ub	r11,r7[0x1]
80002ddc:	0f 8c       	ld.ub	r12,r7[0x0]
80002dde:	f0 1f 00 06 	mcall	80002df4 <gpio_enable_module+0x2c>
80002de2:	18 45       	or	r5,r12
    gpiomap++;
80002de4:	2f e7       	sub	r7,-2
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002de6:	2f f6       	sub	r6,-1
80002de8:	0c 34       	cp.w	r4,r6
80002dea:	fe 9b ff f8 	brhi	80002dda <gpio_enable_module+0x12>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
80002dee:	0a 9c       	mov	r12,r5
80002df0:	d8 22       	popm	r4-r7,pc
80002df2:	00 00       	add	r0,r0
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2d 74       	sub	r4,-41

80002df8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002df8:	fe 78 08 00 	mov	r8,-63488
80002dfc:	e0 69 00 83 	mov	r9,131
80002e00:	f2 0c 01 0c 	sub	r12,r9,r12
80002e04:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002e08:	f2 ca ff c0 	sub	r10,r9,-64
80002e0c:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002e10:	58 08       	cp.w	r8,0
80002e12:	c0 21       	brne	80002e16 <_get_interrupt_handler+0x1e>
80002e14:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002e16:	f0 08 12 00 	clz	r8,r8
80002e1a:	48 5a       	lddpc	r10,80002e2c <_get_interrupt_handler+0x34>
80002e1c:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002e20:	f0 08 11 1f 	rsub	r8,r8,31
80002e24:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002e26:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002e2a:	5e fc       	retal	r12
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	8a 80       	ld.uh	r0,r5[0x0]

80002e30 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002e30:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002e32:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002e36:	99 a8       	st.w	r12[0x28],r8
}
80002e38:	5e fc       	retal	r12
80002e3a:	d7 03       	nop

80002e3c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002e3c:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002e3e:	ec 5b bb 9f 	cp.w	r11,899999
80002e42:	e0 8b 00 04 	brhi	80002e4a <pm_enable_osc0_crystal+0xe>
80002e46:	30 4b       	mov	r11,4
80002e48:	c1 38       	rjmp	80002e6e <pm_enable_osc0_crystal+0x32>
80002e4a:	e0 68 c6 bf 	mov	r8,50879
80002e4e:	ea 18 00 2d 	orh	r8,0x2d
80002e52:	10 3b       	cp.w	r11,r8
80002e54:	e0 8b 00 04 	brhi	80002e5c <pm_enable_osc0_crystal+0x20>
80002e58:	30 5b       	mov	r11,5
80002e5a:	c0 a8       	rjmp	80002e6e <pm_enable_osc0_crystal+0x32>
80002e5c:	e0 68 12 00 	mov	r8,4608
80002e60:	ea 18 00 7a 	orh	r8,0x7a
80002e64:	10 3b       	cp.w	r11,r8
80002e66:	f9 bb 03 06 	movlo	r11,6
80002e6a:	f9 bb 02 07 	movhs	r11,7
80002e6e:	f0 1f 00 02 	mcall	80002e74 <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002e72:	d8 02       	popm	pc
80002e74:	80 00       	ld.sh	r0,r0[0x0]
80002e76:	2e 30       	sub	r0,-29

80002e78 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002e78:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002e7a:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002e7e:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002e80:	78 08       	ld.w	r8,r12[0x0]
80002e82:	a3 a8       	sbr	r8,0x2
80002e84:	99 08       	st.w	r12[0x0],r8
}
80002e86:	5e fc       	retal	r12

80002e88 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002e88:	79 58       	ld.w	r8,r12[0x54]
80002e8a:	e2 18 00 80 	andl	r8,0x80,COH
80002e8e:	cf d0       	breq	80002e88 <pm_wait_for_clk0_ready>
}
80002e90:	5e fc       	retal	r12
80002e92:	d7 03       	nop

80002e94 <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002e94:	eb cd 40 80 	pushm	r7,lr
80002e98:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002e9a:	f0 1f 00 04 	mcall	80002ea8 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002e9e:	0e 9c       	mov	r12,r7
80002ea0:	f0 1f 00 03 	mcall	80002eac <pm_enable_clk0+0x18>
}
80002ea4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ea8:	80 00       	ld.sh	r0,r0[0x0]
80002eaa:	2e 78       	sub	r8,-25
80002eac:	80 00       	ld.sh	r0,r0[0x0]
80002eae:	2e 88       	sub	r8,-24

80002eb0 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002eb0:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002eb2:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002eb6:	99 08       	st.w	r12[0x0],r8
}
80002eb8:	5e fc       	retal	r12
80002eba:	d7 03       	nop

80002ebc <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80002ec0:	18 97       	mov	r7,r12
80002ec2:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002ec4:	f0 1f 00 06 	mcall	80002edc <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002ec8:	0c 9b       	mov	r11,r6
80002eca:	0e 9c       	mov	r12,r7
80002ecc:	f0 1f 00 05 	mcall	80002ee0 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002ed0:	30 1b       	mov	r11,1
80002ed2:	0e 9c       	mov	r12,r7
80002ed4:	f0 1f 00 04 	mcall	80002ee4 <pm_switch_to_osc0+0x28>
}
80002ed8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	2e 3c       	sub	r12,-29
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	2e 94       	sub	r4,-23
80002ee4:	80 00       	ld.sh	r0,r0[0x0]
80002ee6:	2e b0       	sub	r0,-21

80002ee8 <pcl_switch_to_osc>:
        return PASS;
}
#endif // UC3D device-specific implementation

long int pcl_switch_to_osc(pcl_osc_t osc, unsigned int fcrystal, unsigned int startup)
{
80002ee8:	d4 01       	pushm	lr
#ifndef AVR32_PM_VERSION_RESETVALUE
// Implementation for UC3A, UC3A3, UC3B parts.
  if(PCL_OSC0 == osc)
80002eea:	58 0c       	cp.w	r12,0
80002eec:	c0 40       	breq	80002ef4 <pcl_switch_to_osc+0xc>
80002eee:	fe 7c d8 f0 	mov	r12,-10000
80002ef2:	d8 02       	popm	pc
  {
    // Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency,
    // enable the OSC0, set the main clock source as being OSC0.
    pm_switch_to_osc0(&AVR32_PM, fcrystal, startup);
80002ef4:	fe 7c 0c 00 	mov	r12,-62464
80002ef8:	f0 1f 00 02 	mcall	80002f00 <pcl_switch_to_osc+0x18>
80002efc:	d8 0a       	popm	pc,r12=0
80002efe:	00 00       	add	r0,r0
80002f00:	80 00       	ld.sh	r0,r0[0x0]
80002f02:	2e bc       	sub	r12,-21

80002f04 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
80002f04:	f8 c9 00 01 	sub	r9,r12,1
80002f08:	f8 08 16 01 	lsr	r8,r12,0x1
80002f0c:	f2 08 00 08 	add	r8,r9,r8
80002f10:	f0 0b 00 0b 	add	r11,r8,r11
80002f14:	f6 0c 0d 0a 	divu	r10,r11,r12
80002f18:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
80002f1a:	f4 c8 00 01 	sub	r8,r10,1
80002f1e:	e0 48 00 fe 	cp.w	r8,254
80002f22:	e0 88 00 03 	brls	80002f28 <getBaudDiv+0x24>
80002f26:	5e fe       	retal	-1
    return -1;
  }

  return baudDiv;
80002f28:	5c 8c       	casts.h	r12
}
80002f2a:	5e fc       	retal	r12

80002f2c <spi_initMaster>:

spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80002f2c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002f30:	30 18       	mov	r8,1
80002f32:	f0 09 18 00 	cp.b	r9,r8
80002f36:	e0 88 00 04 	brls	80002f3e <spi_initMaster+0x12>
80002f3a:	30 2c       	mov	r12,2
80002f3c:	5e fc       	retal	r12
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002f3e:	e0 68 00 80 	mov	r8,128
80002f42:	99 08       	st.w	r12[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80002f44:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
80002f46:	30 19       	mov	r9,1
80002f48:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80002f4c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80002f50:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
80002f54:	30 09       	mov	r9,0
80002f56:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80002f5a:	30 fa       	mov	r10,15
80002f5c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
80002f60:	99 18       	st.w	r12[0x4],r8
80002f62:	5e f9       	retal	r9

80002f64 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80002f64:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
80002f66:	30 18       	mov	r8,1
80002f68:	f0 0b 18 00 	cp.b	r11,r8
80002f6c:	5f be       	srhi	lr
80002f6e:	f0 0a 18 00 	cp.b	r10,r8
80002f72:	5f b8       	srhi	r8
80002f74:	fd e8 10 08 	or	r8,lr,r8
80002f78:	c0 30       	breq	80002f7e <spi_selectionMode+0x1a>
80002f7a:	30 2c       	mov	r12,2
80002f7c:	d8 02       	popm	pc
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
80002f7e:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
80002f80:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002f84:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
80002f88:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
80002f8c:	99 18       	st.w	r12[0x4],r8
80002f8e:	d8 0a       	popm	pc,r12=0

80002f90 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002f90:	78 18       	ld.w	r8,r12[0x4]
80002f92:	ea 18 00 0f 	orh	r8,0xf
80002f96:	99 18       	st.w	r12[0x4],r8

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80002f98:	78 18       	ld.w	r8,r12[0x4]
80002f9a:	e2 18 00 04 	andl	r8,0x4,COH
80002f9e:	c0 f0       	breq	80002fbc <spi_selectChip+0x2c>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80002fa0:	30 e8       	mov	r8,14
80002fa2:	f0 0b 18 00 	cp.b	r11,r8
80002fa6:	e0 8b 00 19 	brhi	80002fd8 <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80002faa:	78 18       	ld.w	r8,r12[0x4]
80002fac:	b1 6b       	lsl	r11,0x10
80002fae:	ea 1b ff f0 	orh	r11,0xfff0
80002fb2:	e8 1b ff ff 	orl	r11,0xffff
80002fb6:	10 6b       	and	r11,r8
80002fb8:	99 1b       	st.w	r12[0x4],r11
80002fba:	5e fd       	retal	0
  } else {
    if (chip > 3) {
80002fbc:	30 38       	mov	r8,3
80002fbe:	f0 0b 18 00 	cp.b	r11,r8
80002fc2:	e0 8b 00 0b 	brhi	80002fd8 <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002fc6:	78 18       	ld.w	r8,r12[0x4]
80002fc8:	2f 0b       	sub	r11,-16
80002fca:	30 19       	mov	r9,1
80002fcc:	f2 0b 09 4b 	lsl	r11,r9,r11
80002fd0:	5c db       	com	r11
80002fd2:	10 6b       	and	r11,r8
80002fd4:	99 1b       	st.w	r12[0x4],r11
80002fd6:	5e fd       	retal	0
80002fd8:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
80002fda:	5e fc       	retal	r12

80002fdc <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002fdc:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002fe0:	c0 58       	rjmp	80002fea <spi_unselectChip+0xe>
    if (!timeout--) {
80002fe2:	58 08       	cp.w	r8,0
80002fe4:	c0 21       	brne	80002fe8 <spi_unselectChip+0xc>
80002fe6:	5e ff       	retal	1
80002fe8:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002fea:	78 49       	ld.w	r9,r12[0x10]
80002fec:	e2 19 02 00 	andl	r9,0x200,COH
80002ff0:	cf 90       	breq	80002fe2 <spi_unselectChip+0x6>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80002ff2:	78 18       	ld.w	r8,r12[0x4]
80002ff4:	ea 18 00 0f 	orh	r8,0xf
80002ff8:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80002ffa:	fc 18 01 00 	movh	r8,0x100
80002ffe:	99 08       	st.w	r12[0x0],r8
80003000:	5e fd       	retal	0
80003002:	d7 03       	nop

80003004 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
80003004:	eb cd 40 f8 	pushm	r3-r7,lr
80003008:	18 95       	mov	r5,r12
8000300a:	16 97       	mov	r7,r11
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000300c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003010:	30 38       	mov	r8,3
80003012:	f0 06 18 00 	cp.b	r6,r8
80003016:	e0 8b 00 4d 	brhi	800030b0 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
8000301a:	f7 34 00 0b 	ld.ub	r4,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000301e:	30 18       	mov	r8,1
80003020:	f0 04 18 00 	cp.b	r4,r8
80003024:	e0 8b 00 46 	brhi	800030b0 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80003028:	f7 33 00 08 	ld.ub	r3,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8000302c:	30 78       	mov	r8,7
8000302e:	f0 03 18 00 	cp.b	r3,r8
80003032:	e0 88 00 3f 	brls	800030b0 <spi_setupChipReg+0xac>
80003036:	31 08       	mov	r8,16
80003038:	f0 03 18 00 	cp.b	r3,r8
8000303c:	e0 8b 00 3a 	brhi	800030b0 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003040:	14 9b       	mov	r11,r10
80003042:	6e 1c       	ld.w	r12,r7[0x4]
80003044:	f0 1f 00 1d 	mcall	800030b8 <spi_setupChipReg+0xb4>

  if (baudDiv < 0) {
80003048:	c3 45       	brlt	800030b0 <spi_setupChipReg+0xac>
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
8000304a:	30 08       	mov	r8,0
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000304c:	ec 09 16 01 	lsr	r9,r6,0x1
80003050:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003054:	ec 16 00 01 	eorl	r6,0x1
80003058:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000305c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003060:	20 83       	sub	r3,8
80003062:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003066:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000306a:	ef 39 00 09 	ld.ub	r9,r7[9]
8000306e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003072:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003076:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

  switch(options->reg) {
8000307a:	0f 89       	ld.ub	r9,r7[0x0]
8000307c:	30 1a       	mov	r10,1
8000307e:	f4 09 18 00 	cp.b	r9,r10
80003082:	c0 e0       	breq	8000309e <spi_setupChipReg+0x9a>
80003084:	c0 a3       	brcs	80003098 <spi_setupChipReg+0x94>
80003086:	30 2a       	mov	r10,2
80003088:	f4 09 18 00 	cp.b	r9,r10
8000308c:	c0 c0       	breq	800030a4 <spi_setupChipReg+0xa0>
8000308e:	30 3a       	mov	r10,3
80003090:	f4 09 18 00 	cp.b	r9,r10
80003094:	c0 e1       	brne	800030b0 <spi_setupChipReg+0xac>
80003096:	c0 a8       	rjmp	800030aa <spi_setupChipReg+0xa6>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80003098:	8b c8       	st.w	r5[0x30],r8
8000309a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8000309e:	8b d8       	st.w	r5[0x34],r8
800030a0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
800030a4:	8b e8       	st.w	r5[0x38],r8
800030a6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800030aa:	8b f8       	st.w	r5[0x3c],r8
800030ac:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
800030b0:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
800030b2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800030b6:	00 00       	add	r0,r0
800030b8:	80 00       	ld.sh	r0,r0[0x0]
800030ba:	2f 04       	sub	r4,-16

800030bc <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800030bc:	30 18       	mov	r8,1
800030be:	99 08       	st.w	r12[0x0],r8
}
800030c0:	5e fc       	retal	r12

800030c2 <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800030c2:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800030c6:	c0 58       	rjmp	800030d0 <spi_write+0xe>
    if (!timeout--) {
800030c8:	58 08       	cp.w	r8,0
800030ca:	c0 21       	brne	800030ce <spi_write+0xc>
800030cc:	5e ff       	retal	1
800030ce:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800030d0:	78 49       	ld.w	r9,r12[0x10]
800030d2:	e2 19 00 02 	andl	r9,0x2,COH
800030d6:	cf 90       	breq	800030c8 <spi_write+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800030d8:	5c 7b       	castu.h	r11
800030da:	99 3b       	st.w	r12[0xc],r11
800030dc:	5e fd       	retal	0

800030de <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
800030de:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800030e2:	c0 58       	rjmp	800030ec <spi_read+0xe>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
800030e4:	58 08       	cp.w	r8,0
800030e6:	c0 21       	brne	800030ea <spi_read+0xc>
800030e8:	5e ff       	retal	1
800030ea:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800030ec:	78 49       	ld.w	r9,r12[0x10]
800030ee:	e2 19 02 01 	andl	r9,0x201,COH
800030f2:	e0 49 02 01 	cp.w	r9,513
800030f6:	cf 71       	brne	800030e4 <spi_read+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800030f8:	78 28       	ld.w	r8,r12[0x8]
800030fa:	b6 08       	st.h	r11[0x0],r8
800030fc:	5e fd       	retal	0

800030fe <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800030fe:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003100:	f6 08 15 04 	lsl	r8,r11,0x4
80003104:	14 38       	cp.w	r8,r10
80003106:	f9 b8 08 10 	movls	r8,16
8000310a:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8000310e:	f0 0b 02 4b 	mul	r11,r8,r11
80003112:	f6 09 16 01 	lsr	r9,r11,0x1
80003116:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
8000311a:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8000311e:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003122:	f2 cb 00 01 	sub	r11,r9,1
80003126:	e0 4b ff fe 	cp.w	r11,65534
8000312a:	e0 88 00 03 	brls	80003130 <usart_set_async_baudrate+0x32>
8000312e:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003130:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003132:	e8 6e 00 00 	mov	lr,524288
80003136:	59 08       	cp.w	r8,16
80003138:	fc 08 17 10 	movne	r8,lr
8000313c:	f9 b8 00 00 	moveq	r8,0
80003140:	e4 1b ff f7 	andh	r11,0xfff7
80003144:	e0 1b fe cf 	andl	r11,0xfecf
80003148:	16 48       	or	r8,r11
8000314a:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8000314c:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80003150:	f3 ea 11 09 	or	r9,r9,r10<<0x10
80003154:	99 89       	st.w	r12[0x20],r9
80003156:	d8 0a       	popm	pc,r12=0

80003158 <usart_write_char>:
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80003158:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
8000315a:	e2 18 00 02 	andl	r8,0x2,COH
8000315e:	c0 31       	brne	80003164 <usart_write_char+0xc>
80003160:	30 2c       	mov	r12,2
80003162:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80003164:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80003168:	99 7b       	st.w	r12[0x1c],r11
8000316a:	5e fd       	retal	0

8000316c <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8000316c:	eb cd 40 e0 	pushm	r5-r7,lr
80003170:	18 96       	mov	r6,r12
80003172:	16 95       	mov	r5,r11
80003174:	e0 67 27 0f 	mov	r7,9999
80003178:	c0 68       	rjmp	80003184 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
8000317a:	58 07       	cp.w	r7,0
8000317c:	c0 31       	brne	80003182 <usart_putchar+0x16>
8000317e:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
80003182:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80003184:	0a 9b       	mov	r11,r5
80003186:	0c 9c       	mov	r12,r6
80003188:	f0 1f 00 03 	mcall	80003194 <usart_putchar+0x28>
8000318c:	cf 71       	brne	8000317a <usart_putchar+0xe>

  return USART_SUCCESS;
}
8000318e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003192:	00 00       	add	r0,r0
80003194:	80 00       	ld.sh	r0,r0[0x0]
80003196:	31 58       	mov	r8,21

80003198 <usart_read_char>:

int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80003198:	78 58       	ld.w	r8,r12[0x14]
8000319a:	e2 18 00 e0 	andl	r8,0xe0,COH
8000319e:	c0 30       	breq	800031a4 <usart_read_char+0xc>
800031a0:	30 4c       	mov	r12,4
800031a2:	5e fc       	retal	r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
800031a4:	78 58       	ld.w	r8,r12[0x14]
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
800031a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031aa:	c0 31       	brne	800031b0 <usart_read_char+0x18>
800031ac:	30 3c       	mov	r12,3
800031ae:	5e fc       	retal	r12
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
800031b0:	78 68       	ld.w	r8,r12[0x18]
800031b2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800031b6:	97 08       	st.w	r11[0x0],r8
800031b8:	5e fd       	retal	0
800031ba:	d7 03       	nop

800031bc <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800031bc:	eb cd 40 c0 	pushm	r6-r7,lr
800031c0:	18 96       	mov	r6,r12
800031c2:	16 97       	mov	r7,r11
  while (*string != '\0')
800031c4:	17 8b       	ld.ub	r11,r11[0x0]
800031c6:	58 0b       	cp.w	r11,0
800031c8:	c0 80       	breq	800031d8 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
800031ca:	2f f7       	sub	r7,-1
800031cc:	0c 9c       	mov	r12,r6
800031ce:	f0 1f 00 04 	mcall	800031dc <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800031d2:	0f 8b       	ld.ub	r11,r7[0x0]
800031d4:	58 0b       	cp.w	r11,0
800031d6:	cf a1       	brne	800031ca <usart_write_line+0xe>
800031d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	31 6c       	mov	r12,22

800031e0 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800031e0:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800031e4:	e6 18 00 01 	andh	r8,0x1,COH
800031e8:	c0 71       	brne	800031f6 <usart_reset+0x16>
800031ea:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800031ec:	3f f8       	mov	r8,-1
800031ee:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800031f0:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800031f2:	d5 03       	csrf	0x10
800031f4:	c0 48       	rjmp	800031fc <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800031f6:	3f f8       	mov	r8,-1
800031f8:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800031fa:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800031fc:	30 08       	mov	r8,0
800031fe:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
80003200:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
80003202:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003204:	ea 68 61 0c 	mov	r8,680204
80003208:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000320a:	5e fc       	retal	r12

8000320c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000320c:	eb cd 40 e0 	pushm	r5-r7,lr
80003210:	18 96       	mov	r6,r12
80003212:	16 97       	mov	r7,r11
80003214:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003216:	f0 1f 00 2f 	mcall	800032d0 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
8000321a:	58 07       	cp.w	r7,0
8000321c:	c5 80       	breq	800032cc <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
8000321e:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003220:	30 49       	mov	r9,4
80003222:	f2 08 18 00 	cp.b	r8,r9
80003226:	e0 88 00 53 	brls	800032cc <usart_init_rs232+0xc0>
8000322a:	30 99       	mov	r9,9
8000322c:	f2 08 18 00 	cp.b	r8,r9
80003230:	e0 8b 00 4e 	brhi	800032cc <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003234:	0f d9       	ld.ub	r9,r7[0x5]
80003236:	30 78       	mov	r8,7
80003238:	f0 09 18 00 	cp.b	r9,r8
8000323c:	e0 8b 00 48 	brhi	800032cc <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80003240:	8e 39       	ld.sh	r9,r7[0x6]
80003242:	e0 68 01 01 	mov	r8,257
80003246:	f0 09 19 00 	cp.h	r9,r8
8000324a:	e0 8b 00 41 	brhi	800032cc <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
8000324e:	ef 39 00 08 	ld.ub	r9,r7[8]
80003252:	30 38       	mov	r8,3
80003254:	f0 09 18 00 	cp.b	r9,r8
80003258:	e0 8b 00 3a 	brhi	800032cc <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000325c:	0a 9a       	mov	r10,r5
8000325e:	6e 0b       	ld.w	r11,r7[0x0]
80003260:	0c 9c       	mov	r12,r6
80003262:	f0 1f 00 1d 	mcall	800032d4 <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003266:	58 1c       	cp.w	r12,1
80003268:	c3 20       	breq	800032cc <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
8000326a:	0f c8       	ld.ub	r8,r7[0x4]
8000326c:	30 99       	mov	r9,9
8000326e:	f2 08 18 00 	cp.b	r8,r9
80003272:	c0 51       	brne	8000327c <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003274:	6c 18       	ld.w	r8,r6[0x4]
80003276:	b1 b8       	sbr	r8,0x11
80003278:	8d 18       	st.w	r6[0x4],r8
8000327a:	c0 68       	rjmp	80003286 <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000327c:	6c 19       	ld.w	r9,r6[0x4]
8000327e:	20 58       	sub	r8,5
80003280:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80003284:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003286:	6c 19       	ld.w	r9,r6[0x4]
80003288:	ef 3a 00 08 	ld.ub	r10,r7[8]
8000328c:	0f d8       	ld.ub	r8,r7[0x5]
8000328e:	a9 78       	lsl	r8,0x9
80003290:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80003294:	12 48       	or	r8,r9
80003296:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003298:	8e 38       	ld.sh	r8,r7[0x6]
8000329a:	30 29       	mov	r9,2
8000329c:	f2 08 19 00 	cp.h	r8,r9
800032a0:	e0 88 00 09 	brls	800032b2 <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800032a4:	6c 18       	ld.w	r8,r6[0x4]
800032a6:	ad b8       	sbr	r8,0xd
800032a8:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800032aa:	8e b8       	ld.uh	r8,r7[0x6]
800032ac:	20 28       	sub	r8,2
800032ae:	8d a8       	st.w	r6[0x28],r8
800032b0:	c0 68       	rjmp	800032bc <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800032b2:	6c 19       	ld.w	r9,r6[0x4]
800032b4:	5c 78       	castu.h	r8
800032b6:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800032ba:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800032bc:	6c 18       	ld.w	r8,r6[0x4]
800032be:	e0 18 ff f0 	andl	r8,0xfff0
800032c2:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800032c4:	35 08       	mov	r8,80
800032c6:	8d 08       	st.w	r6[0x0],r8
800032c8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800032cc:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800032d0:	80 00       	ld.sh	r0,r0[0x0]
800032d2:	31 e0       	mov	r0,30
800032d4:	80 00       	ld.sh	r0,r0[0x0]
800032d6:	30 fe       	mov	lr,15

800032d8 <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
800032d8:	48 68       	lddpc	r8,800032f0 <fat_check_open+0x18>
800032da:	11 89       	ld.ub	r9,r8[0x0]
800032dc:	30 08       	mov	r8,0
800032de:	f0 09 18 00 	cp.b	r9,r8
800032e2:	c0 20       	breq	800032e6 <fat_check_open+0xe>
800032e4:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
800032e6:	31 79       	mov	r9,23
800032e8:	48 38       	lddpc	r8,800032f4 <fat_check_open+0x1c>
800032ea:	b0 89       	st.b	r8[0x0],r9
800032ec:	5e fd       	retal	0
800032ee:	00 00       	add	r0,r0
800032f0:	00 00       	add	r0,r0
800032f2:	06 18       	sub	r8,r3
800032f4:	00 00       	add	r0,r0
800032f6:	08 a8       	st.w	r4++,r8

800032f8 <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
800032f8:	48 68       	lddpc	r8,80003310 <fat_check_select+0x18>
800032fa:	90 19       	ld.sh	r9,r8[0x2]
800032fc:	3f f8       	mov	r8,-1
800032fe:	f0 09 19 00 	cp.h	r9,r8
80003302:	c0 20       	breq	80003306 <fat_check_select+0xe>
80003304:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003306:	30 f9       	mov	r9,15
80003308:	48 38       	lddpc	r8,80003314 <fat_check_select+0x1c>
8000330a:	b0 89       	st.b	r8[0x0],r9
8000330c:	5e fd       	retal	0
8000330e:	00 00       	add	r0,r0
80003310:	00 00       	add	r0,r0
80003312:	08 a4       	st.w	r4++,r4
80003314:	00 00       	add	r0,r0
80003316:	08 a8       	st.w	r4++,r8

80003318 <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80003318:	48 58       	lddpc	r8,8000332c <fat_check_is_file+0x14>
8000331a:	11 a8       	ld.ub	r8,r8[0x2]
8000331c:	e2 18 00 18 	andl	r8,0x18,COH
80003320:	c0 21       	brne	80003324 <fat_check_is_file+0xc>
80003322:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80003324:	31 39       	mov	r9,19
80003326:	48 38       	lddpc	r8,80003330 <fat_check_is_file+0x18>
80003328:	b0 89       	st.b	r8[0x0],r9
8000332a:	5e fd       	retal	0
8000332c:	00 00       	add	r0,r0
8000332e:	06 18       	sub	r8,r3
80003330:	00 00       	add	r0,r0
80003332:	08 a8       	st.w	r4++,r8

80003334 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80003334:	49 68       	lddpc	r8,8000338c <fat_checkcluster+0x58>
80003336:	70 18       	ld.w	r8,r8[0x4]
80003338:	58 08       	cp.w	r8,0
8000333a:	c0 21       	brne	8000333e <fat_checkcluster+0xa>
8000333c:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
8000333e:	49 59       	lddpc	r9,80003390 <fat_checkcluster+0x5c>
80003340:	13 89       	ld.ub	r9,r9[0x0]
80003342:	30 3a       	mov	r10,3
80003344:	f4 09 18 00 	cp.b	r9,r10
80003348:	c0 a1       	brne	8000335c <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
8000334a:	e0 69 ff f7 	mov	r9,65527
8000334e:	ea 19 0f ff 	orh	r9,0xfff
80003352:	12 38       	cp.w	r8,r9
80003354:	e0 8b 00 19 	brhi	80003386 <fat_checkcluster+0x52>
80003358:	5f 0c       	sreq	r12
8000335a:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
8000335c:	30 2a       	mov	r10,2
8000335e:	f4 09 18 00 	cp.b	r9,r10
80003362:	c0 71       	brne	80003370 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80003364:	e0 48 ff f7 	cp.w	r8,65527
80003368:	e0 8b 00 0f 	brhi	80003386 <fat_checkcluster+0x52>
8000336c:	5f 0c       	sreq	r12
8000336e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80003370:	30 1a       	mov	r10,1
80003372:	f4 09 18 00 	cp.b	r9,r10
80003376:	c0 20       	breq	8000337a <fat_checkcluster+0x46>
80003378:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
8000337a:	e0 48 0f f7 	cp.w	r8,4087
8000337e:	e0 8b 00 04 	brhi	80003386 <fat_checkcluster+0x52>
80003382:	5f 0c       	sreq	r12
80003384:	5e fc       	retal	r12
80003386:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80003388:	5e fc       	retal	r12
8000338a:	00 00       	add	r0,r0
8000338c:	00 00       	add	r0,r0
8000338e:	08 f8       	st.b	--r4,r8
80003390:	00 00       	add	r0,r0
80003392:	08 a4       	st.w	r4++,r4

80003394 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80003394:	30 0a       	mov	r10,0
80003396:	48 88       	lddpc	r8,800033b4 <fat_cache_clusterlist_reset+0x20>
80003398:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000339a:	48 88       	lddpc	r8,800033b8 <fat_cache_clusterlist_reset+0x24>
8000339c:	30 19       	mov	r9,1
8000339e:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800033a0:	3f f9       	mov	r9,-1
800033a2:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800033a4:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
800033a6:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
800033aa:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
800033ae:	f1 69 00 15 	st.b	r8[21],r9
   }
}
800033b2:	5e fc       	retal	r12
800033b4:	00 00       	add	r0,r0
800033b6:	08 aa       	st.w	r4++,r10
800033b8:	00 00       	add	r0,r0
800033ba:	06 2c       	rsub	r12,r3

800033bc <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
800033bc:	48 c9       	lddpc	r9,800033ec <fat_cache_clusterlist_update_start+0x30>
800033be:	13 88       	ld.ub	r8,r9[0x0]
800033c0:	f8 08 18 00 	cp.b	r8,r12
800033c4:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
800033c6:	48 ba       	lddpc	r10,800033f0 <fat_cache_clusterlist_update_start+0x34>
800033c8:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800033ca:	f0 0a 15 02 	lsl	r10,r8,0x2
800033ce:	10 0a       	add	r10,r8
800033d0:	f2 0a 00 28 	add	r8,r9,r10<<0x2
800033d4:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
800033d6:	3f fb       	mov	r11,-1
800033d8:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
800033da:	2f fa       	sub	r10,-1
800033dc:	48 6b       	lddpc	r11,800033f4 <fat_cache_clusterlist_update_start+0x38>
800033de:	76 0b       	ld.w	r11,r11[0x0]
800033e0:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
800033e4:	48 59       	lddpc	r9,800033f8 <fat_cache_clusterlist_update_start+0x3c>
800033e6:	72 19       	ld.w	r9,r9[0x4]
800033e8:	91 29       	st.w	r8[0x8],r9
}
800033ea:	5e fc       	retal	r12
800033ec:	00 00       	add	r0,r0
800033ee:	06 2c       	rsub	r12,r3
800033f0:	00 00       	add	r0,r0
800033f2:	08 aa       	st.w	r4++,r10
800033f4:	00 00       	add	r0,r0
800033f6:	08 f8       	st.b	--r4,r8
800033f8:	00 00       	add	r0,r0
800033fa:	09 00       	ld.w	r0,r4++

800033fc <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
800033fc:	49 88       	lddpc	r8,8000345c <fat_cache_clusterlist_update_select+0x60>
800033fe:	11 88       	ld.ub	r8,r8[0x0]
80003400:	49 8a       	lddpc	r10,80003460 <fat_cache_clusterlist_update_select+0x64>
80003402:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80003406:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
8000340a:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
8000340c:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
8000340e:	15 8a       	ld.ub	r10,r10[0x0]
80003410:	f2 0a 18 00 	cp.b	r10,r9
80003414:	c0 a1       	brne	80003428 <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80003416:	49 3a       	lddpc	r10,80003460 <fat_cache_clusterlist_update_select+0x64>
80003418:	15 9a       	ld.ub	r10,r10[0x1]
8000341a:	f4 0b 18 00 	cp.b	r11,r10
8000341e:	e0 88 00 05 	brls	80003428 <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80003422:	2f fa       	sub	r10,-1
80003424:	48 fc       	lddpc	r12,80003460 <fat_cache_clusterlist_update_select+0x64>
80003426:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80003428:	48 ea       	lddpc	r10,80003460 <fat_cache_clusterlist_update_select+0x64>
8000342a:	f5 3a 00 14 	ld.ub	r10,r10[20]
8000342e:	f2 0a 18 00 	cp.b	r10,r9
80003432:	c0 c1       	brne	8000344a <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80003434:	48 b9       	lddpc	r9,80003460 <fat_cache_clusterlist_update_select+0x64>
80003436:	f3 39 00 15 	ld.ub	r9,r9[21]
8000343a:	f2 0b 18 00 	cp.b	r11,r9
8000343e:	e0 88 00 06 	brls	8000344a <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80003442:	2f f9       	sub	r9,-1
80003444:	48 7a       	lddpc	r10,80003460 <fat_cache_clusterlist_update_select+0x64>
80003446:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
8000344a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000344e:	48 59       	lddpc	r9,80003460 <fat_cache_clusterlist_update_select+0x64>
80003450:	f2 08 00 28 	add	r8,r9,r8<<0x2
80003454:	30 09       	mov	r9,0
80003456:	b0 99       	st.b	r8[0x1],r9
}
80003458:	5e fc       	retal	r12
8000345a:	00 00       	add	r0,r0
8000345c:	00 00       	add	r0,r0
8000345e:	08 aa       	st.w	r4++,r10
80003460:	00 00       	add	r0,r0
80003462:	06 2c       	rsub	r12,r3

80003464 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80003464:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80003468:	49 08       	lddpc	r8,800034a8 <fat_cache_clusterlist_update_finish+0x44>
8000346a:	11 88       	ld.ub	r8,r8[0x0]
8000346c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80003470:	48 f9       	lddpc	r9,800034ac <fat_cache_clusterlist_update_finish+0x48>
80003472:	f2 08 00 28 	add	r8,r9,r8<<0x2
80003476:	f0 ca ff f8 	sub	r10,r8,-8
8000347a:	48 eb       	lddpc	r11,800034b0 <fat_cache_clusterlist_update_finish+0x4c>
8000347c:	17 97       	ld.ub	r7,r11[0x1]
8000347e:	74 09       	ld.w	r9,r10[0x0]
80003480:	f2 07 0d 06 	divu	r6,r9,r7
80003484:	0e 99       	mov	r9,r7
80003486:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80003488:	17 8b       	ld.ub	r11,r11[0x0]
8000348a:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
8000348c:	74 0b       	ld.w	r11,r10[0x0]
8000348e:	12 1b       	sub	r11,r9
80003490:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80003492:	48 9a       	lddpc	r10,800034b4 <fat_cache_clusterlist_update_finish+0x50>
80003494:	74 0b       	ld.w	r11,r10[0x0]
80003496:	12 1b       	sub	r11,r9
80003498:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
8000349a:	74 1a       	ld.w	r10,r10[0x4]
8000349c:	14 09       	add	r9,r10
8000349e:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
800034a0:	f0 1f 00 06 	mcall	800034b8 <fat_cache_clusterlist_update_finish+0x54>
}
800034a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800034a8:	00 00       	add	r0,r0
800034aa:	08 aa       	st.w	r4++,r10
800034ac:	00 00       	add	r0,r0
800034ae:	06 2c       	rsub	r12,r3
800034b0:	00 00       	add	r0,r0
800034b2:	08 58       	eor	r8,r4
800034b4:	00 00       	add	r0,r0
800034b6:	09 00       	ld.w	r0,r4++
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	33 fc       	mov	r12,63

800034bc <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
800034bc:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
800034c0:	4c 18       	lddpc	r8,800035c4 <fat_cache_clusterlist_update_read+0x108>
800034c2:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800034c4:	4c 18       	lddpc	r8,800035c8 <fat_cache_clusterlist_update_read+0x10c>
800034c6:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800034c8:	4c 18       	lddpc	r8,800035cc <fat_cache_clusterlist_update_read+0x110>
800034ca:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800034cc:	4c 18       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
800034ce:	11 88       	ld.ub	r8,r8[0x0]
800034d0:	f8 08 18 00 	cp.b	r8,r12
800034d4:	c1 11       	brne	800034f6 <fat_cache_clusterlist_update_read+0x3a>
800034d6:	4b f8       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
800034d8:	11 a8       	ld.ub	r8,r8[0x2]
800034da:	f2 08 18 00 	cp.b	r8,r9
800034de:	c0 c1       	brne	800034f6 <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800034e0:	4b c8       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
800034e2:	70 18       	ld.w	r8,r8[0x4]
800034e4:	14 38       	cp.w	r8,r10
800034e6:	c0 81       	brne	800034f6 <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800034e8:	4b a8       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
800034ea:	70 28       	ld.w	r8,r8[0x8]
800034ec:	10 3b       	cp.w	r11,r8
800034ee:	c0 43       	brcs	800034f6 <fat_cache_clusterlist_update_read+0x3a>
800034f0:	30 0a       	mov	r10,0
800034f2:	14 99       	mov	r9,r10
800034f4:	c1 88       	rjmp	80003524 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
800034f6:	4b 78       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
800034f8:	f1 38 00 14 	ld.ub	r8,r8[20]
800034fc:	f8 08 18 00 	cp.b	r8,r12
80003500:	c5 e1       	brne	800035bc <fat_cache_clusterlist_update_read+0x100>
80003502:	4b 48       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
80003504:	f1 38 00 16 	ld.ub	r8,r8[22]
80003508:	f2 08 18 00 	cp.b	r8,r9
8000350c:	c5 81       	brne	800035bc <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
8000350e:	4b 18       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
80003510:	70 68       	ld.w	r8,r8[0x18]
80003512:	14 38       	cp.w	r8,r10
80003514:	c5 41       	brne	800035bc <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80003516:	4a f8       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
80003518:	70 78       	ld.w	r8,r8[0x1c]
8000351a:	16 38       	cp.w	r8,r11
8000351c:	e0 8b 00 50 	brhi	800035bc <fat_cache_clusterlist_update_read+0x100>
80003520:	30 1a       	mov	r10,1
80003522:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80003524:	f2 0e 15 02 	lsl	lr,r9,0x2
80003528:	12 0e       	add	lr,r9
8000352a:	4a ac       	lddpc	r12,800035d0 <fat_cache_clusterlist_update_read+0x114>
8000352c:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80003530:	78 4c       	ld.w	r12,r12[0x10]
80003532:	f6 08 01 08 	sub	r8,r11,r8
80003536:	10 3c       	cp.w	r12,r8
80003538:	e0 88 00 16 	brls	80003564 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
8000353c:	4a 4b       	lddpc	r11,800035cc <fat_cache_clusterlist_update_read+0x110>
8000353e:	f2 0e 15 02 	lsl	lr,r9,0x2
80003542:	fc 09 00 09 	add	r9,lr,r9
80003546:	4a 3e       	lddpc	lr,800035d0 <fat_cache_clusterlist_update_read+0x114>
80003548:	fc 09 00 29 	add	r9,lr,r9<<0x2
8000354c:	72 39       	ld.w	r9,r9[0xc]
8000354e:	f0 09 00 09 	add	r9,r8,r9
80003552:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80003554:	10 1c       	sub	r12,r8
80003556:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80003558:	49 f8       	lddpc	r8,800035d4 <fat_cache_clusterlist_update_read+0x118>
8000355a:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
8000355c:	f0 1f 00 1f 	mcall	800035d8 <fat_cache_clusterlist_update_read+0x11c>
80003560:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the resultat in this cache
                  fs_g_u8_current_cache = u8_i;
80003564:	49 c8       	lddpc	r8,800035d4 <fat_cache_clusterlist_update_read+0x118>
80003566:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
80003568:	f2 08 15 02 	lsl	r8,r9,0x2
8000356c:	f0 09 00 09 	add	r9,r8,r9
80003570:	49 88       	lddpc	r8,800035d0 <fat_cache_clusterlist_update_read+0x114>
80003572:	f0 09 00 28 	add	r8,r8,r9<<0x2
80003576:	3f f9       	mov	r9,-1
80003578:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
8000357a:	70 4c       	ld.w	r12,r8[0x10]
8000357c:	49 2a       	lddpc	r10,800035c4 <fat_cache_clusterlist_update_read+0x108>
8000357e:	15 99       	ld.ub	r9,r10[0x1]
80003580:	70 3e       	ld.w	lr,r8[0xc]
80003582:	f8 0e 00 0e 	add	lr,r12,lr
80003586:	20 1e       	sub	lr,1
80003588:	74 57       	ld.w	r7,r10[0x14]
8000358a:	fc 07 01 07 	sub	r7,lr,r7
8000358e:	74 4a       	ld.w	r10,r10[0x10]
80003590:	14 17       	sub	r7,r10
80003592:	ee 09 0d 06 	divu	r6,r7,r9
80003596:	0c 97       	mov	r7,r6
80003598:	2f e7       	sub	r7,-2
8000359a:	48 ca       	lddpc	r10,800035c8 <fat_cache_clusterlist_update_read+0x10c>
8000359c:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
8000359e:	2f 88       	sub	r8,-8
800035a0:	70 0a       	ld.w	r10,r8[0x0]
800035a2:	14 0c       	add	r12,r10
800035a4:	f8 c7 00 01 	sub	r7,r12,1
800035a8:	ee 09 0d 06 	divu	r6,r7,r9
800035ac:	ad 39       	mul	r9,r6
800035ae:	48 8a       	lddpc	r10,800035cc <fat_cache_clusterlist_update_read+0x110>
800035b0:	f6 09 01 09 	sub	r9,r11,r9
800035b4:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
800035b6:	91 0b       	st.w	r8[0x0],r11
800035b8:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the resultat in cache
   fat_cache_clusterlist_update_start(b_for_file);
800035bc:	f0 1f 00 08 	mcall	800035dc <fat_cache_clusterlist_update_read+0x120>
800035c0:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800035c4:	00 00       	add	r0,r0
800035c6:	08 58       	eor	r8,r4
800035c8:	00 00       	add	r0,r0
800035ca:	08 f8       	st.b	--r4,r8
800035cc:	00 00       	add	r0,r0
800035ce:	09 00       	ld.w	r0,r4++
800035d0:	00 00       	add	r0,r0
800035d2:	06 2c       	rsub	r12,r3
800035d4:	00 00       	add	r0,r0
800035d6:	08 aa       	st.w	r4++,r10
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	33 fc       	mov	r12,63
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	33 bc       	mov	r12,59

800035e0 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
800035e0:	30 d9       	mov	r9,13
800035e2:	48 48       	lddpc	r8,800035f0 <fat_entry_is_dir+0x10>
800035e4:	b0 89       	st.b	r8[0x0],r9
800035e6:	48 48       	lddpc	r8,800035f4 <fat_entry_is_dir+0x14>
800035e8:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
800035ea:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
800035ee:	5e fc       	retal	r12
800035f0:	00 00       	add	r0,r0
800035f2:	08 a8       	st.w	r4++,r8
800035f4:	00 00       	add	r0,r0
800035f6:	06 18       	sub	r8,r3

800035f8 <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
800035f8:	3f f9       	mov	r9,-1
800035fa:	48 c8       	lddpc	r8,80003628 <fat_clear_entry_info_and_ptr+0x30>
800035fc:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
800035fe:	48 c8       	lddpc	r8,8000362c <fat_clear_entry_info_and_ptr+0x34>
80003600:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80003604:	f1 39 00 2d 	ld.ub	r9,r8[45]
80003608:	30 08       	mov	r8,0
8000360a:	f0 09 18 00 	cp.b	r9,r8
8000360e:	c0 51       	brne	80003618 <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80003610:	10 99       	mov	r9,r8
80003612:	48 78       	lddpc	r8,8000362c <fat_clear_entry_info_and_ptr+0x34>
80003614:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
80003618:	48 68       	lddpc	r8,80003630 <fat_clear_entry_info_and_ptr+0x38>
8000361a:	30 09       	mov	r9,0
8000361c:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
8000361e:	30 0a       	mov	r10,0
80003620:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80003622:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80003624:	b0 89       	st.b	r8[0x0],r9
}
80003626:	5e fc       	retal	r12
80003628:	00 00       	add	r0,r0
8000362a:	08 a4       	st.w	r4++,r4
8000362c:	00 00       	add	r0,r0
8000362e:	08 58       	eor	r8,r4
80003630:	00 00       	add	r0,r0
80003632:	06 18       	sub	r8,r3

80003634 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80003634:	30 08       	mov	r8,0
80003636:	f0 0c 19 00 	cp.h	r12,r8
8000363a:	5f 0a       	sreq	r10
8000363c:	35 c9       	mov	r9,92
8000363e:	f2 0c 19 00 	cp.h	r12,r9
80003642:	5f 09       	sreq	r9
80003644:	f5 e9 10 09 	or	r9,r10,r9
80003648:	f0 09 18 00 	cp.b	r9,r8
8000364c:	c0 20       	breq	80003650 <fat_check_eof_name+0x1c>
8000364e:	5e ff       	retal	1
80003650:	32 f8       	mov	r8,47
80003652:	f0 0c 19 00 	cp.h	r12,r8
80003656:	5f 0c       	sreq	r12
}
80003658:	5e fc       	retal	r12
8000365a:	d7 03       	nop

8000365c <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
8000365c:	48 48       	lddpc	r8,8000366c <fat_get_ptr_entry+0x10>
8000365e:	90 98       	ld.uh	r8,r8[0x2]
80003660:	a5 78       	lsl	r8,0x5
80003662:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
80003666:	48 3c       	lddpc	r12,80003670 <fat_get_ptr_entry+0x14>
80003668:	10 0c       	add	r12,r8
8000366a:	5e fc       	retal	r12
8000366c:	00 00       	add	r0,r0
8000366e:	08 a4       	st.w	r4++,r4
80003670:	00 00       	add	r0,r0
80003672:	06 58       	eor	r8,r3

80003674 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80003674:	d4 31       	pushm	r0-r7,lr
80003676:	20 3d       	sub	sp,12
80003678:	18 97       	mov	r7,r12
8000367a:	16 94       	mov	r4,r11
8000367c:	14 96       	mov	r6,r10
8000367e:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80003680:	f0 1f 00 5e 	mcall	800037f8 <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80003684:	19 88       	ld.ub	r8,r12[0x0]
80003686:	30 09       	mov	r9,0
80003688:	f2 08 18 00 	cp.b	r8,r9
8000368c:	5f 0b       	sreq	r11
8000368e:	3e 5a       	mov	r10,-27
80003690:	f4 08 18 00 	cp.b	r8,r10
80003694:	5f 0a       	sreq	r10
80003696:	f7 ea 10 0a 	or	r10,r11,r10
8000369a:	f2 0a 18 00 	cp.b	r10,r9
8000369e:	c0 71       	brne	800036ac <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
800036a0:	f9 3a 00 0b 	ld.ub	r10,r12[11]
800036a4:	30 f9       	mov	r9,15
800036a6:	f2 0a 18 00 	cp.b	r10,r9
800036aa:	c0 60       	breq	800036b6 <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
800036ac:	30 b9       	mov	r9,11
800036ae:	4d 48       	lddpc	r8,800037fc <fat_entry_longname+0x188>
800036b0:	b0 89       	st.b	r8[0x0],r9
800036b2:	30 0c       	mov	r12,0
      return false;
800036b4:	c9 c8       	rjmp	800037ec <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
800036b6:	4d 39       	lddpc	r9,80003800 <fat_entry_longname+0x18c>
800036b8:	13 8a       	ld.ub	r10,r9[0x0]
800036ba:	30 09       	mov	r9,0
800036bc:	f2 0a 18 00 	cp.b	r10,r9
800036c0:	c0 90       	breq	800036d2 <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
800036c2:	e2 18 00 40 	andl	r8,0x40,COH
800036c6:	c0 61       	brne	800036d2 <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
800036c8:	31 09       	mov	r9,16
800036ca:	4c d8       	lddpc	r8,800037fc <fat_entry_longname+0x188>
800036cc:	b0 89       	st.b	r8[0x0],r9
800036ce:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
800036d0:	c8 e8       	rjmp	800037ec <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
800036d2:	2f fc       	sub	r12,-1
800036d4:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800036d6:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800036da:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
800036dc:	4c 95       	lddpc	r5,80003800 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800036de:	20 14       	sub	r4,1
800036e0:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
800036e2:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800036e4:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
800036e6:	19 89       	ld.ub	r9,r12[0x0]
800036e8:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
800036ea:	19 99       	ld.ub	r9,r12[0x1]
800036ec:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
800036ee:	58 06       	cp.w	r6,0
800036f0:	c0 f0       	breq	8000370e <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
800036f2:	0b 89       	ld.ub	r9,r5[0x0]
800036f4:	f6 09 18 00 	cp.b	r9,r11
800036f8:	c3 91       	brne	8000376a <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800036fa:	40 1e       	lddsp	lr,sp[0x4]
800036fc:	1c 38       	cp.w	r8,lr
800036fe:	c0 55       	brlt	80003708 <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80003700:	30 08       	mov	r8,0
80003702:	ae 88       	st.b	r7[0x0],r8
80003704:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
80003706:	c7 38       	rjmp	800037ec <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
80003708:	9a 59       	ld.sh	r9,sp[0xa]
8000370a:	ae 89       	st.b	r7[0x0],r9
8000370c:	c2 f8       	rjmp	8000376a <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
8000370e:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80003710:	32 a3       	mov	r3,42
80003712:	e6 09 19 00 	cp.h	r9,r3
80003716:	c6 a0       	breq	800037ea <fat_entry_longname+0x176>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003718:	9a 5e       	ld.sh	lr,sp[0xa]
8000371a:	58 0e       	cp.w	lr,0
8000371c:	c0 e1       	brne	80003738 <fat_entry_longname+0xc4>
8000371e:	35 c0       	mov	r0,92
80003720:	e0 09 19 00 	cp.h	r9,r0
80003724:	5f 12       	srne	r2
80003726:	32 f3       	mov	r3,47
80003728:	e6 09 19 00 	cp.h	r9,r3
8000372c:	5f 13       	srne	r3
8000372e:	e5 e3 00 03 	and	r3,r2,r3
80003732:	f6 03 18 00 	cp.b	r3,r11
80003736:	c1 e0       	breq	80003772 <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80003738:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
8000373c:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003740:	e4 c0 ff e0 	sub	r0,r2,-32
80003744:	00 33       	cp.w	r3,r0
80003746:	c0 41       	brne	8000374e <fat_entry_longname+0xda>
80003748:	40 00       	lddsp	r0,sp[0x0]
8000374a:	58 00       	cp.w	r0,0
8000374c:	c0 f0       	breq	8000376a <fat_entry_longname+0xf6>
8000374e:	22 02       	sub	r2,32
80003750:	04 33       	cp.w	r3,r2
80003752:	c0 41       	brne	8000375a <fat_entry_longname+0xe6>
80003754:	40 03       	lddsp	r3,sp[0x0]
80003756:	58 03       	cp.w	r3,0
80003758:	c0 90       	breq	8000376a <fat_entry_longname+0xf6>
8000375a:	fc 09 19 00 	cp.h	r9,lr
8000375e:	c0 60       	breq	8000376a <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80003760:	31 69       	mov	r9,22
80003762:	4a 78       	lddpc	r8,800037fc <fat_entry_longname+0x188>
80003764:	b0 89       	st.b	r8[0x0],r9
80003766:	30 0c       	mov	r12,0
           return false;
80003768:	c4 28       	rjmp	800037ec <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
8000376a:	9a 59       	ld.sh	r9,sp[0xa]
8000376c:	e2 09 19 00 	cp.h	r9,r1
80003770:	c0 b1       	brne	80003786 <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
80003772:	4a 49       	lddpc	r9,80003800 <fat_entry_longname+0x18c>
80003774:	13 8a       	ld.ub	r10,r9[0x0]
80003776:	30 09       	mov	r9,0
80003778:	f2 0a 18 00 	cp.b	r10,r9
8000377c:	c3 70       	breq	800037ea <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
8000377e:	2f f8       	sub	r8,-1
80003780:	ae 08       	st.h	r7[0x0],r8
80003782:	30 1c       	mov	r12,1
80003784:	c3 48       	rjmp	800037ec <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003786:	e8 08 18 00 	cp.b	r8,r4
8000378a:	c0 31       	brne	80003790 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
8000378c:	2f dc       	sub	r12,-3
8000378e:	c2 58       	rjmp	800037d8 <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
80003790:	30 a9       	mov	r9,10
80003792:	f2 08 18 00 	cp.b	r8,r9
80003796:	c0 31       	brne	8000379c <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
80003798:	2f ec       	sub	r12,-2
8000379a:	c1 f8       	rjmp	800037d8 <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
8000379c:	30 c9       	mov	r9,12
8000379e:	f2 08 18 00 	cp.b	r8,r9
800037a2:	c1 b1       	brne	800037d8 <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
800037a4:	f9 38 ff e2 	ld.ub	r8,r12[-30]
800037a8:	e2 18 00 40 	andl	r8,0x40,COH
800037ac:	c0 61       	brne	800037b8 <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
800037ae:	31 09       	mov	r9,16
800037b0:	49 38       	lddpc	r8,800037fc <fat_entry_longname+0x188>
800037b2:	b0 89       	st.b	r8[0x0],r9
800037b4:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
800037b6:	c1 b8       	rjmp	800037ec <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
800037b8:	58 06       	cp.w	r6,0
800037ba:	c0 b0       	breq	800037d0 <fat_entry_longname+0x15c>
800037bc:	49 18       	lddpc	r8,80003800 <fat_entry_longname+0x18c>
800037be:	11 89       	ld.ub	r9,r8[0x0]
800037c0:	30 08       	mov	r8,0
800037c2:	f0 09 18 00 	cp.b	r9,r8
800037c6:	c1 50       	breq	800037f0 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800037c8:	30 e8       	mov	r8,14
800037ca:	ae 08       	st.h	r7[0x0],r8
800037cc:	30 1c       	mov	r12,1
               return true;
800037ce:	c0 f8       	rjmp	800037ec <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800037d0:	0f 9c       	ld.ub	r12,r7[0x1]
800037d2:	f0 1f 00 0d 	mcall	80003804 <fat_entry_longname+0x190>
800037d6:	c0 b8       	rjmp	800037ec <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800037d8:	0b 89       	ld.ub	r9,r5[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800037da:	f6 09 18 00 	cp.b	r9,r11
800037de:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800037e2:	2f f8       	sub	r8,-1
800037e4:	5c 58       	castu.b	r8
      ptr_entry+=2;
800037e6:	2f ec       	sub	r12,-2
   }
800037e8:	c7 fb       	rjmp	800036e6 <fat_entry_longname+0x72>
800037ea:	30 1c       	mov	r12,1
}
800037ec:	2f dd       	sub	sp,-12
800037ee:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800037f0:	30 08       	mov	r8,0
800037f2:	ae 98       	st.b	r7[0x1],r8
800037f4:	30 1c       	mov	r12,1
               }
               return true;
800037f6:	cf bb       	rjmp	800037ec <fat_entry_longname+0x178>
800037f8:	80 00       	ld.sh	r0,r0[0x0]
800037fa:	36 5c       	mov	r12,101
800037fc:	00 00       	add	r0,r0
800037fe:	08 a8       	st.w	r4++,r8
80003800:	00 00       	add	r0,r0
80003802:	08 a9       	st.w	r4++,r9
80003804:	80 00       	ld.sh	r0,r0[0x0]
80003806:	36 34       	mov	r4,99

80003808 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
80003808:	d4 31       	pushm	r0-r7,lr
8000380a:	20 2d       	sub	sp,8
8000380c:	18 97       	mov	r7,r12
8000380e:	50 1b       	stdsp	sp[0x4],r11
80003810:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80003812:	31 69       	mov	r9,22
80003814:	4b c8       	lddpc	r8,80003904 <fat_entry_shortname+0xfc>
80003816:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
80003818:	f0 1f 00 3c 	mcall	80003908 <fat_entry_shortname+0x100>
8000381c:	30 08       	mov	r8,0
8000381e:	30 1b       	mov	r11,1
80003820:	50 0b       	stdsp	sp[0x0],r11
80003822:	10 9a       	mov	r10,r8

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80003824:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003826:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80003828:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000382a:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
8000382c:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000382e:	fc 08 18 00 	cp.b	r8,lr
80003832:	c1 90       	breq	80003864 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80003834:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80003838:	ea 08 18 00 	cp.b	r8,r5
8000383c:	c0 41       	brne	80003844 <fat_entry_shortname+0x3c>
8000383e:	40 01       	lddsp	r1,sp[0x0]
80003840:	58 01       	cp.w	r1,0
80003842:	c0 81       	brne	80003852 <fat_entry_shortname+0x4a>
80003844:	e8 09 18 00 	cp.b	r9,r4
80003848:	c0 f1       	brne	80003866 <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000384a:	ea 08 18 00 	cp.b	r8,r5
8000384e:	e0 8b 00 0b 	brhi	80003864 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003852:	f9 39 00 08 	ld.ub	r9,r12[8]
80003856:	e8 09 18 00 	cp.b	r9,r4
8000385a:	c0 50       	breq	80003864 <fat_entry_shortname+0x5c>
8000385c:	30 78       	mov	r8,7
8000385e:	32 e9       	mov	r9,46
80003860:	50 03       	stdsp	sp[0x0],r3
80003862:	c0 28       	rjmp	80003866 <fat_entry_shortname+0x5e>
80003864:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
80003866:	58 06       	cp.w	r6,0
80003868:	c1 80       	breq	80003898 <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
8000386a:	4a 9b       	lddpc	r11,8000390c <fat_entry_shortname+0x104>
8000386c:	17 81       	ld.ub	r1,r11[0x0]
8000386e:	30 0b       	mov	r11,0
80003870:	f6 01 18 00 	cp.b	r1,r11
80003874:	c2 c1       	brne	800038cc <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
80003876:	40 1b       	lddsp	r11,sp[0x4]
80003878:	20 1b       	sub	r11,1
8000387a:	16 3a       	cp.w	r10,r11
8000387c:	c0 35       	brlt	80003882 <fat_entry_shortname+0x7a>
8000387e:	06 99       	mov	r9,r3
80003880:	c0 a8       	rjmp	80003894 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80003882:	f2 c1 00 41 	sub	r1,r9,65
80003886:	31 9b       	mov	r11,25
80003888:	f6 01 18 00 	cp.b	r1,r11
8000388c:	e0 8b 00 04 	brhi	80003894 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
80003890:	2e 09       	sub	r9,-32
80003892:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80003894:	ae 89       	st.b	r7[0x0],r9
80003896:	c1 b8       	rjmp	800038cc <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
80003898:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
8000389a:	e4 0b 18 00 	cp.b	r11,r2
8000389e:	c2 f0       	breq	800038fc <fat_entry_shortname+0xf4>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
800038a0:	58 09       	cp.w	r9,0
800038a2:	c0 c1       	brne	800038ba <fat_entry_shortname+0xb2>
800038a4:	35 c1       	mov	r1,92
800038a6:	e2 0b 18 00 	cp.b	r11,r1
800038aa:	5f 10       	srne	r0
800038ac:	32 f1       	mov	r1,47
800038ae:	e2 0b 18 00 	cp.b	r11,r1
800038b2:	5f 11       	srne	r1
800038b4:	e1 e1 00 01 	and	r1,r0,r1
800038b8:	c0 c0       	breq	800038d0 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
800038ba:	f2 0b 18 00 	cp.b	r11,r9
800038be:	c0 70       	breq	800038cc <fat_entry_shortname+0xc4>
800038c0:	f2 c1 ff e0 	sub	r1,r9,-32
800038c4:	02 3b       	cp.w	r11,r1
800038c6:	c0 30       	breq	800038cc <fat_entry_shortname+0xc4>
800038c8:	30 0c       	mov	r12,0
800038ca:	c1 a8       	rjmp	800038fe <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800038cc:	58 09       	cp.w	r9,0
800038ce:	c0 b1       	brne	800038e4 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800038d0:	48 f8       	lddpc	r8,8000390c <fat_entry_shortname+0x104>
800038d2:	11 89       	ld.ub	r9,r8[0x0]
800038d4:	30 08       	mov	r8,0
800038d6:	f0 09 18 00 	cp.b	r9,r8
800038da:	c1 10       	breq	800038fc <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800038dc:	2f fa       	sub	r10,-1
800038de:	ae 0a       	st.h	r7[0x0],r10
800038e0:	30 1c       	mov	r12,1
800038e2:	c0 e8       	rjmp	800038fe <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800038e4:	48 a9       	lddpc	r9,8000390c <fat_entry_shortname+0x104>
800038e6:	13 8b       	ld.ub	r11,r9[0x0]
800038e8:	30 09       	mov	r9,0
      {
         sz_name += (Is_unicode? 2 : 1 );
800038ea:	f2 0b 18 00 	cp.b	r11,r9
800038ee:	f7 b7 00 ff 	subeq	r7,-1
      }
      u8_pos_name++;
800038f2:	2f fa       	sub	r10,-1
800038f4:	5c 5a       	castu.b	r10
      u8_pos_entry++;
800038f6:	2f f8       	sub	r8,-1
800038f8:	5c 58       	castu.b	r8
   }
800038fa:	c9 ab       	rjmp	8000382e <fat_entry_shortname+0x26>
800038fc:	30 1c       	mov	r12,1
}
800038fe:	2f ed       	sub	sp,-8
80003900:	d8 32       	popm	r0-r7,pc
80003902:	00 00       	add	r0,r0
80003904:	00 00       	add	r0,r0
80003906:	08 a8       	st.w	r4++,r8
80003908:	80 00       	ld.sh	r0,r0[0x0]
8000390a:	36 5c       	mov	r12,101
8000390c:	00 00       	add	r0,r0
8000390e:	08 a9       	st.w	r4++,r9

80003910 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
80003910:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80003912:	f0 1f 00 10 	mcall	80003950 <fat_get_entry_info+0x40>

   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
80003916:	49 08       	lddpc	r8,80003954 <fat_get_entry_info+0x44>
80003918:	f9 39 00 0b 	ld.ub	r9,r12[11]
8000391c:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
8000391e:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003922:	f0 c9 ff fc 	sub	r9,r8,-4
80003926:	15 8b       	ld.ub	r11,r10[0x0]
80003928:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000392a:	15 9a       	ld.ub	r10,r10[0x1]
8000392c:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
8000392e:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003932:	15 8b       	ld.ub	r11,r10[0x0]
80003934:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003936:	15 9a       	ld.ub	r10,r10[0x1]
80003938:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
8000393a:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
8000393c:	2f 88       	sub	r8,-8
8000393e:	19 89       	ld.ub	r9,r12[0x0]
80003940:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80003942:	19 99       	ld.ub	r9,r12[0x1]
80003944:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
80003946:	19 a9       	ld.ub	r9,r12[0x2]
80003948:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000394a:	19 b9       	ld.ub	r9,r12[0x3]
8000394c:	b0 89       	st.b	r8[0x0],r9
}
8000394e:	d8 02       	popm	pc
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	36 5c       	mov	r12,101
80003954:	00 00       	add	r0,r0
80003956:	06 18       	sub	r8,r3

80003958 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
80003958:	eb cd 40 80 	pushm	r7,lr
8000395c:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
8000395e:	f0 1f 00 14 	mcall	800039ac <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80003962:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80003964:	58 08       	cp.w	r8,0
80003966:	c0 61       	brne	80003972 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80003968:	30 a9       	mov	r9,10
8000396a:	49 28       	lddpc	r8,800039b0 <fat_entry_check+0x58>
8000396c:	b0 89       	st.b	r8[0x0],r9
8000396e:	30 07       	mov	r7,0
      return false;
80003970:	c1 a8       	rjmp	800039a4 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80003972:	30 ba       	mov	r10,11
80003974:	48 f9       	lddpc	r9,800039b0 <fat_entry_check+0x58>
80003976:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80003978:	3e 59       	mov	r9,-27
8000397a:	f2 08 18 00 	cp.b	r8,r9
8000397e:	c1 20       	breq	800039a2 <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80003980:	32 e9       	mov	r9,46
80003982:	f2 08 18 00 	cp.b	r8,r9
80003986:	c0 e0       	breq	800039a2 <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check attribut
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
80003988:	f9 38 00 0b 	ld.ub	r8,r12[11]
8000398c:	10 99       	mov	r9,r8
8000398e:	e2 19 00 08 	andl	r9,0x8,COH
80003992:	c0 81       	brne	800039a2 <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80003994:	e2 18 00 10 	andl	r8,0x10,COH
80003998:	c0 60       	breq	800039a4 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
8000399a:	ec 17 00 01 	eorl	r7,0x1
8000399e:	5c 57       	castu.b	r7
800039a0:	c0 28       	rjmp	800039a4 <fat_entry_check+0x4c>
800039a2:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
800039a4:	0e 9c       	mov	r12,r7
800039a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800039aa:	00 00       	add	r0,r0
800039ac:	80 00       	ld.sh	r0,r0[0x0]
800039ae:	36 5c       	mov	r12,101
800039b0:	00 00       	add	r0,r0
800039b2:	08 a8       	st.w	r4++,r8

800039b4 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
800039b4:	48 58       	lddpc	r8,800039c8 <fat_cache_reset+0x14>
800039b6:	3f f9       	mov	r9,-1
800039b8:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
800039ba:	30 09       	mov	r9,0
800039bc:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800039c0:	3f f9       	mov	r9,-1
800039c2:	91 39       	st.w	r8[0xc],r9
}
800039c4:	5e fc       	retal	r12
800039c6:	00 00       	add	r0,r0
800039c8:	00 00       	add	r0,r0
800039ca:	08 e0       	st.h	--r4,r0

800039cc <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800039cc:	30 19       	mov	r9,1
800039ce:	48 38       	lddpc	r8,800039d8 <fat_cache_mark_sector_as_dirty+0xc>
800039d0:	f1 69 00 08 	st.b	r8[8],r9
}
800039d4:	5e fc       	retal	r12
800039d6:	00 00       	add	r0,r0
800039d8:	00 00       	add	r0,r0
800039da:	08 e0       	st.h	--r4,r0

800039dc <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
800039dc:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
800039de:	f0 1f 00 11 	mcall	80003a20 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
800039e2:	f0 1f 00 11 	mcall	80003a24 <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the attribut
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
800039e6:	49 18       	lddpc	r8,80003a28 <fat_write_entry_file+0x4c>
800039e8:	11 a9       	ld.ub	r9,r8[0x2]
800039ea:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
800039ee:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
800039f2:	f0 c9 ff fc 	sub	r9,r8,-4
800039f6:	13 9b       	ld.ub	r11,r9[0x1]
800039f8:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
800039fa:	13 8b       	ld.ub	r11,r9[0x0]
800039fc:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
800039fe:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80003a02:	13 bb       	ld.ub	r11,r9[0x3]
80003a04:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
80003a06:	13 a9       	ld.ub	r9,r9[0x2]
80003a08:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
80003a0a:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
80003a0c:	2f 88       	sub	r8,-8
80003a0e:	11 b9       	ld.ub	r9,r8[0x3]
80003a10:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
80003a12:	11 a9       	ld.ub	r9,r8[0x2]
80003a14:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
80003a16:	11 99       	ld.ub	r9,r8[0x1]
80003a18:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
80003a1a:	11 88       	ld.ub	r8,r8[0x0]
80003a1c:	b8 b8       	st.b	r12[0x3],r8
}
80003a1e:	d8 02       	popm	pc
80003a20:	80 00       	ld.sh	r0,r0[0x0]
80003a22:	39 cc       	mov	r12,-100
80003a24:	80 00       	ld.sh	r0,r0[0x0]
80003a26:	36 5c       	mov	r12,101
80003a28:	00 00       	add	r0,r0
80003a2a:	06 18       	sub	r8,r3

80003a2c <fat_check_nav_access_disk>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80003a2c:	48 c8       	lddpc	r8,80003a5c <fat_check_nav_access_disk+0x30>
80003a2e:	11 89       	ld.ub	r9,r8[0x0]
80003a30:	30 08       	mov	r8,0
80003a32:	f0 09 18 00 	cp.b	r9,r8
80003a36:	c1 20       	breq	80003a5a <fat_check_nav_access_disk+0x2e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a38:	48 a8       	lddpc	r8,80003a60 <fat_check_nav_access_disk+0x34>
80003a3a:	11 89       	ld.ub	r9,r8[0x0]
80003a3c:	48 a8       	lddpc	r8,80003a64 <fat_check_nav_access_disk+0x38>
80003a3e:	11 88       	ld.ub	r8,r8[0x0]
80003a40:	f0 09 18 00 	cp.b	r9,r8
80003a44:	c0 b1       	brne	80003a5a <fat_check_nav_access_disk+0x2e>
      // Is it access file ?
      if( fs_g_navext_entry[i].u8_open_mode!=0 )
80003a46:	48 98       	lddpc	r8,80003a68 <fat_check_nav_access_disk+0x3c>
80003a48:	11 89       	ld.ub	r9,r8[0x0]
80003a4a:	30 08       	mov	r8,0
80003a4c:	f0 09 18 00 	cp.b	r9,r8
80003a50:	c0 50       	breq	80003a5a <fat_check_nav_access_disk+0x2e>
      {
         fs_g_status = FS_ERR_FILE_OPEN;
80003a52:	32 89       	mov	r9,40
80003a54:	48 68       	lddpc	r8,80003a6c <fat_check_nav_access_disk+0x40>
80003a56:	b0 89       	st.b	r8[0x0],r9
80003a58:	5e fd       	retal	0
         return false;  // File opened then write access not possibled
80003a5a:	5e ff       	retal	1
80003a5c:	00 00       	add	r0,r0
80003a5e:	08 a0       	st.w	r4++,r0
80003a60:	00 00       	add	r0,r0
80003a62:	08 58       	eor	r8,r4
80003a64:	00 00       	add	r0,r0
80003a66:	08 ac       	st.w	r4++,r12
80003a68:	00 00       	add	r0,r0
80003a6a:	08 90       	mov	r0,r4
80003a6c:	00 00       	add	r0,r0
80003a6e:	08 a8       	st.w	r4++,r8

80003a70 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80003a70:	49 88       	lddpc	r8,80003ad0 <fat_check_nav_access_file+0x60>
80003a72:	11 89       	ld.ub	r9,r8[0x0]
80003a74:	30 08       	mov	r8,0
80003a76:	f0 09 18 00 	cp.b	r9,r8
80003a7a:	c2 a0       	breq	80003ace <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a7c:	49 68       	lddpc	r8,80003ad4 <fat_check_nav_access_file+0x64>
80003a7e:	11 89       	ld.ub	r9,r8[0x0]
80003a80:	49 68       	lddpc	r8,80003ad8 <fat_check_nav_access_file+0x68>
80003a82:	11 88       	ld.ub	r8,r8[0x0]
80003a84:	f0 09 18 00 	cp.b	r9,r8
80003a88:	c2 31       	brne	80003ace <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
80003a8a:	49 38       	lddpc	r8,80003ad4 <fat_check_nav_access_file+0x64>
80003a8c:	70 89       	ld.w	r9,r8[0x20]
80003a8e:	49 38       	lddpc	r8,80003ad8 <fat_check_nav_access_file+0x68>
80003a90:	70 88       	ld.w	r8,r8[0x20]
80003a92:	10 39       	cp.w	r9,r8
80003a94:	c1 d1       	brne	80003ace <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80003a96:	49 28       	lddpc	r8,80003adc <fat_check_nav_access_file+0x6c>
80003a98:	90 19       	ld.sh	r9,r8[0x2]
80003a9a:	48 e8       	lddpc	r8,80003ad0 <fat_check_nav_access_file+0x60>
80003a9c:	90 18       	ld.sh	r8,r8[0x2]
80003a9e:	f0 09 19 00 	cp.h	r9,r8
80003aa2:	c1 61       	brne	80003ace <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80003aa4:	58 0c       	cp.w	r12,0
80003aa6:	c0 b0       	breq	80003abc <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80003aa8:	48 e8       	lddpc	r8,80003ae0 <fat_check_nav_access_file+0x70>
80003aaa:	11 89       	ld.ub	r9,r8[0x0]
80003aac:	30 08       	mov	r8,0
80003aae:	f0 09 18 00 	cp.b	r9,r8
80003ab2:	c0 e0       	breq	80003ace <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80003ab4:	32 89       	mov	r9,40
80003ab6:	48 c8       	lddpc	r8,80003ae4 <fat_check_nav_access_file+0x74>
80003ab8:	b0 89       	st.b	r8[0x0],r9
80003aba:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
80003abc:	48 98       	lddpc	r8,80003ae0 <fat_check_nav_access_file+0x70>
80003abe:	11 88       	ld.ub	r8,r8[0x0]
80003ac0:	e2 18 00 02 	andl	r8,0x2,COH
80003ac4:	c0 50       	breq	80003ace <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
80003ac6:	32 99       	mov	r9,41
80003ac8:	48 78       	lddpc	r8,80003ae4 <fat_check_nav_access_file+0x74>
80003aca:	b0 89       	st.b	r8[0x0],r9
80003acc:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possibled
80003ace:	5e ff       	retal	1
80003ad0:	00 00       	add	r0,r0
80003ad2:	08 a0       	st.w	r4++,r0
80003ad4:	00 00       	add	r0,r0
80003ad6:	08 58       	eor	r8,r4
80003ad8:	00 00       	add	r0,r0
80003ada:	08 ac       	st.w	r4++,r12
80003adc:	00 00       	add	r0,r0
80003ade:	08 a4       	st.w	r4++,r4
80003ae0:	00 00       	add	r0,r0
80003ae2:	08 90       	mov	r0,r4
80003ae4:	00 00       	add	r0,r0
80003ae6:	08 a8       	st.w	r4++,r8

80003ae8 <fat_copy_nav>:
//! This function copys the main navigator to another navigator
//!
//! @param     u8_idnav    Id navigator to fill
//!
void  fat_copy_nav( uint8_t u8_idnav )
{
80003ae8:	eb cd 40 c0 	pushm	r6-r7,lr
   if( 0 != u8_idnav)
80003aec:	58 0c       	cp.w	r12,0
80003aee:	c1 e0       	breq	80003b2a <fat_copy_nav+0x42>
   {
      u8_idnav--;
80003af0:	f8 c7 00 01 	sub	r7,r12,1
80003af4:	5c 57       	castu.b	r7
      memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       (uint8_t*)&fs_g_nav       , sizeof(Fs_management) );
80003af6:	ee 08 10 34 	mul	r8,r7,52
80003afa:	33 4a       	mov	r10,52
80003afc:	48 db       	lddpc	r11,80003b30 <fat_copy_nav+0x48>
80003afe:	48 ec       	lddpc	r12,80003b34 <fat_copy_nav+0x4c>
80003b00:	10 0c       	add	r12,r8
80003b02:	f0 1f 00 0e 	mcall	80003b38 <fat_copy_nav+0x50>
      memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], (uint8_t*)&fs_g_nav_entry , sizeof(Fs_management_entry) );
80003b06:	ee 06 15 04 	lsl	r6,r7,0x4
80003b0a:	48 d8       	lddpc	r8,80003b3c <fat_copy_nav+0x54>
80003b0c:	10 06       	add	r6,r8
80003b0e:	31 0a       	mov	r10,16
80003b10:	48 cb       	lddpc	r11,80003b40 <fat_copy_nav+0x58>
80003b12:	0c 9c       	mov	r12,r6
80003b14:	f0 1f 00 09 	mcall	80003b38 <fat_copy_nav+0x50>
      memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  (uint8_t*)&fs_g_nav_fast  , sizeof(Fs_management_fast) );
80003b18:	30 4a       	mov	r10,4
80003b1a:	48 bb       	lddpc	r11,80003b44 <fat_copy_nav+0x5c>
80003b1c:	48 bc       	lddpc	r12,80003b48 <fat_copy_nav+0x60>
80003b1e:	f8 07 00 2c 	add	r12,r12,r7<<0x2
80003b22:	f0 1f 00 06 	mcall	80003b38 <fat_copy_nav+0x50>
      fs_g_navext_entry[u8_idnav].u8_open_mode=0;   // Clear open file flag
80003b26:	30 08       	mov	r8,0
80003b28:	ac 88       	st.b	r6[0x0],r8
80003b2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003b2e:	00 00       	add	r0,r0
80003b30:	00 00       	add	r0,r0
80003b32:	08 58       	eor	r8,r4
80003b34:	00 00       	add	r0,r0
80003b36:	08 ac       	st.w	r4++,r12
80003b38:	80 00       	ld.sh	r0,r0[0x0]
80003b3a:	84 d2       	ld.uh	r2,r2[0xa]
80003b3c:	00 00       	add	r0,r0
80003b3e:	08 90       	mov	r0,r4
80003b40:	00 00       	add	r0,r0
80003b42:	06 18       	sub	r8,r3
80003b44:	00 00       	add	r0,r0
80003b46:	08 a4       	st.w	r4++,r4
80003b48:	00 00       	add	r0,r0
80003b4a:	08 a0       	st.w	r4++,r0

80003b4c <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
80003b4c:	d4 21       	pushm	r4-r7,lr
80003b4e:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80003b50:	58 0c       	cp.w	r12,0
80003b52:	c5 a0       	breq	80003c06 <fat_invert_nav+0xba>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003b54:	1a 97       	mov	r7,sp
80003b56:	4a e8       	lddpc	r8,80003c0c <fat_invert_nav+0xc0>
80003b58:	f0 ea 00 00 	ld.d	r10,r8[0]
80003b5c:	fa eb 00 00 	st.d	sp[0],r10
80003b60:	f0 ea 00 08 	ld.d	r10,r8[8]
80003b64:	fa eb 00 08 	st.d	sp[8],r10
80003b68:	f0 ea 00 10 	ld.d	r10,r8[16]
80003b6c:	fa eb 00 10 	st.d	sp[16],r10
80003b70:	f0 ea 00 18 	ld.d	r10,r8[24]
80003b74:	fa eb 00 18 	st.d	sp[24],r10
80003b78:	f0 ea 00 20 	ld.d	r10,r8[32]
80003b7c:	fa eb 00 20 	st.d	sp[32],r10
80003b80:	f0 ea 00 28 	ld.d	r10,r8[40]
80003b84:	fa eb 00 28 	st.d	sp[40],r10
80003b88:	70 c9       	ld.w	r9,r8[0x30]
80003b8a:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003b8c:	f8 c6 00 01 	sub	r6,r12,1
80003b90:	5c 56       	castu.b	r6
80003b92:	ec 04 10 34 	mul	r4,r6,52
80003b96:	49 f9       	lddpc	r9,80003c10 <fat_invert_nav+0xc4>
80003b98:	12 04       	add	r4,r9
80003b9a:	33 45       	mov	r5,52
80003b9c:	0a 9a       	mov	r10,r5
80003b9e:	08 9b       	mov	r11,r4
80003ba0:	10 9c       	mov	r12,r8
80003ba2:	f0 1f 00 1d 	mcall	80003c14 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80003ba6:	0a 9a       	mov	r10,r5
80003ba8:	1a 9b       	mov	r11,sp
80003baa:	08 9c       	mov	r12,r4
80003bac:	f0 1f 00 1a 	mcall	80003c14 <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
80003bb0:	49 ac       	lddpc	r12,80003c18 <fat_invert_nav+0xcc>
80003bb2:	f8 e8 00 00 	ld.d	r8,r12[0]
80003bb6:	fa e9 00 00 	st.d	sp[0],r8
80003bba:	f8 e8 00 08 	ld.d	r8,r12[8]
80003bbe:	fa e9 00 08 	st.d	sp[8],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
80003bc2:	ec 04 15 04 	lsl	r4,r6,0x4
80003bc6:	49 68       	lddpc	r8,80003c1c <fat_invert_nav+0xd0>
80003bc8:	10 04       	add	r4,r8
80003bca:	31 05       	mov	r5,16
80003bcc:	0a 9a       	mov	r10,r5
80003bce:	08 9b       	mov	r11,r4
80003bd0:	f0 1f 00 11 	mcall	80003c14 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80003bd4:	0a 9a       	mov	r10,r5
80003bd6:	1a 9b       	mov	r11,sp
80003bd8:	08 9c       	mov	r12,r4
80003bda:	f0 1f 00 0f 	mcall	80003c14 <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
80003bde:	49 14       	lddpc	r4,80003c20 <fat_invert_nav+0xd4>
80003be0:	30 45       	mov	r5,4
80003be2:	0a 9a       	mov	r10,r5
80003be4:	08 9b       	mov	r11,r4
80003be6:	1a 9c       	mov	r12,sp
80003be8:	f0 1f 00 0b 	mcall	80003c14 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80003bec:	48 e8       	lddpc	r8,80003c24 <fat_invert_nav+0xd8>
80003bee:	f0 06 00 26 	add	r6,r8,r6<<0x2
80003bf2:	0a 9a       	mov	r10,r5
80003bf4:	0c 9b       	mov	r11,r6
80003bf6:	08 9c       	mov	r12,r4
80003bf8:	f0 1f 00 07 	mcall	80003c14 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80003bfc:	0a 9a       	mov	r10,r5
80003bfe:	1a 9b       	mov	r11,sp
80003c00:	0c 9c       	mov	r12,r6
80003c02:	f0 1f 00 05 	mcall	80003c14 <fat_invert_nav+0xc8>
}
80003c06:	2f 3d       	sub	sp,-52
80003c08:	d8 22       	popm	r4-r7,pc
80003c0a:	00 00       	add	r0,r0
80003c0c:	00 00       	add	r0,r0
80003c0e:	08 58       	eor	r8,r4
80003c10:	00 00       	add	r0,r0
80003c12:	08 ac       	st.w	r4++,r12
80003c14:	80 00       	ld.sh	r0,r0[0x0]
80003c16:	84 d2       	ld.uh	r2,r2[0xa]
80003c18:	00 00       	add	r0,r0
80003c1a:	06 18       	sub	r8,r3
80003c1c:	00 00       	add	r0,r0
80003c1e:	08 90       	mov	r0,r4
80003c20:	00 00       	add	r0,r0
80003c22:	08 a4       	st.w	r4++,r4
80003c24:	00 00       	add	r0,r0
80003c26:	08 a0       	st.w	r4++,r0

80003c28 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
80003c28:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80003c2a:	49 08       	lddpc	r8,80003c68 <fat_cache_flush+0x40>
80003c2c:	f1 39 00 08 	ld.ub	r9,r8[8]
80003c30:	30 18       	mov	r8,1
80003c32:	f0 09 18 00 	cp.b	r9,r8
80003c36:	c1 81       	brne	80003c66 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003c38:	48 c8       	lddpc	r8,80003c68 <fat_cache_flush+0x40>
80003c3a:	30 09       	mov	r9,0
80003c3c:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003c40:	11 8c       	ld.ub	r12,r8[0x0]
80003c42:	f0 1f 00 0b 	mcall	80003c6c <fat_cache_flush+0x44>
80003c46:	c0 50       	breq	80003c50 <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
80003c48:	31 49       	mov	r9,20
80003c4a:	48 a8       	lddpc	r8,80003c70 <fat_cache_flush+0x48>
80003c4c:	b0 89       	st.b	r8[0x0],r9
80003c4e:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80003c50:	48 68       	lddpc	r8,80003c68 <fat_cache_flush+0x40>
80003c52:	48 9a       	lddpc	r10,80003c74 <fat_cache_flush+0x4c>
80003c54:	70 1b       	ld.w	r11,r8[0x4]
80003c56:	11 8c       	ld.ub	r12,r8[0x0]
80003c58:	f0 1f 00 08 	mcall	80003c78 <fat_cache_flush+0x50>
80003c5c:	c0 50       	breq	80003c66 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
80003c5e:	30 19       	mov	r9,1
80003c60:	48 48       	lddpc	r8,80003c70 <fat_cache_flush+0x48>
80003c62:	b0 89       	st.b	r8[0x0],r9
80003c64:	d8 0a       	popm	pc,r12=0
         return false;
80003c66:	da 0a       	popm	pc,r12=1
80003c68:	00 00       	add	r0,r0
80003c6a:	08 e0       	st.h	--r4,r0
80003c6c:	80 00       	ld.sh	r0,r0[0x0]
80003c6e:	74 90       	ld.w	r0,r10[0x24]
80003c70:	00 00       	add	r0,r0
80003c72:	08 a8       	st.w	r4++,r8
80003c74:	00 00       	add	r0,r0
80003c76:	06 58       	eor	r8,r3
80003c78:	80 00       	ld.sh	r0,r0[0x0]
80003c7a:	74 e0       	ld.w	r0,r10[0x38]

80003c7c <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
80003c7c:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
80003c7e:	e0 6a 02 00 	mov	r10,512
80003c82:	30 0b       	mov	r11,0
80003c84:	48 2c       	lddpc	r12,80003c8c <fat_cache_clear+0x10>
80003c86:	f0 1f 00 03 	mcall	80003c90 <fat_cache_clear+0x14>
}
80003c8a:	d8 02       	popm	pc
80003c8c:	00 00       	add	r0,r0
80003c8e:	06 58       	eor	r8,r3
80003c90:	80 00       	ld.sh	r0,r0[0x0]
80003c92:	86 1a       	ld.sh	r10,r3[0x2]

80003c94 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80003c94:	eb cd 40 80 	pushm	r7,lr
80003c98:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
80003c9a:	49 78       	lddpc	r8,80003cf4 <fat_cache_read_sector+0x60>
80003c9c:	11 89       	ld.ub	r9,r8[0x0]
80003c9e:	49 78       	lddpc	r8,80003cf8 <fat_cache_read_sector+0x64>
80003ca0:	11 88       	ld.ub	r8,r8[0x0]
80003ca2:	f0 09 18 00 	cp.b	r9,r8
80003ca6:	c0 91       	brne	80003cb8 <fat_cache_read_sector+0x24>
80003ca8:	49 38       	lddpc	r8,80003cf4 <fat_cache_read_sector+0x60>
80003caa:	70 19       	ld.w	r9,r8[0x4]
80003cac:	49 48       	lddpc	r8,80003cfc <fat_cache_read_sector+0x68>
80003cae:	70 08       	ld.w	r8,r8[0x0]
80003cb0:	10 39       	cp.w	r9,r8
80003cb2:	c0 31       	brne	80003cb8 <fat_cache_read_sector+0x24>
80003cb4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
80003cb8:	f0 1f 00 12 	mcall	80003d00 <fat_cache_read_sector+0x6c>
80003cbc:	c1 90       	breq	80003cee <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
80003cbe:	f0 1f 00 12 	mcall	80003d04 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003cc2:	48 f8       	lddpc	r8,80003cfc <fat_cache_read_sector+0x68>
80003cc4:	70 0b       	ld.w	r11,r8[0x0]
80003cc6:	48 c8       	lddpc	r8,80003cf4 <fat_cache_read_sector+0x60>
80003cc8:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80003cca:	58 07       	cp.w	r7,0
80003ccc:	c0 c0       	breq	80003ce4 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003cce:	48 fa       	lddpc	r10,80003d08 <fat_cache_read_sector+0x74>
80003cd0:	48 a8       	lddpc	r8,80003cf8 <fat_cache_read_sector+0x64>
80003cd2:	11 8c       	ld.ub	r12,r8[0x0]
80003cd4:	f0 1f 00 0e 	mcall	80003d0c <fat_cache_read_sector+0x78>
80003cd8:	c0 60       	breq	80003ce4 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80003cda:	30 19       	mov	r9,1
80003cdc:	48 d8       	lddpc	r8,80003d10 <fat_cache_read_sector+0x7c>
80003cde:	b0 89       	st.b	r8[0x0],r9
80003ce0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003ce4:	48 58       	lddpc	r8,80003cf8 <fat_cache_read_sector+0x64>
80003ce6:	11 89       	ld.ub	r9,r8[0x0]
80003ce8:	48 38       	lddpc	r8,80003cf4 <fat_cache_read_sector+0x60>
80003cea:	b0 89       	st.b	r8[0x0],r9
80003cec:	30 1c       	mov	r12,1
   return true;
}
80003cee:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cf2:	00 00       	add	r0,r0
80003cf4:	00 00       	add	r0,r0
80003cf6:	08 e0       	st.h	--r4,r0
80003cf8:	00 00       	add	r0,r0
80003cfa:	08 58       	eor	r8,r4
80003cfc:	00 00       	add	r0,r0
80003cfe:	06 14       	sub	r4,r3
80003d00:	80 00       	ld.sh	r0,r0[0x0]
80003d02:	3c 28       	mov	r8,-62
80003d04:	80 00       	ld.sh	r0,r0[0x0]
80003d06:	39 b4       	mov	r4,-101
80003d08:	00 00       	add	r0,r0
80003d0a:	06 58       	eor	r8,r3
80003d0c:	80 00       	ld.sh	r0,r0[0x0]
80003d0e:	75 30       	ld.w	r0,r10[0x4c]
80003d10:	00 00       	add	r0,r0
80003d12:	08 a8       	st.w	r4++,r8

80003d14 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        readed cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster readed
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80003d14:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003d16:	49 f8       	lddpc	r8,80003d90 <fat_cluster_readnext+0x7c>
80003d18:	11 89       	ld.ub	r9,r8[0x0]
80003d1a:	30 38       	mov	r8,3
80003d1c:	f0 09 18 00 	cp.b	r9,r8
80003d20:	c0 61       	brne	80003d2c <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
80003d22:	49 d8       	lddpc	r8,80003d94 <fat_cluster_readnext+0x80>
80003d24:	90 09       	ld.sh	r9,r8[0x0]
80003d26:	2f c9       	sub	r9,-4
80003d28:	b0 09       	st.h	r8[0x0],r9
80003d2a:	c0 58       	rjmp	80003d34 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003d2c:	49 a8       	lddpc	r8,80003d94 <fat_cluster_readnext+0x80>
80003d2e:	90 09       	ld.sh	r9,r8[0x0]
80003d30:	2f e9       	sub	r9,-2
80003d32:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003d34:	49 88       	lddpc	r8,80003d94 <fat_cluster_readnext+0x80>
80003d36:	90 09       	ld.sh	r9,r8[0x0]
80003d38:	e0 68 02 00 	mov	r8,512
80003d3c:	f0 09 19 00 	cp.h	r9,r8
80003d40:	c0 c1       	brne	80003d58 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
80003d42:	30 09       	mov	r9,0
80003d44:	49 48       	lddpc	r8,80003d94 <fat_cluster_readnext+0x80>
80003d46:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
80003d48:	49 48       	lddpc	r8,80003d98 <fat_cluster_readnext+0x84>
80003d4a:	70 09       	ld.w	r9,r8[0x0]
80003d4c:	2f f9       	sub	r9,-1
80003d4e:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
80003d50:	30 1c       	mov	r12,1
80003d52:	f0 1f 00 13 	mcall	80003d9c <fat_cluster_readnext+0x88>
80003d56:	c1 b0       	breq	80003d8c <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003d58:	49 28       	lddpc	r8,80003da0 <fat_cluster_readnext+0x8c>
80003d5a:	2f c8       	sub	r8,-4
80003d5c:	48 e9       	lddpc	r9,80003d94 <fat_cluster_readnext+0x80>
80003d5e:	92 89       	ld.uh	r9,r9[0x0]
80003d60:	49 1a       	lddpc	r10,80003da4 <fat_cluster_readnext+0x90>
80003d62:	f4 09 07 0b 	ld.ub	r11,r10[r9]
80003d66:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
80003d68:	12 0a       	add	r10,r9
80003d6a:	15 9a       	ld.ub	r10,r10[0x1]
80003d6c:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
80003d6e:	48 9a       	lddpc	r10,80003d90 <fat_cluster_readnext+0x7c>
80003d70:	15 8b       	ld.ub	r11,r10[0x0]
80003d72:	30 3a       	mov	r10,3
80003d74:	f4 0b 18 00 	cp.b	r11,r10
80003d78:	c0 20       	breq	80003d7c <fat_cluster_readnext+0x68>
80003d7a:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003d7c:	48 aa       	lddpc	r10,80003da4 <fat_cluster_readnext+0x90>
80003d7e:	f4 09 00 09 	add	r9,r10,r9
80003d82:	13 aa       	ld.ub	r10,r9[0x2]
80003d84:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80003d86:	13 b9       	ld.ub	r9,r9[0x3]
80003d88:	b0 89       	st.b	r8[0x0],r9
80003d8a:	30 1c       	mov	r12,1
   }
   return true;
}
80003d8c:	d8 02       	popm	pc
80003d8e:	00 00       	add	r0,r0
80003d90:	00 00       	add	r0,r0
80003d92:	08 a4       	st.w	r4++,r4
80003d94:	00 00       	add	r0,r0
80003d96:	06 28       	rsub	r8,r3
80003d98:	00 00       	add	r0,r0
80003d9a:	06 14       	sub	r4,r3
80003d9c:	80 00       	ld.sh	r0,r0[0x0]
80003d9e:	3c 94       	mov	r4,-55
80003da0:	00 00       	add	r0,r0
80003da2:	08 f8       	st.b	--r4,r8
80003da4:	00 00       	add	r0,r0
80003da6:	06 58       	eor	r8,r3

80003da8 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80003da8:	d4 31       	pushm	r0-r7,lr
80003daa:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80003dac:	fe f8 02 18 	ld.w	r8,pc[536]
80003db0:	11 88       	ld.ub	r8,r8[0x0]
80003db2:	30 39       	mov	r9,3
80003db4:	f2 08 18 00 	cp.b	r8,r9
80003db8:	c0 d1       	brne	80003dd2 <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80003dba:	fe fa 02 0e 	ld.w	r10,pc[526]
80003dbe:	74 09       	ld.w	r9,r10[0x0]
80003dc0:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80003dc2:	15 bb       	ld.ub	r11,r10[0x3]
80003dc4:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80003dc8:	a3 6b       	lsl	r11,0x2
80003dca:	fe fa 02 02 	ld.w	r10,pc[514]
80003dce:	b4 0b       	st.h	r10[0x0],r11
80003dd0:	c2 08       	rjmp	80003e10 <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80003dd2:	30 29       	mov	r9,2
80003dd4:	f2 08 18 00 	cp.b	r8,r9
80003dd8:	c0 81       	brne	80003de8 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80003dda:	4f ca       	lddpc	r10,80003fc8 <fat_cluster_val+0x220>
80003ddc:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80003dde:	15 bb       	ld.ub	r11,r10[0x3]
80003de0:	a1 7b       	lsl	r11,0x1
80003de2:	4f ba       	lddpc	r10,80003fcc <fat_cluster_val+0x224>
80003de4:	b4 0b       	st.h	r10[0x0],r11
80003de6:	c1 58       	rjmp	80003e10 <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80003de8:	30 19       	mov	r9,1
80003dea:	f2 08 18 00 	cp.b	r8,r9
80003dee:	c0 30       	breq	80003df4 <fat_cluster_val+0x4c>
80003df0:	30 09       	mov	r9,0
80003df2:	c0 f8       	rjmp	80003e10 <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80003df4:	4f 59       	lddpc	r9,80003fc8 <fat_cluster_val+0x220>
80003df6:	72 09       	ld.w	r9,r9[0x0]
80003df8:	4f 5a       	lddpc	r10,80003fcc <fat_cluster_val+0x224>
80003dfa:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80003dfe:	12 0b       	add	r11,r9
80003e00:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80003e02:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80003e06:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80003e0a:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80003e0e:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80003e10:	58 05       	cp.w	r5,0
80003e12:	c2 20       	breq	80003e56 <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80003e14:	4e fa       	lddpc	r10,80003fd0 <fat_cluster_val+0x228>
80003e16:	74 0a       	ld.w	r10,r10[0x0]
80003e18:	14 39       	cp.w	r9,r10
80003e1a:	c0 32       	brcc	80003e20 <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80003e1c:	4e da       	lddpc	r10,80003fd0 <fat_cluster_val+0x228>
80003e1e:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80003e20:	4e da       	lddpc	r10,80003fd4 <fat_cluster_val+0x22c>
80003e22:	74 0a       	ld.w	r10,r10[0x0]
80003e24:	14 39       	cp.w	r9,r10
80003e26:	e0 88 00 04 	brls	80003e2e <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80003e2a:	4e ba       	lddpc	r10,80003fd4 <fat_cluster_val+0x22c>
80003e2c:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80003e2e:	30 1a       	mov	r10,1
80003e30:	f4 08 18 00 	cp.b	r8,r10
80003e34:	c1 11       	brne	80003e56 <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003e36:	4e 68       	lddpc	r8,80003fcc <fat_cluster_val+0x224>
80003e38:	90 0a       	ld.sh	r10,r8[0x0]
80003e3a:	e0 68 01 ff 	mov	r8,511
80003e3e:	f0 0a 19 00 	cp.h	r10,r8
80003e42:	c0 a1       	brne	80003e56 <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80003e44:	f2 c8 ff ff 	sub	r8,r9,-1
80003e48:	4e 3a       	lddpc	r10,80003fd4 <fat_cluster_val+0x22c>
80003e4a:	74 0a       	ld.w	r10,r10[0x0]
80003e4c:	14 38       	cp.w	r8,r10
80003e4e:	e0 88 00 04 	brls	80003e56 <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80003e52:	4e 1a       	lddpc	r10,80003fd4 <fat_cluster_val+0x22c>
80003e54:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80003e56:	4e 18       	lddpc	r8,80003fd8 <fat_cluster_val+0x230>
80003e58:	70 48       	ld.w	r8,r8[0x10]
80003e5a:	10 09       	add	r9,r8
80003e5c:	4e 08       	lddpc	r8,80003fdc <fat_cluster_val+0x234>
80003e5e:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80003e60:	30 1c       	mov	r12,1
80003e62:	f0 1f 00 60 	mcall	80003fe0 <fat_cluster_val+0x238>
80003e66:	e0 80 00 ad 	breq	80003fc0 <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80003e6a:	4d 98       	lddpc	r8,80003fcc <fat_cluster_val+0x224>
80003e6c:	90 08       	ld.sh	r8,r8[0x0]
80003e6e:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80003e72:	4d d9       	lddpc	r9,80003fe4 <fat_cluster_val+0x23c>
80003e74:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80003e76:	0c 97       	mov	r7,r6
80003e78:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80003e7a:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80003e7c:	ec c4 ff fe 	sub	r4,r6,-2
80003e80:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80003e82:	ec c3 ff fd 	sub	r3,r6,-3
80003e86:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80003e88:	4c f9       	lddpc	r9,80003fc4 <fat_cluster_val+0x21c>
80003e8a:	13 8a       	ld.ub	r10,r9[0x0]
80003e8c:	30 19       	mov	r9,1
80003e8e:	f2 0a 18 00 	cp.b	r10,r9
80003e92:	c1 11       	brne	80003eb4 <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003e94:	e0 69 01 ff 	mov	r9,511
80003e98:	f2 08 19 00 	cp.h	r8,r9
80003e9c:	c0 c1       	brne	80003eb4 <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80003e9e:	4d 08       	lddpc	r8,80003fdc <fat_cluster_val+0x234>
80003ea0:	70 09       	ld.w	r9,r8[0x0]
80003ea2:	2f f9       	sub	r9,-1
80003ea4:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80003ea6:	30 1c       	mov	r12,1
80003ea8:	f0 1f 00 4e 	mcall	80003fe0 <fat_cluster_val+0x238>
80003eac:	e0 80 00 8a 	breq	80003fc0 <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80003eb0:	4c d8       	lddpc	r8,80003fe4 <fat_cluster_val+0x23c>
80003eb2:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80003eb4:	58 05       	cp.w	r5,0
80003eb6:	c3 11       	brne	80003f18 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80003eb8:	4c 48       	lddpc	r8,80003fc8 <fat_cluster_val+0x220>
80003eba:	f0 c9 ff fc 	sub	r9,r8,-4
80003ebe:	f0 cc ff f9 	sub	r12,r8,-7
80003ec2:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80003ec4:	2f a8       	sub	r8,-6
80003ec6:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80003ec8:	4b fa       	lddpc	r10,80003fc4 <fat_cluster_val+0x21c>
80003eca:	15 8a       	ld.ub	r10,r10[0x0]
80003ecc:	30 3b       	mov	r11,3
80003ece:	f6 0a 18 00 	cp.b	r10,r11
80003ed2:	c0 61       	brne	80003ede <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80003ed4:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80003ed6:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80003eda:	b2 80       	st.b	r9[0x0],r0
80003edc:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80003ede:	30 0b       	mov	r11,0
80003ee0:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80003ee2:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80003ee4:	30 19       	mov	r9,1
80003ee6:	f2 0a 18 00 	cp.b	r10,r9
80003eea:	c0 20       	breq	80003eee <fat_cluster_val+0x146>
80003eec:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80003eee:	4b 79       	lddpc	r9,80003fc8 <fat_cluster_val+0x220>
80003ef0:	13 b9       	ld.ub	r9,r9[0x3]
80003ef2:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003ef6:	c0 c0       	breq	80003f0e <fat_cluster_val+0x166>
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80003ef8:	19 8b       	ld.ub	r11,r12[0x0]
80003efa:	a5 8b       	lsr	r11,0x4
80003efc:	11 89       	ld.ub	r9,r8[0x0]
80003efe:	f2 0a 15 04 	lsl	r10,r9,0x4
80003f02:	f6 0a 00 0a 	add	r10,r11,r10
80003f06:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80003f08:	a5 89       	lsr	r9,0x4
80003f0a:	b0 89       	st.b	r8[0x0],r9
80003f0c:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80003f0e:	11 89       	ld.ub	r9,r8[0x0]
80003f10:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80003f14:	b0 89       	st.b	r8[0x0],r9
80003f16:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80003f18:	4a b8       	lddpc	r8,80003fc4 <fat_cluster_val+0x21c>
80003f1a:	11 88       	ld.ub	r8,r8[0x0]
80003f1c:	30 19       	mov	r9,1
80003f1e:	f2 08 18 00 	cp.b	r8,r9
80003f22:	c3 a1       	brne	80003f96 <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80003f24:	4a 98       	lddpc	r8,80003fc8 <fat_cluster_val+0x220>
80003f26:	11 b8       	ld.ub	r8,r8[0x3]
80003f28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f2c:	c1 10       	breq	80003f4e <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80003f2e:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80003f32:	4a 68       	lddpc	r8,80003fc8 <fat_cluster_val+0x220>
80003f34:	2f c8       	sub	r8,-4
80003f36:	11 b9       	ld.ub	r9,r8[0x3]
80003f38:	f2 0a 15 04 	lsl	r10,r9,0x4
80003f3c:	14 05       	add	r5,r10
80003f3e:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80003f40:	a5 89       	lsr	r9,0x4
80003f42:	11 a8       	ld.ub	r8,r8[0x2]
80003f44:	a5 68       	lsl	r8,0x4
80003f46:	f2 08 00 0a 	add	r10,r9,r8
80003f4a:	5c 5a       	castu.b	r10
80003f4c:	c0 c8       	rjmp	80003f64 <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80003f4e:	49 f8       	lddpc	r8,80003fc8 <fat_cluster_val+0x220>
80003f50:	2f c8       	sub	r8,-4
80003f52:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80003f54:	16 9a       	mov	r10,r11
80003f56:	e2 1a 00 f0 	andl	r10,0xf0,COH
80003f5a:	11 a8       	ld.ub	r8,r8[0x2]
80003f5c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003f60:	10 0a       	add	r10,r8
80003f62:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80003f64:	49 a8       	lddpc	r8,80003fcc <fat_cluster_val+0x224>
80003f66:	90 09       	ld.sh	r9,r8[0x0]
80003f68:	e0 68 01 ff 	mov	r8,511
80003f6c:	f0 09 19 00 	cp.h	r9,r8
80003f70:	c2 31       	brne	80003fb6 <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80003f72:	49 d8       	lddpc	r8,80003fe4 <fat_cluster_val+0x23c>
80003f74:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80003f76:	f0 1f 00 1d 	mcall	80003fe8 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80003f7a:	49 98       	lddpc	r8,80003fdc <fat_cluster_val+0x234>
80003f7c:	70 09       	ld.w	r9,r8[0x0]
80003f7e:	20 19       	sub	r9,1
80003f80:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80003f82:	30 1c       	mov	r12,1
80003f84:	f0 1f 00 17 	mcall	80003fe0 <fat_cluster_val+0x238>
80003f88:	c1 c0       	breq	80003fc0 <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80003f8a:	49 78       	lddpc	r8,80003fe4 <fat_cluster_val+0x23c>
80003f8c:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80003f90:	f0 1f 00 16 	mcall	80003fe8 <fat_cluster_val+0x240>
80003f94:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80003f96:	48 d9       	lddpc	r9,80003fc8 <fat_cluster_val+0x220>
80003f98:	2f c9       	sub	r9,-4
80003f9a:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80003f9c:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80003f9e:	30 3b       	mov	r11,3
80003fa0:	f6 08 18 00 	cp.b	r8,r11
80003fa4:	c0 91       	brne	80003fb6 <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80003fa6:	13 98       	ld.ub	r8,r9[0x1]
80003fa8:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80003faa:	e0 10 ff f0 	andl	r0,0xfff0
80003fae:	13 88       	ld.ub	r8,r9[0x0]
80003fb0:	f0 00 00 00 	add	r0,r8,r0
80003fb4:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80003fb6:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80003fb8:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80003fba:	f0 1f 00 0c 	mcall	80003fe8 <fat_cluster_val+0x240>
80003fbe:	da 3a       	popm	r0-r7,pc,r12=1
80003fc0:	d8 3a       	popm	r0-r7,pc,r12=0
80003fc2:	00 00       	add	r0,r0
80003fc4:	00 00       	add	r0,r0
80003fc6:	08 a4       	st.w	r4++,r4
80003fc8:	00 00       	add	r0,r0
80003fca:	08 f8       	st.b	--r4,r8
80003fcc:	00 00       	add	r0,r0
80003fce:	06 28       	rsub	r8,r3
80003fd0:	00 00       	add	r0,r0
80003fd2:	08 8c       	andn	r12,r4
80003fd4:	00 00       	add	r0,r0
80003fd6:	06 54       	eor	r4,r3
80003fd8:	00 00       	add	r0,r0
80003fda:	08 58       	eor	r8,r4
80003fdc:	00 00       	add	r0,r0
80003fde:	06 14       	sub	r4,r3
80003fe0:	80 00       	ld.sh	r0,r0[0x0]
80003fe2:	3c 94       	mov	r4,-55
80003fe4:	00 00       	add	r0,r0
80003fe6:	06 58       	eor	r8,r3
80003fe8:	80 00       	ld.sh	r0,r0[0x0]
80003fea:	39 cc       	mov	r12,-100

80003fec <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003fec:	d4 31       	pushm	r0-r7,lr
80003fee:	20 2d       	sub	sp,8
80003ff0:	18 93       	mov	r3,r12
80003ff2:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80003ff4:	30 89       	mov	r9,8
80003ff6:	fe f8 02 86 	ld.w	r8,pc[646]
80003ffa:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80003ffc:	30 38       	mov	r8,3
80003ffe:	f0 0c 18 00 	cp.b	r12,r8
80004002:	5f 0a       	sreq	r10
80004004:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004006:	fe f9 02 7a 	ld.w	r9,pc[634]
8000400a:	13 89       	ld.ub	r9,r9[0x0]
8000400c:	f0 09 18 00 	cp.b	r9,r8
80004010:	5f 08       	sreq	r8
80004012:	f5 e8 00 08 	and	r8,r10,r8
80004016:	c0 60       	breq	80004022 <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004018:	3f fc       	mov	r12,-1
8000401a:	f0 1f 00 9b 	mcall	80004284 <fat_cluster_list+0x298>
8000401e:	e0 80 01 2c 	breq	80004276 <fat_cluster_list+0x28a>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80004022:	fe f8 02 66 	ld.w	r8,pc[614]
80004026:	70 08       	ld.w	r8,r8[0x0]
80004028:	58 08       	cp.w	r8,0
8000402a:	c3 81       	brne	8000409a <fat_cluster_list+0xae>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
8000402c:	40 09       	lddsp	r9,sp[0x0]
8000402e:	58 09       	cp.w	r9,0
80004030:	e0 81 01 23 	brne	80004276 <fat_cluster_list+0x28a>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80004034:	fe f8 02 4c 	ld.w	r8,pc[588]
80004038:	11 88       	ld.ub	r8,r8[0x0]
8000403a:	f0 ca 00 01 	sub	r10,r8,1
8000403e:	30 19       	mov	r9,1
80004040:	f2 0a 18 00 	cp.b	r10,r9
80004044:	e0 8b 00 22 	brhi	80004088 <fat_cluster_list+0x9c>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004048:	fe f8 02 40 	ld.w	r8,pc[576]
8000404c:	70 18       	ld.w	r8,r8[0x4]
8000404e:	fe f9 02 3e 	ld.w	r9,pc[574]
80004052:	f3 19 00 1a 	ld.uh	r9,r9[26]
80004056:	12 38       	cp.w	r8,r9
80004058:	c1 32       	brcc	8000407e <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
8000405a:	fe f9 02 2e 	ld.w	r9,pc[558]
8000405e:	fe fa 02 2e 	ld.w	r10,pc[558]
80004062:	74 4b       	ld.w	r11,r10[0x10]
80004064:	16 08       	add	r8,r11
80004066:	f5 1b 00 18 	ld.uh	r11,r10[24]
8000406a:	16 08       	add	r8,r11
8000406c:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
8000406e:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80004072:	72 18       	ld.w	r8,r9[0x4]
80004074:	f4 08 01 08 	sub	r8,r10,r8
80004078:	93 18       	st.w	r9[0x4],r8
8000407a:	30 1c       	mov	r12,1
            return true;
8000407c:	cf e8       	rjmp	80004278 <fat_cluster_list+0x28c>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
8000407e:	31 a9       	mov	r9,26
80004080:	4f f8       	lddpc	r8,8000427c <fat_cluster_list+0x290>
80004082:	b0 89       	st.b	r8[0x0],r9
80004084:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004086:	cf 98       	rjmp	80004278 <fat_cluster_list+0x28c>
         }
      }
      if ( Is_fat32 )
80004088:	30 39       	mov	r9,3
8000408a:	f2 08 18 00 	cp.b	r8,r9
8000408e:	c0 81       	brne	8000409e <fat_cluster_list+0xb2>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004090:	4f f8       	lddpc	r8,8000428c <fat_cluster_list+0x2a0>
80004092:	70 69       	ld.w	r9,r8[0x18]
80004094:	4f f8       	lddpc	r8,80004290 <fat_cluster_list+0x2a4>
80004096:	91 09       	st.w	r8[0x0],r9
80004098:	c0 38       	rjmp	8000409e <fat_cluster_list+0xb2>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
8000409a:	4f e9       	lddpc	r9,80004290 <fat_cluster_list+0x2a4>
8000409c:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
8000409e:	30 38       	mov	r8,3
800040a0:	f0 03 18 00 	cp.b	r3,r8
800040a4:	c0 70       	breq	800040b2 <fat_cluster_list+0xc6>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
800040a6:	0e 9c       	mov	r12,r7
800040a8:	f0 1f 00 7b 	mcall	80004294 <fat_cluster_list+0x2a8>
800040ac:	c0 70       	breq	800040ba <fat_cluster_list+0xce>
800040ae:	30 1c       	mov	r12,1
800040b0:	ce 48       	rjmp	80004278 <fat_cluster_list+0x28c>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
800040b2:	f0 1f 00 7a 	mcall	80004298 <fat_cluster_list+0x2ac>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
800040b6:	f0 1f 00 7a 	mcall	8000429c <fat_cluster_list+0x2b0>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
800040ba:	4f 40       	lddpc	r0,80004288 <fat_cluster_list+0x29c>
800040bc:	3f f8       	mov	r8,-1
800040be:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
800040c0:	00 96       	mov	r6,r0
800040c2:	4f 35       	lddpc	r5,8000428c <fat_cluster_list+0x2a0>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800040c4:	4f 37       	lddpc	r7,80004290 <fat_cluster_list+0x2a4>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
800040c6:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
800040c8:	e0 c8 ff f9 	sub	r8,r0,-7
800040cc:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
800040ce:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
800040d0:	6c 19       	ld.w	r9,r6[0x4]
800040d2:	0b 98       	ld.ub	r8,r5[0x1]
800040d4:	10 39       	cp.w	r9,r8
800040d6:	c4 32       	brcc	8000415c <fat_cluster_list+0x170>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800040d8:	6a 4a       	ld.w	r10,r5[0x10]
800040da:	14 09       	add	r9,r10
800040dc:	6a 5a       	ld.w	r10,r5[0x14]
800040de:	14 09       	add	r9,r10
800040e0:	6e 0a       	ld.w	r10,r7[0x0]
800040e2:	20 2a       	sub	r10,2
800040e4:	f4 08 02 48 	mul	r8,r10,r8
800040e8:	f2 08 00 08 	add	r8,r9,r8
800040ec:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
800040ee:	e2 03 18 00 	cp.b	r3,r1
800040f2:	c0 d1       	brne	8000410c <fat_cluster_list+0x120>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
800040f4:	4e 57       	lddpc	r7,80004288 <fat_cluster_list+0x29c>
800040f6:	4e 68       	lddpc	r8,8000428c <fat_cluster_list+0x2a0>
800040f8:	11 99       	ld.ub	r9,r8[0x1]
800040fa:	6e 18       	ld.w	r8,r7[0x4]
800040fc:	f2 08 01 08 	sub	r8,r9,r8
80004100:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004102:	f0 1f 00 68 	mcall	800042a0 <fat_cluster_list+0x2b4>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004106:	30 1c       	mov	r12,1
80004108:	8f 1c       	st.w	r7[0x4],r12
            return true;
8000410a:	cb 78       	rjmp	80004278 <fat_cluster_list+0x28c>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000410c:	0b 99       	ld.ub	r9,r5[0x1]
8000410e:	40 1a       	lddsp	r10,sp[0x4]
80004110:	15 88       	ld.ub	r8,r10[0x0]
80004112:	f2 08 01 08 	sub	r8,r9,r8
80004116:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004118:	e4 03 18 00 	cp.b	r3,r2
8000411c:	c2 01       	brne	8000415c <fat_cluster_list+0x170>
8000411e:	4d 99       	lddpc	r9,80004280 <fat_cluster_list+0x294>
80004120:	13 88       	ld.ub	r8,r9[0x0]
80004122:	e4 08 18 00 	cp.b	r8,r2
80004126:	c1 b0       	breq	8000415c <fat_cluster_list+0x170>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80004128:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
8000412a:	30 0c       	mov	r12,0
8000412c:	f0 1f 00 5e 	mcall	800042a4 <fat_cluster_list+0x2b8>
80004130:	e0 80 00 a3 	breq	80004276 <fat_cluster_list+0x28a>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80004134:	6e 09       	ld.w	r9,r7[0x0]
80004136:	f2 c8 ff ff 	sub	r8,r9,-1
8000413a:	8f 08       	st.w	r7[0x0],r8
8000413c:	6e 1a       	ld.w	r10,r7[0x4]
8000413e:	14 38       	cp.w	r8,r10
80004140:	c0 a0       	breq	80004154 <fat_cluster_list+0x168>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004142:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004144:	08 19       	sub	r9,r4
80004146:	0b 98       	ld.ub	r8,r5[0x1]
80004148:	b1 39       	mul	r9,r8
8000414a:	6c 18       	ld.w	r8,r6[0x4]
8000414c:	f2 08 00 08 	add	r8,r9,r8
80004150:	8d 18       	st.w	r6[0x4],r8
                  break;
80004152:	c0 58       	rjmp	8000415c <fat_cluster_list+0x170>
               }
               if( !fat_cluster_readnext() )
80004154:	f0 1f 00 55 	mcall	800042a8 <fat_cluster_list+0x2bc>
80004158:	ce e1       	brne	80004134 <fat_cluster_list+0x148>
8000415a:	c8 e8       	rjmp	80004276 <fat_cluster_list+0x28a>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
8000415c:	30 0c       	mov	r12,0
8000415e:	f0 1f 00 52 	mcall	800042a4 <fat_cluster_list+0x2b8>
80004162:	e0 80 00 8a 	breq	80004276 <fat_cluster_list+0x28a>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80004166:	f0 1f 00 52 	mcall	800042ac <fat_cluster_list+0x2c0>
8000416a:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
8000416c:	e4 0c 18 00 	cp.b	r12,r2
80004170:	e0 80 00 83 	breq	80004276 <fat_cluster_list+0x28a>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004174:	01 89       	ld.ub	r9,r0[0x0]
80004176:	3f f8       	mov	r8,-1
80004178:	f0 09 18 00 	cp.b	r9,r8
8000417c:	c4 61       	brne	80004208 <fat_cluster_list+0x21c>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
8000417e:	e2 0c 18 00 	cp.b	r12,r1
80004182:	c2 b1       	brne	800041d8 <fat_cluster_list+0x1ec>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004184:	4c 18       	lddpc	r8,80004288 <fat_cluster_list+0x29c>
80004186:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004188:	4c a9       	lddpc	r9,800042b0 <fat_cluster_list+0x2c4>
8000418a:	13 89       	ld.ub	r9,r9[0x0]
8000418c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004190:	4c 9a       	lddpc	r10,800042b4 <fat_cluster_list+0x2c8>
80004192:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004196:	72 2a       	ld.w	r10,r9[0x8]
80004198:	0e 1a       	sub	r10,r7
8000419a:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000419c:	4b c9       	lddpc	r9,8000428c <fat_cluster_list+0x2a0>
8000419e:	72 5b       	ld.w	r11,r9[0x14]
800041a0:	72 4a       	ld.w	r10,r9[0x10]
800041a2:	14 0b       	add	r11,r10
800041a4:	13 99       	ld.ub	r9,r9[0x1]
800041a6:	4b ba       	lddpc	r10,80004290 <fat_cluster_list+0x2a4>
800041a8:	74 0a       	ld.w	r10,r10[0x0]
800041aa:	20 2a       	sub	r10,2
800041ac:	f2 0a 02 4a 	mul	r10,r9,r10
800041b0:	f6 0a 00 0a 	add	r10,r11,r10
800041b4:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
800041b6:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
800041b8:	30 38       	mov	r8,3
800041ba:	f0 03 18 00 	cp.b	r3,r8
800041be:	c0 30       	breq	800041c4 <fat_cluster_list+0x1d8>
               fat_cache_clusterlist_update_finish();
800041c0:	f0 1f 00 38 	mcall	800042a0 <fat_cluster_list+0x2b4>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
800041c4:	4b 18       	lddpc	r8,80004288 <fat_cluster_list+0x29c>
800041c6:	4b 39       	lddpc	r9,80004290 <fat_cluster_list+0x2a4>
800041c8:	72 09       	ld.w	r9,r9[0x0]
800041ca:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
800041cc:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
800041ce:	31 a9       	mov	r9,26
800041d0:	4a b8       	lddpc	r8,8000427c <fat_cluster_list+0x290>
800041d2:	b0 89       	st.b	r8[0x0],r9
800041d4:	30 0c       	mov	r12,0
            return false;
800041d6:	c5 18       	rjmp	80004278 <fat_cluster_list+0x28c>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800041d8:	0b 98       	ld.ub	r8,r5[0x1]
800041da:	6c 19       	ld.w	r9,r6[0x4]
800041dc:	f2 08 01 08 	sub	r8,r9,r8
800041e0:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
800041e2:	40 0a       	lddsp	r10,sp[0x0]
800041e4:	58 0a       	cp.w	r10,0
800041e6:	c4 50       	breq	80004270 <fat_cluster_list+0x284>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
800041e8:	58 08       	cp.w	r8,0
800041ea:	c4 31       	brne	80004270 <fat_cluster_list+0x284>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
800041ec:	6e 18       	ld.w	r8,r7[0x4]
800041ee:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
800041f0:	e0 68 ff ff 	mov	r8,65535
800041f4:	ea 18 0f ff 	orh	r8,0xfff
800041f8:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
800041fa:	30 1c       	mov	r12,1
800041fc:	f0 1f 00 2a 	mcall	800042a4 <fat_cluster_list+0x2b8>
80004200:	c3 b0       	breq	80004276 <fat_cluster_list+0x28a>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Resotre the next cluster
80004202:	6c 08       	ld.w	r8,r6[0x0]
80004204:	8f 18       	st.w	r7[0x4],r8
80004206:	c3 58       	rjmp	80004270 <fat_cluster_list+0x284>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004208:	e4 03 18 00 	cp.b	r3,r2
8000420c:	c0 a1       	brne	80004220 <fat_cluster_list+0x234>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
8000420e:	6e 09       	ld.w	r9,r7[0x0]
80004210:	2f f9       	sub	r9,-1
80004212:	6e 18       	ld.w	r8,r7[0x4]
80004214:	10 39       	cp.w	r9,r8
80004216:	c1 b0       	breq	8000424c <fat_cluster_list+0x260>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80004218:	f0 1f 00 22 	mcall	800042a0 <fat_cluster_list+0x2b4>
8000421c:	30 1c       	mov	r12,1
               return true;                              // End of segment
8000421e:	c2 d8       	rjmp	80004278 <fat_cluster_list+0x28c>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004220:	40 09       	lddsp	r9,sp[0x0]
80004222:	58 09       	cp.w	r9,0
80004224:	c1 40       	breq	8000424c <fat_cluster_list+0x260>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004226:	6e 18       	ld.w	r8,r7[0x4]
80004228:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
8000422a:	30 08       	mov	r8,0
8000422c:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
8000422e:	0b 98       	ld.ub	r8,r5[0x1]
80004230:	6c 19       	ld.w	r9,r6[0x4]
80004232:	10 39       	cp.w	r9,r8
80004234:	c0 62       	brcc	80004240 <fat_cluster_list+0x254>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80004236:	e0 68 ff ff 	mov	r8,65535
8000423a:	ea 18 0f ff 	orh	r8,0xfff
8000423e:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004240:	30 1c       	mov	r12,1
80004242:	f0 1f 00 19 	mcall	800042a4 <fat_cluster_list+0x2b8>
80004246:	c1 80       	breq	80004276 <fat_cluster_list+0x28a>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Resotre the next cluster
80004248:	6c 08       	ld.w	r8,r6[0x0]
8000424a:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
8000424c:	e2 04 18 00 	cp.b	r4,r1
80004250:	c0 b1       	brne	80004266 <fat_cluster_list+0x27a>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80004252:	40 0a       	lddsp	r10,sp[0x0]
80004254:	58 0a       	cp.w	r10,0
80004256:	c0 40       	breq	8000425e <fat_cluster_list+0x272>
            {
               return fat_update_fat2();
80004258:	f0 1f 00 18 	mcall	800042b8 <fat_cluster_list+0x2cc>
8000425c:	c0 e8       	rjmp	80004278 <fat_cluster_list+0x28c>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
8000425e:	f0 1f 00 11 	mcall	800042a0 <fat_cluster_list+0x2b4>
80004262:	30 1c       	mov	r12,1
            return true; // End of segment
80004264:	c0 a8       	rjmp	80004278 <fat_cluster_list+0x28c>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80004266:	0b 99       	ld.ub	r9,r5[0x1]
80004268:	6c 18       	ld.w	r8,r6[0x4]
8000426a:	f2 08 00 08 	add	r8,r9,r8
8000426e:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004270:	6e 18       	ld.w	r8,r7[0x4]
80004272:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004274:	c2 eb       	rjmp	800040d0 <fat_cluster_list+0xe4>
80004276:	30 0c       	mov	r12,0
}
80004278:	2f ed       	sub	sp,-8
8000427a:	d8 32       	popm	r0-r7,pc
8000427c:	00 00       	add	r0,r0
8000427e:	08 a8       	st.w	r4++,r8
80004280:	00 00       	add	r0,r0
80004282:	08 a4       	st.w	r4++,r4
80004284:	80 00       	ld.sh	r0,r0[0x0]
80004286:	4d d4       	lddpc	r4,800043f8 <fat_read_file+0xb8>
80004288:	00 00       	add	r0,r0
8000428a:	09 00       	ld.w	r0,r4++
8000428c:	00 00       	add	r0,r0
8000428e:	08 58       	eor	r8,r4
80004290:	00 00       	add	r0,r0
80004292:	08 f8       	st.b	--r4,r8
80004294:	80 00       	ld.sh	r0,r0[0x0]
80004296:	34 bc       	mov	r12,75
80004298:	80 00       	ld.sh	r0,r0[0x0]
8000429a:	33 94       	mov	r4,57
8000429c:	80 00       	ld.sh	r0,r0[0x0]
8000429e:	48 c8       	lddpc	r8,800042cc <fat_read_dir+0x10>
800042a0:	80 00       	ld.sh	r0,r0[0x0]
800042a2:	34 64       	mov	r4,70
800042a4:	80 00       	ld.sh	r0,r0[0x0]
800042a6:	3d a8       	mov	r8,-38
800042a8:	80 00       	ld.sh	r0,r0[0x0]
800042aa:	3d 14       	mov	r4,-47
800042ac:	80 00       	ld.sh	r0,r0[0x0]
800042ae:	33 34       	mov	r4,51
800042b0:	00 00       	add	r0,r0
800042b2:	08 aa       	st.w	r4++,r10
800042b4:	00 00       	add	r0,r0
800042b6:	06 2c       	rsub	r12,r3
800042b8:	80 00       	ld.sh	r0,r0[0x0]
800042ba:	49 54       	lddpc	r4,8000430c <fat_read_dir+0x50>

800042bc <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
800042bc:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
800042c0:	49 98       	lddpc	r8,80004324 <fat_read_dir+0x68>
800042c2:	90 97       	ld.uh	r7,r8[0x2]
800042c4:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800042c6:	49 98       	lddpc	r8,80004328 <fat_read_dir+0x6c>
800042c8:	11 89       	ld.ub	r9,r8[0x0]
800042ca:	49 98       	lddpc	r8,8000432c <fat_read_dir+0x70>
800042cc:	11 88       	ld.ub	r8,r8[0x0]
800042ce:	f0 09 18 00 	cp.b	r9,r8
800042d2:	c0 d1       	brne	800042ec <fat_read_dir+0x30>
800042d4:	49 58       	lddpc	r8,80004328 <fat_read_dir+0x6c>
800042d6:	70 39       	ld.w	r9,r8[0xc]
800042d8:	49 58       	lddpc	r8,8000432c <fat_read_dir+0x70>
800042da:	70 88       	ld.w	r8,r8[0x20]
800042dc:	10 39       	cp.w	r9,r8
800042de:	c0 71       	brne	800042ec <fat_read_dir+0x30>
800042e0:	49 28       	lddpc	r8,80004328 <fat_read_dir+0x6c>
800042e2:	70 48       	ld.w	r8,r8[0x10]
800042e4:	0e 38       	cp.w	r8,r7
800042e6:	c0 31       	brne	800042ec <fat_read_dir+0x30>
800042e8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector ascked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
800042ec:	49 18       	lddpc	r8,80004330 <fat_read_dir+0x74>
800042ee:	49 09       	lddpc	r9,8000432c <fat_read_dir+0x70>
800042f0:	72 89       	ld.w	r9,r9[0x20]
800042f2:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
800042f4:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
800042f6:	30 0b       	mov	r11,0
800042f8:	30 2c       	mov	r12,2
800042fa:	f0 1f 00 0f 	mcall	80004334 <fat_read_dir+0x78>
800042fe:	c1 00       	breq	8000431e <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004300:	48 c8       	lddpc	r8,80004330 <fat_read_dir+0x74>
80004302:	70 09       	ld.w	r9,r8[0x0]
80004304:	48 d8       	lddpc	r8,80004338 <fat_read_dir+0x7c>
80004306:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004308:	30 1c       	mov	r12,1
8000430a:	f0 1f 00 0d 	mcall	8000433c <fat_read_dir+0x80>
8000430e:	c0 80       	breq	8000431e <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004310:	48 68       	lddpc	r8,80004328 <fat_read_dir+0x6c>
80004312:	48 79       	lddpc	r9,8000432c <fat_read_dir+0x70>
80004314:	72 89       	ld.w	r9,r9[0x20]
80004316:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004318:	91 47       	st.w	r8[0x10],r7
8000431a:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
8000431e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004322:	00 00       	add	r0,r0
80004324:	00 00       	add	r0,r0
80004326:	08 a4       	st.w	r4++,r4
80004328:	00 00       	add	r0,r0
8000432a:	08 e0       	st.h	--r4,r0
8000432c:	00 00       	add	r0,r0
8000432e:	08 58       	eor	r8,r4
80004330:	00 00       	add	r0,r0
80004332:	09 00       	ld.w	r0,r4++
80004334:	80 00       	ld.sh	r0,r0[0x0]
80004336:	3f ec       	mov	r12,-2
80004338:	00 00       	add	r0,r0
8000433a:	06 14       	sub	r4,r3
8000433c:	80 00       	ld.sh	r0,r0[0x0]
8000433e:	3c 94       	mov	r4,-55

80004340 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80004340:	eb cd 40 c0 	pushm	r6-r7,lr
80004344:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004346:	4a e8       	lddpc	r8,800043fc <fat_read_file+0xbc>
80004348:	70 38       	ld.w	r8,r8[0xc]
8000434a:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
8000434e:	30 29       	mov	r9,2
80004350:	f2 0c 18 00 	cp.b	r12,r9
80004354:	c1 31       	brne	8000437a <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004356:	4a b8       	lddpc	r8,80004400 <fat_read_file+0xc0>
80004358:	11 89       	ld.ub	r9,r8[0x0]
8000435a:	4a b8       	lddpc	r8,80004404 <fat_read_file+0xc4>
8000435c:	11 88       	ld.ub	r8,r8[0x0]
8000435e:	f0 09 18 00 	cp.b	r9,r8
80004362:	c1 91       	brne	80004394 <fat_read_file+0x54>
80004364:	4a 78       	lddpc	r8,80004400 <fat_read_file+0xc0>
80004366:	70 39       	ld.w	r9,r8[0xc]
80004368:	4a 58       	lddpc	r8,800043fc <fat_read_file+0xbc>
8000436a:	70 18       	ld.w	r8,r8[0x4]
8000436c:	10 39       	cp.w	r9,r8
8000436e:	c1 31       	brne	80004394 <fat_read_file+0x54>
80004370:	4a 48       	lddpc	r8,80004400 <fat_read_file+0xc0>
80004372:	70 48       	ld.w	r8,r8[0x10]
80004374:	0c 38       	cp.w	r8,r6
80004376:	c0 f1       	brne	80004394 <fat_read_file+0x54>
80004378:	c3 38       	rjmp	800043de <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector ascked
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
8000437a:	30 39       	mov	r9,3
8000437c:	f2 0c 18 00 	cp.b	r12,r9
80004380:	c3 31       	brne	800043e6 <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80004382:	49 f9       	lddpc	r9,800043fc <fat_read_file+0xbc>
80004384:	72 19       	ld.w	r9,r9[0x4]
80004386:	58 09       	cp.w	r9,0
80004388:	c2 b0       	breq	800043de <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
8000438a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8000438e:	c2 c0       	breq	800043e6 <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004390:	2f f6       	sub	r6,-1
80004392:	c2 a8       	rjmp	800043e6 <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80004394:	49 d8       	lddpc	r8,80004408 <fat_read_file+0xc8>
80004396:	49 a9       	lddpc	r9,800043fc <fat_read_file+0xbc>
80004398:	72 19       	ld.w	r9,r9[0x4]
8000439a:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
8000439c:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
8000439e:	30 1b       	mov	r11,1
800043a0:	16 9c       	mov	r12,r11
800043a2:	f0 1f 00 1b 	mcall	8000440c <fat_read_file+0xcc>
800043a6:	c1 e0       	breq	800043e2 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
800043a8:	49 88       	lddpc	r8,80004408 <fat_read_file+0xc8>
800043aa:	70 09       	ld.w	r9,r8[0x0]
800043ac:	49 98       	lddpc	r8,80004410 <fat_read_file+0xd0>
800043ae:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
800043b0:	30 1c       	mov	r12,1
800043b2:	f0 1f 00 19 	mcall	80004414 <fat_read_file+0xd4>
800043b6:	c1 60       	breq	800043e2 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
800043b8:	49 28       	lddpc	r8,80004400 <fat_read_file+0xc0>
800043ba:	49 19       	lddpc	r9,800043fc <fat_read_file+0xbc>
800043bc:	72 19       	ld.w	r9,r9[0x4]
800043be:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
800043c0:	91 46       	st.w	r8[0x10],r6
800043c2:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
800043c6:	30 38       	mov	r8,3
800043c8:	f0 07 18 00 	cp.b	r7,r8
800043cc:	c0 b1       	brne	800043e2 <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
800043ce:	49 38       	lddpc	r8,80004418 <fat_read_file+0xd8>
800043d0:	11 89       	ld.ub	r9,r8[0x0]
800043d2:	31 a8       	mov	r8,26
800043d4:	f0 09 18 00 	cp.b	r9,r8
800043d8:	5f 0c       	sreq	r12
800043da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800043de:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
800043e2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800043e6:	48 98       	lddpc	r8,80004408 <fat_read_file+0xc8>
800043e8:	48 59       	lddpc	r9,800043fc <fat_read_file+0xbc>
800043ea:	72 19       	ld.w	r9,r9[0x4]
800043ec:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
800043ee:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
800043f0:	30 1b       	mov	r11,1
800043f2:	0e 9c       	mov	r12,r7
800043f4:	f0 1f 00 06 	mcall	8000440c <fat_read_file+0xcc>
800043f8:	ce 70       	breq	800043c6 <fat_read_file+0x86>
800043fa:	cf 2b       	rjmp	800043de <fat_read_file+0x9e>
800043fc:	00 00       	add	r0,r0
800043fe:	06 18       	sub	r8,r3
80004400:	00 00       	add	r0,r0
80004402:	08 e0       	st.h	--r4,r0
80004404:	00 00       	add	r0,r0
80004406:	08 58       	eor	r8,r4
80004408:	00 00       	add	r0,r0
8000440a:	09 00       	ld.w	r0,r4++
8000440c:	80 00       	ld.sh	r0,r0[0x0]
8000440e:	3f ec       	mov	r12,-2
80004410:	00 00       	add	r0,r0
80004412:	06 14       	sub	r4,r3
80004414:	80 00       	ld.sh	r0,r0[0x0]
80004416:	3c 94       	mov	r4,-55
80004418:	00 00       	add	r0,r0
8000441a:	08 a8       	st.w	r4++,r8

8000441c <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
8000441c:	eb cd 40 c0 	pushm	r6-r7,lr
80004420:	18 97       	mov	r7,r12
80004422:	16 96       	mov	r6,r11
   if( 0 == fs_g_nav_entry.u32_cluster )
80004424:	4b 68       	lddpc	r8,800044fc <fat_write_file+0xe0>
80004426:	70 18       	ld.w	r8,r8[0x4]
80004428:	58 08       	cp.w	r8,0
8000442a:	c0 a1       	brne	8000443e <fat_write_file+0x22>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
8000442c:	4b 58       	lddpc	r8,80004500 <fat_write_file+0xe4>
8000442e:	3f f9       	mov	r9,-1
80004430:	b0 89       	st.b	r8[0x0],r9
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
80004432:	30 09       	mov	r9,0
80004434:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
80004436:	30 1c       	mov	r12,1
80004438:	f0 1f 00 33 	mcall	80004504 <fat_write_file+0xe8>
8000443c:	c1 c8       	rjmp	80004474 <fat_write_file+0x58>
   }
   else
   {
      if( fat_read_file( mode ) )
8000443e:	f0 1f 00 33 	mcall	80004508 <fat_write_file+0xec>
80004442:	c0 30       	breq	80004448 <fat_write_file+0x2c>
80004444:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
         return true;      // A segment is availabled (no alloc necessary)

      if( FS_ERR_OUT_LIST != fs_g_status )
80004448:	4b 18       	lddpc	r8,8000450c <fat_write_file+0xf0>
8000444a:	11 89       	ld.ub	r9,r8[0x0]
8000444c:	31 a8       	mov	r8,26
8000444e:	f0 09 18 00 	cp.b	r9,r8
80004452:	c5 21       	brne	800044f6 <fat_write_file+0xda>
         return false;     // Error system
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
80004454:	4a f8       	lddpc	r8,80004510 <fat_write_file+0xf4>
80004456:	11 88       	ld.ub	r8,r8[0x0]
80004458:	f0 08 00 28 	add	r8,r8,r8<<0x2
8000445c:	4a e9       	lddpc	r9,80004514 <fat_write_file+0xf8>
8000445e:	f2 08 00 28 	add	r8,r9,r8<<0x2
80004462:	3f f9       	mov	r9,-1
80004464:	b0 a9       	st.b	r8[0x2],r9
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
80004466:	2f 88       	sub	r8,-8
80004468:	4a c9       	lddpc	r9,80004518 <fat_write_file+0xfc>
8000446a:	13 9a       	ld.ub	r10,r9[0x1]
8000446c:	70 09       	ld.w	r9,r8[0x0]
8000446e:	f4 09 00 09 	add	r9,r10,r9
80004472:	91 09       	st.w	r8[0x0],r9
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
80004474:	30 18       	mov	r8,1
80004476:	f0 07 18 00 	cp.b	r7,r8
8000447a:	c0 41       	brne	80004482 <fat_write_file+0x66>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
8000447c:	4a 18       	lddpc	r8,80004500 <fat_write_file+0xe4>
8000447e:	91 16       	st.w	r8[0x4],r6
80004480:	c0 48       	rjmp	80004488 <fat_write_file+0x6c>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
80004482:	30 19       	mov	r9,1
80004484:	49 f8       	lddpc	r8,80004500 <fat_write_file+0xe4>
80004486:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
80004488:	f0 1f 00 25 	mcall	8000451c <fat_write_file+0x100>
8000448c:	c3 50       	breq	800044f6 <fat_write_file+0xda>
      return false;
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
8000448e:	49 c8       	lddpc	r8,800044fc <fat_write_file+0xe0>
80004490:	70 18       	ld.w	r8,r8[0x4]
80004492:	58 08       	cp.w	r8,0
80004494:	c0 d1       	brne	800044ae <fat_write_file+0x92>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contzins the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
80004496:	49 b8       	lddpc	r8,80004500 <fat_write_file+0xe4>
80004498:	70 08       	ld.w	r8,r8[0x0]
8000449a:	49 e9       	lddpc	r9,80004510 <fat_write_file+0xf4>
8000449c:	13 89       	ld.ub	r9,r9[0x0]
8000449e:	f2 09 00 29 	add	r9,r9,r9<<0x2
800044a2:	2f f9       	sub	r9,-1
800044a4:	49 ca       	lddpc	r10,80004514 <fat_write_file+0xf8>
800044a6:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
800044aa:	49 59       	lddpc	r9,800044fc <fat_write_file+0xe0>
800044ac:	93 18       	st.w	r9[0x4],r8
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
800044ae:	30 18       	mov	r8,1
800044b0:	f0 07 18 00 	cp.b	r7,r8
800044b4:	c0 71       	brne	800044c2 <fat_write_file+0xa6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
800044b6:	49 38       	lddpc	r8,80004500 <fat_write_file+0xe4>
800044b8:	70 19       	ld.w	r9,r8[0x4]
800044ba:	ec 09 01 09 	sub	r9,r6,r9
800044be:	91 19       	st.w	r8[0x4],r9
800044c0:	c0 68       	rjmp	800044cc <fat_write_file+0xb0>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
800044c2:	49 08       	lddpc	r8,80004500 <fat_write_file+0xe4>
800044c4:	70 19       	ld.w	r9,r8[0x4]
800044c6:	f2 09 11 01 	rsub	r9,r9,1
800044ca:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
800044cc:	48 d9       	lddpc	r9,80004500 <fat_write_file+0xe4>
800044ce:	49 38       	lddpc	r8,80004518 <fat_write_file+0xfc>
800044d0:	70 5b       	ld.w	r11,r8[0x14]
800044d2:	70 4a       	ld.w	r10,r8[0x10]
800044d4:	f6 0a 00 0a 	add	r10,r11,r10
800044d8:	11 9b       	ld.ub	r11,r8[0x1]
800044da:	72 08       	ld.w	r8,r9[0x0]
800044dc:	20 28       	sub	r8,2
800044de:	f6 08 02 48 	mul	r8,r11,r8
800044e2:	f4 08 00 08 	add	r8,r10,r8
800044e6:	93 08       	st.w	r9[0x0],r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
800044e8:	f0 1f 00 0e 	mcall	80004520 <fat_write_file+0x104>

   return fat_read_file( mode );    // load the new cluster list
800044ec:	0e 9c       	mov	r12,r7
800044ee:	f0 1f 00 07 	mcall	80004508 <fat_write_file+0xec>
800044f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800044f6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800044fa:	00 00       	add	r0,r0
800044fc:	00 00       	add	r0,r0
800044fe:	06 18       	sub	r8,r3
80004500:	00 00       	add	r0,r0
80004502:	09 00       	ld.w	r0,r4++
80004504:	80 00       	ld.sh	r0,r0[0x0]
80004506:	33 bc       	mov	r12,59
80004508:	80 00       	ld.sh	r0,r0[0x0]
8000450a:	43 40       	lddsp	r0,sp[0xd0]
8000450c:	00 00       	add	r0,r0
8000450e:	08 a8       	st.w	r4++,r8
80004510:	00 00       	add	r0,r0
80004512:	08 aa       	st.w	r4++,r10
80004514:	00 00       	add	r0,r0
80004516:	06 2c       	rsub	r12,r3
80004518:	00 00       	add	r0,r0
8000451a:	08 58       	eor	r8,r4
8000451c:	80 00       	ld.sh	r0,r0[0x0]
8000451e:	4e 74       	lddpc	r4,800046b8 <fat_check_mount_noopen+0x8>
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	34 64       	mov	r4,70

80004524 <fat_check_device>:
//! @verbatim
//! This function updates all navigator datas when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80004524:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80004526:	4a 28       	lddpc	r8,800045ac <fat_check_device+0x88>
80004528:	11 89       	ld.ub	r9,r8[0x0]
8000452a:	30 08       	mov	r8,0
8000452c:	f0 09 18 00 	cp.b	r9,r8
80004530:	c3 c1       	brne	800045a8 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80004532:	4a 08       	lddpc	r8,800045b0 <fat_check_device+0x8c>
80004534:	11 89       	ld.ub	r9,r8[0x0]
80004536:	3f f8       	mov	r8,-1
80004538:	f0 09 18 00 	cp.b	r9,r8
8000453c:	c0 51       	brne	80004546 <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
8000453e:	30 19       	mov	r9,1
80004540:	49 d8       	lddpc	r8,800045b4 <fat_check_device+0x90>
80004542:	b0 89       	st.b	r8[0x0],r9
80004544:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
80004546:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80004548:	49 a5       	lddpc	r5,800045b0 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000454a:	49 c1       	lddpc	r1,800045b8 <fat_check_device+0x94>
8000454c:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
8000454e:	49 c0       	lddpc	r0,800045bc <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004550:	49 c4       	lddpc	r4,800045c0 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80004552:	49 d3       	lddpc	r3,800045c4 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80004554:	0b 8c       	ld.ub	r12,r5[0x0]
80004556:	f0 1f 00 1d 	mcall	800045c8 <fat_check_device+0xa4>
8000455a:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
8000455c:	c2 60       	breq	800045a8 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000455e:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80004560:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004562:	0b 88       	ld.ub	r8,r5[0x0]
80004564:	09 89       	ld.ub	r9,r4[0x0]
80004566:	f0 09 18 00 	cp.b	r9,r8
8000456a:	c0 51       	brne	80004574 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
8000456c:	49 89       	lddpc	r9,800045cc <fat_check_device+0xa8>
8000456e:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80004570:	49 89       	lddpc	r9,800045d0 <fat_check_device+0xac>
80004572:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80004574:	07 89       	ld.ub	r9,r3[0x0]
80004576:	f0 09 18 00 	cp.b	r9,r8
8000457a:	c0 31       	brne	80004580 <fat_check_device+0x5c>
      {
         fat_cache_reset();
8000457c:	f0 1f 00 16 	mcall	800045d4 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80004580:	f0 1f 00 16 	mcall	800045d8 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80004584:	30 18       	mov	r8,1
80004586:	48 c9       	lddpc	r9,800045b4 <fat_check_device+0x90>
80004588:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
8000458a:	58 37       	cp.w	r7,3
8000458c:	c0 81       	brne	8000459c <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
8000458e:	10 02       	add	r2,r8
80004590:	5c 52       	castu.b	r2
80004592:	36 48       	mov	r8,100
80004594:	f0 02 18 00 	cp.b	r2,r8
80004598:	cd e1       	brne	80004554 <fat_check_device+0x30>
8000459a:	c0 88       	rjmp	800045aa <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
8000459c:	58 27       	cp.w	r7,2
8000459e:	c0 61       	brne	800045aa <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800045a0:	31 89       	mov	r9,24
800045a2:	48 58       	lddpc	r8,800045b4 <fat_check_device+0x90>
800045a4:	b0 89       	st.b	r8[0x0],r9
800045a6:	d8 3a       	popm	r0-r7,pc,r12=0
800045a8:	da 3a       	popm	r0-r7,pc,r12=1
800045aa:	d8 3a       	popm	r0-r7,pc,r12=0
800045ac:	00 00       	add	r0,r0
800045ae:	06 2a       	rsub	r10,r3
800045b0:	00 00       	add	r0,r0
800045b2:	08 58       	eor	r8,r4
800045b4:	00 00       	add	r0,r0
800045b6:	08 a8       	st.w	r4++,r8
800045b8:	00 00       	add	r0,r0
800045ba:	08 a4       	st.w	r4++,r4
800045bc:	00 00       	add	r0,r0
800045be:	06 18       	sub	r8,r3
800045c0:	00 00       	add	r0,r0
800045c2:	08 ac       	st.w	r4++,r12
800045c4:	00 00       	add	r0,r0
800045c6:	08 e0       	st.h	--r4,r0
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	74 38       	ld.w	r8,r10[0xc]
800045cc:	00 00       	add	r0,r0
800045ce:	08 a0       	st.w	r4++,r0
800045d0:	00 00       	add	r0,r0
800045d2:	08 90       	mov	r0,r4
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	39 b4       	mov	r4,-101
800045d8:	80 00       	ld.sh	r0,r0[0x0]
800045da:	33 94       	mov	r4,57

800045dc <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
800045dc:	d4 01       	pushm	lr
   if( !fat_check_device() )
800045de:	f0 1f 00 0b 	mcall	80004608 <fat_check_noopen+0x2c>
800045e2:	c1 10       	breq	80004604 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800045e4:	48 a8       	lddpc	r8,8000460c <fat_check_noopen+0x30>
800045e6:	11 89       	ld.ub	r9,r8[0x0]
800045e8:	30 08       	mov	r8,0
800045ea:	f0 09 18 00 	cp.b	r9,r8
800045ee:	c0 b0       	breq	80004604 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
800045f0:	48 88       	lddpc	r8,80004610 <fat_check_noopen+0x34>
800045f2:	11 89       	ld.ub	r9,r8[0x0]
800045f4:	30 08       	mov	r8,0
800045f6:	f0 09 18 00 	cp.b	r9,r8
800045fa:	c0 50       	breq	80004604 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
800045fc:	30 59       	mov	r9,5
800045fe:	48 68       	lddpc	r8,80004614 <fat_check_noopen+0x38>
80004600:	b0 89       	st.b	r8[0x0],r9
80004602:	d8 0a       	popm	pc,r12=0
      return false;
80004604:	da 0a       	popm	pc,r12=1
80004606:	00 00       	add	r0,r0
80004608:	80 00       	ld.sh	r0,r0[0x0]
8000460a:	45 24       	lddsp	r4,sp[0x148]
8000460c:	00 00       	add	r0,r0
8000460e:	08 a4       	st.w	r4++,r4
80004610:	00 00       	add	r0,r0
80004612:	06 18       	sub	r8,r3
80004614:	00 00       	add	r0,r0
80004616:	08 a8       	st.w	r4++,r8

80004618 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80004618:	d4 01       	pushm	lr
   if( !fat_check_device() )
8000461a:	f0 1f 00 0a 	mcall	80004640 <fat_check_mount+0x28>
8000461e:	c0 f0       	breq	8000463c <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80004620:	48 98       	lddpc	r8,80004644 <fat_check_mount+0x2c>
80004622:	11 89       	ld.ub	r9,r8[0x0]
80004624:	30 08       	mov	r8,0
80004626:	f0 09 18 00 	cp.b	r9,r8
8000462a:	c0 81       	brne	8000463a <fat_check_mount+0x22>
   {
      if( !fat_mount() )
8000462c:	f0 1f 00 07 	mcall	80004648 <fat_check_mount+0x30>
80004630:	c0 51       	brne	8000463a <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80004632:	30 e9       	mov	r9,14
80004634:	48 68       	lddpc	r8,8000464c <fat_check_mount+0x34>
80004636:	b0 89       	st.b	r8[0x0],r9
         return false;
80004638:	d8 02       	popm	pc
8000463a:	30 1c       	mov	r12,1
      }
   }
   return true;
}
8000463c:	d8 02       	popm	pc
8000463e:	00 00       	add	r0,r0
80004640:	80 00       	ld.sh	r0,r0[0x0]
80004642:	45 24       	lddsp	r4,sp[0x148]
80004644:	00 00       	add	r0,r0
80004646:	08 a4       	st.w	r4++,r4
80004648:	80 00       	ld.sh	r0,r0[0x0]
8000464a:	58 4c       	cp.w	r12,4
8000464c:	00 00       	add	r0,r0
8000464e:	08 a8       	st.w	r4++,r8

80004650 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80004650:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80004652:	f0 1f 00 04 	mcall	80004660 <fat_check_mount_select+0x10>
80004656:	c0 30       	breq	8000465c <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80004658:	f0 1f 00 03 	mcall	80004664 <fat_check_mount_select+0x14>
}
8000465c:	d8 02       	popm	pc
8000465e:	00 00       	add	r0,r0
80004660:	80 00       	ld.sh	r0,r0[0x0]
80004662:	46 18       	lddsp	r8,sp[0x184]
80004664:	80 00       	ld.sh	r0,r0[0x0]
80004666:	32 f8       	mov	r8,47

80004668 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80004668:	d4 01       	pushm	lr
   if( !fat_check_mount() )
8000466a:	f0 1f 00 06 	mcall	80004680 <fat_check_mount_select_open+0x18>
8000466e:	c0 70       	breq	8000467c <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
80004670:	f0 1f 00 05 	mcall	80004684 <fat_check_mount_select_open+0x1c>
80004674:	c0 40       	breq	8000467c <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
80004676:	f0 1f 00 05 	mcall	80004688 <fat_check_mount_select_open+0x20>
8000467a:	d8 02       	popm	pc
8000467c:	d8 0a       	popm	pc,r12=0
8000467e:	00 00       	add	r0,r0
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	46 18       	lddsp	r8,sp[0x184]
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	32 f8       	mov	r8,47
80004688:	80 00       	ld.sh	r0,r0[0x0]
8000468a:	32 d8       	mov	r8,45

8000468c <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
8000468c:	d4 01       	pushm	lr
   if( !fat_check_mount() )
8000468e:	f0 1f 00 06 	mcall	800046a4 <fat_check_mount_select_noopen+0x18>
80004692:	c0 70       	breq	800046a0 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80004694:	f0 1f 00 05 	mcall	800046a8 <fat_check_mount_select_noopen+0x1c>
80004698:	c0 40       	breq	800046a0 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
8000469a:	f0 1f 00 05 	mcall	800046ac <fat_check_mount_select_noopen+0x20>
8000469e:	d8 02       	popm	pc
800046a0:	d8 0a       	popm	pc,r12=0
800046a2:	00 00       	add	r0,r0
800046a4:	80 00       	ld.sh	r0,r0[0x0]
800046a6:	46 18       	lddsp	r8,sp[0x184]
800046a8:	80 00       	ld.sh	r0,r0[0x0]
800046aa:	32 f8       	mov	r8,47
800046ac:	80 00       	ld.sh	r0,r0[0x0]
800046ae:	45 dc       	lddsp	r12,sp[0x174]

800046b0 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
800046b0:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800046b2:	f0 1f 00 04 	mcall	800046c0 <fat_check_mount_noopen+0x10>
800046b6:	c0 30       	breq	800046bc <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
800046b8:	f0 1f 00 03 	mcall	800046c4 <fat_check_mount_noopen+0x14>
}
800046bc:	d8 02       	popm	pc
800046be:	00 00       	add	r0,r0
800046c0:	80 00       	ld.sh	r0,r0[0x0]
800046c2:	46 18       	lddsp	r8,sp[0x184]
800046c4:	80 00       	ld.sh	r0,r0[0x0]
800046c6:	45 dc       	lddsp	r12,sp[0x174]

800046c8 <fat_select_filesystem>:
//! @verbatim
//! Compute the fat type, fat position and fat size.
//! @endverbatim
//!
bool  fat_select_filesystem( uint8_t u8_fat_type , bool b_MBR )
{
800046c8:	eb cd 40 e0 	pushm	r5-r7,lr
800046cc:	20 1d       	sub	sp,4
   uint8_t u8_i;
   uint8_t u8_tmp = 0;
   uint16_t  u16_tmp, u16_tmp2;
   Fs_format_table _CONST_TYPE_ *ptr_table;

   if( (FS_FORMAT_FAT   != u8_fat_type )
800046ce:	f8 c9 00 02 	sub	r9,r12,2
800046d2:	30 18       	mov	r8,1
800046d4:	f0 09 18 00 	cp.b	r9,r8
800046d8:	e0 88 00 0a 	brls	800046ec <fat_select_filesystem+0x24>
   &&  (FS_FORMAT_FAT32 != u8_fat_type ) )
   {
      // Default format then select the better FAT type
      if( (((uint32_t)512*1024*1024)/FS_512B) >= fs_s_u32_size_partition  )
800046dc:	4e 18       	lddpc	r8,80004860 <fat_select_filesystem+0x198>
800046de:	70 08       	ld.w	r8,r8[0x0]
800046e0:	fc 19 00 10 	movh	r9,0x10
800046e4:	12 38       	cp.w	r8,r9
800046e6:	e0 88 00 07 	brls	800046f4 <fat_select_filesystem+0x2c>
800046ea:	c2 58       	rjmp	80004734 <fat_select_filesystem+0x6c>
         u8_fat_type = FS_FORMAT_FAT32;
      }
   }

   //** Verify the FAT type choosed
   if(FS_FORMAT_FAT == u8_fat_type )
800046ec:	30 28       	mov	r8,2
800046ee:	f0 0c 18 00 	cp.b	r12,r8
800046f2:	c2 11       	brne	80004734 <fat_select_filesystem+0x6c>
   {
      if( (((uint32_t)2*1024*1024)/FS_512B) >= fs_s_u32_size_partition  )
800046f4:	4d b8       	lddpc	r8,80004860 <fat_select_filesystem+0x198>
800046f6:	70 08       	ld.w	r8,r8[0x0]
800046f8:	e0 48 10 00 	cp.w	r8,4096
800046fc:	e0 8b 00 07 	brhi	8000470a <fat_select_filesystem+0x42>
      {
         fs_g_status = FS_ERR_DEVICE_TOO_SMALL;    // The disk size is not supported
80004700:	32 c9       	mov	r9,44
80004702:	4d 98       	lddpc	r8,80004864 <fat_select_filesystem+0x19c>
80004704:	b0 89       	st.b	r8[0x0],r9
80004706:	30 0c       	mov	r12,0
         return false;
80004708:	c9 f8       	rjmp	80004846 <fat_select_filesystem+0x17e>
      }
      if( (((uint32_t)15*1024*1024)/FS_512B) >= fs_s_u32_size_partition  )
8000470a:	e0 48 78 00 	cp.w	r8,30720
8000470e:	e0 8b 00 0d 	brhi	80004728 <fat_select_filesystem+0x60>
      {
         // FAT 12 format
         fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80004712:	30 19       	mov	r9,1
80004714:	4d 58       	lddpc	r8,80004868 <fat_select_filesystem+0x1a0>
80004716:	b0 89       	st.b	r8[0x0],r9
80004718:	4d 59       	lddpc	r9,8000486c <fat_select_filesystem+0x1a4>
8000471a:	32 08       	mov	r8,32
      u8_i = sizeof(TableFAT32);
      ptr_table = TableFAT32;
   }
   for(  ; u8_i!=0 ; u8_i-- )
   {
      if( fs_s_u32_size_partition <= ptr_table->u32_disk_size )
8000471c:	4d 1a       	lddpc	r10,80004860 <fat_select_filesystem+0x198>
8000471e:	74 0c       	ld.w	r12,r10[0x0]
80004720:	72 0a       	ld.w	r10,r9[0x0]
80004722:	18 3a       	cp.w	r10,r12
80004724:	c1 63       	brcs	80004750 <fat_select_filesystem+0x88>
80004726:	c1 18       	rjmp	80004748 <fat_select_filesystem+0x80>
         fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
         u8_i = sizeof(TableFAT12);
         ptr_table = TableFAT12;
      }else{
         // FAT 16 format
         fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80004728:	30 29       	mov	r9,2
8000472a:	4d 08       	lddpc	r8,80004868 <fat_select_filesystem+0x1a0>
8000472c:	b0 89       	st.b	r8[0x0],r9
8000472e:	4d 19       	lddpc	r9,80004870 <fat_select_filesystem+0x1a8>
80004730:	34 08       	mov	r8,64
80004732:	cf 5b       	rjmp	8000471c <fat_select_filesystem+0x54>
         ptr_table = TableFAT16;
      }
   }
   else
   {  // FAT 32 format
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80004734:	30 39       	mov	r9,3
80004736:	4c d8       	lddpc	r8,80004868 <fat_select_filesystem+0x1a0>
80004738:	b0 89       	st.b	r8[0x0],r9
8000473a:	4c f9       	lddpc	r9,80004874 <fat_select_filesystem+0x1ac>
8000473c:	33 08       	mov	r8,48
8000473e:	ce fb       	rjmp	8000471c <fat_select_filesystem+0x54>
      {
         // Get cluster size (unit sector)
         fs_g_nav.u8_BPB_SecPerClus = ptr_table->u8_SecPerClusVal;
         break;
      }
      ptr_table++;
80004740:	2f 89       	sub	r9,-8
      u8_i = sizeof(TableFAT32);
      ptr_table = TableFAT32;
   }
   for(  ; u8_i!=0 ; u8_i-- )
   {
      if( fs_s_u32_size_partition <= ptr_table->u32_disk_size )
80004742:	72 0a       	ld.w	r10,r9[0x0]
80004744:	18 3a       	cp.w	r10,r12
80004746:	c0 53       	brcs	80004750 <fat_select_filesystem+0x88>
      {
         // Get cluster size (unit sector)
         fs_g_nav.u8_BPB_SecPerClus = ptr_table->u8_SecPerClusVal;
80004748:	13 c9       	ld.ub	r9,r9[0x4]
8000474a:	4c c8       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
8000474c:	b0 99       	st.b	r8[0x1],r9
         break;
8000474e:	c0 48       	rjmp	80004756 <fat_select_filesystem+0x8e>
   {  // FAT 32 format
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
      u8_i = sizeof(TableFAT32);
      ptr_table = TableFAT32;
   }
   for(  ; u8_i!=0 ; u8_i-- )
80004750:	20 18       	sub	r8,1
80004752:	5c 58       	castu.b	r8
80004754:	cf 61       	brne	80004740 <fat_select_filesystem+0x78>
         fs_g_nav.u8_BPB_SecPerClus = ptr_table->u8_SecPerClusVal;
         break;
      }
      ptr_table++;
   }
   if(0 == fs_g_nav.u8_BPB_SecPerClus)
80004756:	4c 98       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
80004758:	11 99       	ld.ub	r9,r8[0x1]
8000475a:	30 08       	mov	r8,0
8000475c:	f0 09 18 00 	cp.b	r9,r8
80004760:	c0 61       	brne	8000476c <fat_select_filesystem+0xa4>
   {
      fs_g_status = FS_ERR_BAD_SIZE_FAT;    // The disk size is not supported by selected FAT type
80004762:	32 19       	mov	r9,33
80004764:	4c 08       	lddpc	r8,80004864 <fat_select_filesystem+0x19c>
80004766:	b0 89       	st.b	r8[0x0],r9
80004768:	30 0c       	mov	r12,0
      return false;
8000476a:	c6 e8       	rjmp	80004846 <fat_select_filesystem+0x17e>
   }

   //** Compute fat size
   // Compute PBR address
   if( b_MBR )
8000476c:	58 0b       	cp.w	r11,0
8000476e:	c0 50       	breq	80004778 <fat_select_filesystem+0xb0>
      fs_g_nav.u32_ptr_fat = 1;  // MBR exist
80004770:	30 19       	mov	r9,1
80004772:	4c 28       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
80004774:	91 49       	st.w	r8[0x10],r9
80004776:	c0 48       	rjmp	8000477e <fat_select_filesystem+0xb6>
   else
      fs_g_nav.u32_ptr_fat = 0;  // no MBR
80004778:	30 09       	mov	r9,0
8000477a:	4c 08       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
8000477c:	91 49       	st.w	r8[0x10],r9

   if( Is_fat12 )
8000477e:	4b b8       	lddpc	r8,80004868 <fat_select_filesystem+0x1a0>
80004780:	11 88       	ld.ub	r8,r8[0x0]
80004782:	30 19       	mov	r9,1
80004784:	f2 08 18 00 	cp.b	r8,r9
80004788:	c3 61       	brne	800047f4 <fat_select_filesystem+0x12c>
   {  // FAT 12
      fs_g_nav.u32_ptr_fat += 1;  // FAT address = PBR address + 1
8000478a:	4b c8       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
8000478c:	70 49       	ld.w	r9,r8[0x10]
8000478e:	2f f9       	sub	r9,-1
80004790:	91 49       	st.w	r8[0x10],r9
      // Try all possibility of FAT12 size
      fs_g_nav.u32_fat_size=1;
80004792:	30 19       	mov	r9,1
80004794:	91 19       	st.w	r8[0x4],r9
         }
         // Check if the number of cluster corresponding at data zone size
         // Note: -1 to not compute PBR sector
         u16_tmp  = ((fs_s_u32_size_partition -1 - (fs_g_nav.u32_fat_size *2)) / fs_g_nav.u8_BPB_SecPerClus)+2;
         u16_tmp2 = (fs_g_nav.u32_fat_size *FS_512B *2) / 3;
         if( u16_tmp <= u16_tmp2 )
80004796:	f8 c9 00 03 	sub	r9,r12,3
8000479a:	11 98       	ld.ub	r8,r8[0x1]
8000479c:	f2 08 0d 08 	divu	r8,r9,r8
800047a0:	f0 c9 ff fe 	sub	r9,r8,-2
800047a4:	e0 68 01 55 	mov	r8,341
800047a8:	f0 09 19 00 	cp.h	r9,r8
800047ac:	e0 8b 00 50 	brhi	8000484c <fat_select_filesystem+0x184>
800047b0:	30 1c       	mov	r12,1
800047b2:	c4 a8       	rjmp	80004846 <fat_select_filesystem+0x17e>
800047b4:	4b 19       	lddpc	r9,80004878 <fat_select_filesystem+0x1b0>
800047b6:	93 18       	st.w	r9[0x4],r8
      fs_g_nav.u32_fat_size=1;
      while(1)
      {
         if( 12 < fs_g_nav.u32_fat_size)        // Max FAT size in FAT12 mode (unit sector) (=0xFFE*1.5/FS_512B)
         {
            fs_g_status = FS_ERR_BAD_SIZE_FAT;  // The disk size is not supported by file system selected
800047b8:	32 19       	mov	r9,33
800047ba:	4a b8       	lddpc	r8,80004864 <fat_select_filesystem+0x19c>
800047bc:	b0 89       	st.b	r8[0x0],r9
800047be:	30 0c       	mov	r12,0
            return false;
800047c0:	c4 38       	rjmp	80004846 <fat_select_filesystem+0x17e>
800047c2:	10 99       	mov	r9,r8
         }
         // Check if the number of cluster corresponding at data zone size
         // Note: -1 to not compute PBR sector
         u16_tmp  = ((fs_s_u32_size_partition -1 - (fs_g_nav.u32_fat_size *2)) / fs_g_nav.u8_BPB_SecPerClus)+2;
         u16_tmp2 = (fs_g_nav.u32_fat_size *FS_512B *2) / 3;
         if( u16_tmp <= u16_tmp2 )
800047c4:	f8 05 0d 0a 	divu	r10,r12,r5
800047c8:	f4 cb ff fe 	sub	r11,r10,-2
800047cc:	f2 07 15 0a 	lsl	r7,r9,0xa
800047d0:	ee 0e 06 46 	mulu.d	r6,r7,lr
800047d4:	0e 9a       	mov	r10,r7
800047d6:	a1 9a       	lsr	r10,0x1
800047d8:	f4 0b 19 00 	cp.h	r11,r10
800047dc:	e0 8b 00 06 	brhi	800047e8 <fat_select_filesystem+0x120>
800047e0:	4a 69       	lddpc	r9,80004878 <fat_select_filesystem+0x1b0>
800047e2:	93 18       	st.w	r9[0x4],r8
800047e4:	30 1c       	mov	r12,1
800047e6:	c3 08       	rjmp	80004846 <fat_select_filesystem+0x17e>
            break;   // FAT size OK

         fs_g_nav.u32_fat_size++;
800047e8:	f2 c8 ff ff 	sub	r8,r9,-1
800047ec:	20 2c       	sub	r12,2
      fs_g_nav.u32_ptr_fat += 1;  // FAT address = PBR address + 1
      // Try all possibility of FAT12 size
      fs_g_nav.u32_fat_size=1;
      while(1)
      {
         if( 12 < fs_g_nav.u32_fat_size)        // Max FAT size in FAT12 mode (unit sector) (=0xFFE*1.5/FS_512B)
800047ee:	58 d8       	cp.w	r8,13
800047f0:	ce 91       	brne	800047c2 <fat_select_filesystem+0xfa>
800047f2:	ce 1b       	rjmp	800047b4 <fat_select_filesystem+0xec>
         fs_g_nav.u32_fat_size++;
      }
   }
   else
   {
      if( Is_fat32 )
800047f4:	30 39       	mov	r9,3
800047f6:	f2 08 18 00 	cp.b	r8,r9
800047fa:	c0 b1       	brne	80004810 <fat_select_filesystem+0x148>
      {  // FAT 32
         fs_g_nav.u32_ptr_fat += 32;  // FAT address = PBR address + BPB_ResvSecCnt
800047fc:	49 f8       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
800047fe:	70 49       	ld.w	r9,r8[0x10]
80004800:	2e 09       	sub	r9,-32
80004802:	91 49       	st.w	r8[0x10],r9
         u8_tmp = 32;
         // TmpVal2        = ((256 * BPB_SecPerClus) + BPB_NumFATs )/2;
         //                = ((((uint16_t)fs_g_nav.u8_BPB_SecPerClus)<<8) + 2) >> 1;
         //                = (((uint16_t)fs_g_nav.u8_BPB_SecPerClus)<<7) + 1;
         //                = u16_tmp
         u16_tmp = (((uint16_t)fs_g_nav.u8_BPB_SecPerClus)<<7) + 1;
80004804:	11 98       	ld.ub	r8,r8[0x1]
80004806:	a7 78       	lsl	r8,0x7
80004808:	2f f8       	sub	r8,-1
8000480a:	ba 18       	st.h	sp[0x2],r8
8000480c:	32 0b       	mov	r11,32
8000480e:	c1 28       	rjmp	80004832 <fat_select_filesystem+0x16a>
         // BPB_FATSz16    = 0;
         // BPB_FATSz32    = FATSz;
      }
      if( Is_fat16 )
80004810:	30 29       	mov	r9,2
80004812:	f2 08 18 00 	cp.b	r8,r9
80004816:	c0 30       	breq	8000481c <fat_select_filesystem+0x154>
80004818:	30 0b       	mov	r11,0
8000481a:	c0 c8       	rjmp	80004832 <fat_select_filesystem+0x16a>
      {  // FAT 16
         fs_g_nav.u32_ptr_fat += 1;  // FAT address = PBR address + BPB_ResvSecCnt
8000481c:	49 78       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
8000481e:	70 49       	ld.w	r9,r8[0x10]
80004820:	2f f9       	sub	r9,-1
80004822:	91 49       	st.w	r8[0x10],r9
         //                = fs_s_u32_size_partition - u8_tmp
         u8_tmp = 33;
         // TmpVal2        = ((256 * BPB_SecPerClus) + BPB_NumFATs )/2;
         //                = (((uint16_t)fs_g_nav.u8_BPB_SecPerClus)<<8) + 2;
         //                = u16_tmp
         MSB(u16_tmp) = fs_g_nav.u8_BPB_SecPerClus;
80004824:	fa c9 ff fe 	sub	r9,sp,-2
80004828:	11 98       	ld.ub	r8,r8[0x1]
8000482a:	b2 88       	st.b	r9[0x0],r8
         LSB(u16_tmp) = 2;
8000482c:	30 28       	mov	r8,2
8000482e:	b2 98       	st.b	r9[0x1],r8
80004830:	32 1b       	mov	r11,33
      }
      // FATSz          = (TMPVal1 + TmpVal2 - 1) / TmpVal2;
      fs_g_nav.u32_fat_size = (fs_s_u32_size_partition -u8_tmp +u16_tmp -1) / u16_tmp;
80004832:	9a 98       	ld.uh	r8,sp[0x2]
80004834:	20 1c       	sub	r12,1
80004836:	10 0c       	add	r12,r8
80004838:	f8 0b 01 0b 	sub	r11,r12,r11
8000483c:	f6 08 0d 0a 	divu	r10,r11,r8
80004840:	48 e9       	lddpc	r9,80004878 <fat_select_filesystem+0x1b0>
80004842:	93 1a       	st.w	r9[0x4],r10
80004844:	30 1c       	mov	r12,1
   }

   return true;
}
80004846:	2f fd       	sub	sp,-4
80004848:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
            fs_g_status = FS_ERR_BAD_SIZE_FAT;  // The disk size is not supported by file system selected
            return false;
         }
         // Check if the number of cluster corresponding at data zone size
         // Note: -1 to not compute PBR sector
         u16_tmp  = ((fs_s_u32_size_partition -1 - (fs_g_nav.u32_fat_size *2)) / fs_g_nav.u8_BPB_SecPerClus)+2;
8000484c:	48 b8       	lddpc	r8,80004878 <fat_select_filesystem+0x1b0>
8000484e:	11 95       	ld.ub	r5,r8[0x1]
80004850:	20 5c       	sub	r12,5
80004852:	30 28       	mov	r8,2
80004854:	10 99       	mov	r9,r8
         u16_tmp2 = (fs_g_nav.u32_fat_size *FS_512B *2) / 3;
         if( u16_tmp <= u16_tmp2 )
80004856:	e0 6e aa ab 	mov	lr,43691
8000485a:	ea 1e aa aa 	orh	lr,0xaaaa
8000485e:	cb 3b       	rjmp	800047c4 <fat_select_filesystem+0xfc>
80004860:	00 00       	add	r0,r0
80004862:	09 08       	ld.w	r8,r4++
80004864:	00 00       	add	r0,r0
80004866:	08 a8       	st.w	r4++,r8
80004868:	00 00       	add	r0,r0
8000486a:	08 a4       	st.w	r4++,r4
8000486c:	80 00       	ld.sh	r0,r0[0x0]
8000486e:	8b 2c       	st.w	r5[0x8],r12
80004870:	80 00       	ld.sh	r0,r0[0x0]
80004872:	8b 6c       	st.w	r5[0x18],r12
80004874:	80 00       	ld.sh	r0,r0[0x0]
80004876:	8b b0       	st.w	r5[0x2c],r0
80004878:	00 00       	add	r0,r0
8000487a:	08 58       	eor	r8,r4

8000487c <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
8000487c:	f8 c9 00 21 	sub	r9,r12,33
80004880:	35 d8       	mov	r8,93
80004882:	f0 09 18 00 	cp.b	r9,r8
80004886:	e0 8b 00 1d 	brhi	800048c0 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000488a:	f8 c9 00 61 	sub	r9,r12,97
8000488e:	31 98       	mov	r8,25
80004890:	f0 09 18 00 	cp.b	r9,r8
80004894:	e0 88 00 07 	brls	800048a2 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80004898:	32 b8       	mov	r8,43
8000489a:	f0 0c 18 00 	cp.b	r12,r8
8000489e:	c0 51       	brne	800048a8 <fat_translate_char_shortname+0x2c>
800048a0:	c1 08       	rjmp	800048c0 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
800048a2:	22 0c       	sub	r12,32
800048a4:	5c 5c       	castu.b	r12
800048a6:	5e fc       	retal	r12
800048a8:	48 7a       	lddpc	r10,800048c4 <fat_translate_char_shortname+0x48>
800048aa:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
800048ae:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
800048b0:	11 89       	ld.ub	r9,r8[0x0]
800048b2:	f8 09 18 00 	cp.b	r9,r12
800048b6:	c0 50       	breq	800048c0 <fat_translate_char_shortname+0x44>
800048b8:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
800048ba:	14 38       	cp.w	r8,r10
800048bc:	cf a1       	brne	800048b0 <fat_translate_char_shortname+0x34>
800048be:	5e fc       	retal	r12
800048c0:	5e fd       	retal	0
800048c2:	00 00       	add	r0,r0
800048c4:	80 00       	ld.sh	r0,r0[0x0]
800048c6:	8b f0       	st.w	r5[0x3c],r0

800048c8 <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
800048c8:	3f f9       	mov	r9,-1
800048ca:	48 48       	lddpc	r8,800048d8 <fat_clear_info_fat_mod+0x10>
800048cc:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
800048ce:	30 09       	mov	r9,0
800048d0:	48 38       	lddpc	r8,800048dc <fat_clear_info_fat_mod+0x14>
800048d2:	91 09       	st.w	r8[0x0],r9
}
800048d4:	5e fc       	retal	r12
800048d6:	00 00       	add	r0,r0
800048d8:	00 00       	add	r0,r0
800048da:	08 8c       	andn	r12,r4
800048dc:	00 00       	add	r0,r0
800048de:	06 54       	eor	r4,r3

800048e0 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
800048e0:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
800048e2:	30 0b       	mov	r11,0
800048e4:	49 58       	lddpc	r8,80004938 <fat_clear_cluster+0x58>
800048e6:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
800048e8:	30 2c       	mov	r12,2
800048ea:	f0 1f 00 15 	mcall	8000493c <fat_clear_cluster+0x5c>
800048ee:	c2 30       	breq	80004934 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
800048f0:	49 48       	lddpc	r8,80004940 <fat_clear_cluster+0x60>
800048f2:	11 98       	ld.ub	r8,r8[0x1]
800048f4:	49 19       	lddpc	r9,80004938 <fat_clear_cluster+0x58>
800048f6:	72 0a       	ld.w	r10,r9[0x0]
800048f8:	20 1a       	sub	r10,1
800048fa:	10 0a       	add	r10,r8
800048fc:	49 29       	lddpc	r9,80004944 <fat_clear_cluster+0x64>
800048fe:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
80004900:	58 08       	cp.w	r8,0
80004902:	c1 a0       	breq	80004936 <fat_clear_cluster+0x56>
80004904:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
80004906:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
80004908:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000490a:	48 e5       	lddpc	r5,80004940 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000490c:	08 9c       	mov	r12,r4
8000490e:	f0 1f 00 0f 	mcall	80004948 <fat_clear_cluster+0x68>
80004912:	c1 10       	breq	80004934 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
80004914:	58 07       	cp.w	r7,0
80004916:	c0 31       	brne	8000491c <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
80004918:	f0 1f 00 0d 	mcall	8000494c <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
8000491c:	f0 1f 00 0d 	mcall	80004950 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
80004920:	6c 08       	ld.w	r8,r6[0x0]
80004922:	20 18       	sub	r8,1
80004924:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
80004926:	2f f7       	sub	r7,-1
80004928:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000492a:	0b 98       	ld.ub	r8,r5[0x1]
8000492c:	ee 08 18 00 	cp.b	r8,r7
80004930:	ce e1       	brne	8000490c <fat_clear_cluster+0x2c>
80004932:	c0 28       	rjmp	80004936 <fat_clear_cluster+0x56>
80004934:	d8 2a       	popm	r4-r7,pc,r12=0
80004936:	da 2a       	popm	r4-r7,pc,r12=1
80004938:	00 00       	add	r0,r0
8000493a:	09 00       	ld.w	r0,r4++
8000493c:	80 00       	ld.sh	r0,r0[0x0]
8000493e:	3f ec       	mov	r12,-2
80004940:	00 00       	add	r0,r0
80004942:	08 58       	eor	r8,r4
80004944:	00 00       	add	r0,r0
80004946:	06 14       	sub	r4,r3
80004948:	80 00       	ld.sh	r0,r0[0x0]
8000494a:	3c 94       	mov	r4,-55
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	3c 7c       	mov	r12,-57
80004950:	80 00       	ld.sh	r0,r0[0x0]
80004952:	39 cc       	mov	r12,-100

80004954 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
80004954:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004958:	49 68       	lddpc	r8,800049b0 <fat_update_fat2+0x5c>
8000495a:	70 08       	ld.w	r8,r8[0x0]
8000495c:	49 69       	lddpc	r9,800049b4 <fat_update_fat2+0x60>
8000495e:	72 09       	ld.w	r9,r9[0x0]
80004960:	12 38       	cp.w	r8,r9
80004962:	e0 8b 00 25 	brhi	800049ac <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004966:	49 55       	lddpc	r5,800049b8 <fat_update_fat2+0x64>
80004968:	49 57       	lddpc	r7,800049bc <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
8000496a:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
8000496c:	49 16       	lddpc	r6,800049b0 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000496e:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80004970:	49 14       	lddpc	r4,800049b4 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
80004972:	6e 49       	ld.w	r9,r7[0x10]
80004974:	12 08       	add	r8,r9
80004976:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
80004978:	06 9c       	mov	r12,r3
8000497a:	f0 1f 00 12 	mcall	800049c0 <fat_update_fat2+0x6c>
8000497e:	c1 50       	breq	800049a8 <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80004980:	6e 19       	ld.w	r9,r7[0x4]
80004982:	6e 48       	ld.w	r8,r7[0x10]
80004984:	f2 08 00 08 	add	r8,r9,r8
80004988:	6c 09       	ld.w	r9,r6[0x0]
8000498a:	12 08       	add	r8,r9
8000498c:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
8000498e:	04 9c       	mov	r12,r2
80004990:	f0 1f 00 0c 	mcall	800049c0 <fat_update_fat2+0x6c>
80004994:	c0 a0       	breq	800049a8 <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
80004996:	f0 1f 00 0c 	mcall	800049c4 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000499a:	6c 08       	ld.w	r8,r6[0x0]
8000499c:	2f f8       	sub	r8,-1
8000499e:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800049a0:	68 09       	ld.w	r9,r4[0x0]
800049a2:	10 39       	cp.w	r9,r8
800049a4:	ce 72       	brcc	80004972 <fat_update_fat2+0x1e>
800049a6:	c0 38       	rjmp	800049ac <fat_update_fat2+0x58>
800049a8:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800049ac:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
800049b0:	00 00       	add	r0,r0
800049b2:	08 8c       	andn	r12,r4
800049b4:	00 00       	add	r0,r0
800049b6:	06 54       	eor	r4,r3
800049b8:	00 00       	add	r0,r0
800049ba:	06 14       	sub	r4,r3
800049bc:	00 00       	add	r0,r0
800049be:	08 58       	eor	r8,r4
800049c0:	80 00       	ld.sh	r0,r0[0x0]
800049c2:	3c 94       	mov	r4,-55
800049c4:	80 00       	ld.sh	r0,r0[0x0]
800049c6:	39 cc       	mov	r12,-100

800049c8 <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
{
800049c8:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
800049ca:	f0 1f 00 21 	mcall	80004a4c <fat_initialize_dir+0x84>
800049ce:	c3 e0       	breq	80004a4a <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
800049d0:	f0 1f 00 20 	mcall	80004a50 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
800049d4:	4a 0b       	lddpc	r11,80004a54 <fat_initialize_dir+0x8c>
800049d6:	16 98       	mov	r8,r11
800049d8:	32 e9       	mov	r9,46
800049da:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
800049dc:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
800049e0:	32 09       	mov	r9,32
800049e2:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
800049e4:	14 38       	cp.w	r8,r10
800049e6:	cf e1       	brne	800049e2 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
800049e8:	49 b8       	lddpc	r8,80004a54 <fat_initialize_dir+0x8c>
800049ea:	31 09       	mov	r9,16
800049ec:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
800049f0:	49 a9       	lddpc	r9,80004a58 <fat_initialize_dir+0x90>
800049f2:	2f c9       	sub	r9,-4
800049f4:	13 ba       	ld.ub	r10,r9[0x3]
800049f6:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
800049fa:	13 aa       	ld.ub	r10,r9[0x2]
800049fc:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80004a00:	13 9a       	ld.ub	r10,r9[0x1]
80004a02:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
80004a06:	13 89       	ld.ub	r9,r9[0x0]
80004a08:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80004a0c:	32 e9       	mov	r9,46
80004a0e:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80004a12:	f1 69 00 21 	st.b	r8[33],r9
80004a16:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
bool  fat_initialize_dir( void )
80004a18:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
80004a1c:	32 09       	mov	r9,32
80004a1e:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
80004a20:	14 38       	cp.w	r8,r10
80004a22:	cf e1       	brne	80004a1e <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
80004a24:	48 c8       	lddpc	r8,80004a54 <fat_initialize_dir+0x8c>
80004a26:	31 09       	mov	r9,16
80004a28:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
80004a2c:	48 c9       	lddpc	r9,80004a5c <fat_initialize_dir+0x94>
80004a2e:	2e 09       	sub	r9,-32
80004a30:	13 ba       	ld.ub	r10,r9[0x3]
80004a32:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
80004a36:	13 aa       	ld.ub	r10,r9[0x2]
80004a38:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
80004a3c:	13 9a       	ld.ub	r10,r9[0x1]
80004a3e:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
80004a42:	13 89       	ld.ub	r9,r9[0x0]
80004a44:	f1 69 00 35 	st.b	r8[53],r9
80004a48:	30 1c       	mov	r12,1

   return true;
}
80004a4a:	d8 02       	popm	pc
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	48 e0       	lddpc	r0,80004a84 <fat_write_MBR+0x24>
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	39 cc       	mov	r12,-100
80004a54:	00 00       	add	r0,r0
80004a56:	06 58       	eor	r8,r3
80004a58:	00 00       	add	r0,r0
80004a5a:	06 18       	sub	r8,r3
80004a5c:	00 00       	add	r0,r0
80004a5e:	08 58       	eor	r8,r4

80004a60 <fat_write_MBR>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_MBR( void )
{
80004a60:	d4 01       	pushm	lr
   uint8_t u8_i = 0;

   // Init and reset the internal cache at the beginning of memory
   fs_gu32_addrsector = 0;
80004a62:	30 0c       	mov	r12,0
80004a64:	4a b8       	lddpc	r8,80004b10 <fat_write_MBR+0xb0>
80004a66:	91 0c       	st.w	r8[0x0],r12
   if( !fat_cache_read_sector( false ))
80004a68:	f0 1f 00 2b 	mcall	80004b14 <fat_write_MBR+0xb4>
80004a6c:	c4 e0       	breq	80004b08 <fat_write_MBR+0xa8>
      return false;
   fat_cache_mark_sector_as_dirty();
80004a6e:	f0 1f 00 2b 	mcall	80004b18 <fat_write_MBR+0xb8>
   fat_cache_clear();
80004a72:	f0 1f 00 2b 	mcall	80004b1c <fat_write_MBR+0xbc>

   // MBR signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80004a76:	4a b8       	lddpc	r8,80004b20 <fat_write_MBR+0xc0>
80004a78:	35 59       	mov	r9,85
80004a7a:	f1 69 01 fe 	st.b	r8[510],r9
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80004a7e:	3a a9       	mov	r9,-86
80004a80:	f1 69 01 ff 	st.b	r8[511],r9

   // Write the partition entry in the MBR
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +0] = FS_PART_NO_BOOTABLE;   // Active partition
80004a84:	30 09       	mov	r9,0
80004a86:	f1 69 01 be 	st.b	r8[446],r9
   // Remark: cylinder and header start to 0, and sector value start to 1
   //fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +1] = 0;                   // The head (0) where the partition starts
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +2] = 2;                     // The sector (2=next to MBR) and the cylinder (0) where the partition starts
80004a8a:	30 29       	mov	r9,2
80004a8c:	f1 69 01 c0 	st.b	r8[448],r9
   //fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +3] = 0;

   // Write patition type
   if( Is_fat32 )
80004a90:	4a 58       	lddpc	r8,80004b24 <fat_write_MBR+0xc4>
80004a92:	11 88       	ld.ub	r8,r8[0x0]
80004a94:	30 39       	mov	r9,3
80004a96:	f2 08 18 00 	cp.b	r8,r9
80004a9a:	c3 80       	breq	80004b0a <fat_write_MBR+0xaa>
   {  // FAT 32
      u8_i = FS_PART_TYPE_FAT32;
   }
   if( Is_fat16 )
80004a9c:	30 29       	mov	r9,2
80004a9e:	f2 08 18 00 	cp.b	r8,r9
80004aa2:	c0 a1       	brne	80004ab6 <fat_write_MBR+0x56>
   {  // FAT 16
      if( fs_s_u32_size_partition < (32L*1024*(1024/FS_512B)) )
80004aa4:	4a 18       	lddpc	r8,80004b28 <fat_write_MBR+0xc8>
80004aa6:	70 09       	ld.w	r9,r8[0x0]
80004aa8:	e0 49 ff ff 	cp.w	r9,65535
80004aac:	f9 b9 0b 06 	movhi	r9,6
80004ab0:	f9 b9 08 04 	movls	r9,4
80004ab4:	c0 58       	rjmp	80004abe <fat_write_MBR+0x5e>
         u8_i = FS_PART_TYPE_FAT16_INF32M;
      }else{
         u8_i = FS_PART_TYPE_FAT16_SUP32M;
      }
   }
   if( Is_fat12 )
80004ab6:	30 19       	mov	r9,1
80004ab8:	f0 09 18 00 	cp.b	r9,r8
80004abc:	5f 09       	sreq	r9
   {  // FAT 12
      u8_i = FS_PART_TYPE_FAT12;
   }

   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +4] = u8_i;
80004abe:	49 98       	lddpc	r8,80004b20 <fat_write_MBR+0xc0>
80004ac0:	f1 69 01 c2 	st.b	r8[450],r9

   // The head where the partitions ends
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +5] = (LSB1(fs_s_u32_size_partition)<<2) + (LSB0(fs_s_u32_size_partition)>>6);
80004ac4:	49 99       	lddpc	r9,80004b28 <fat_write_MBR+0xc8>
80004ac6:	13 aa       	ld.ub	r10,r9[0x2]
80004ac8:	13 bb       	ld.ub	r11,r9[0x3]
80004aca:	f6 0c 16 06 	lsr	r12,r11,0x6
80004ace:	f8 0a 00 2c 	add	r12,r12,r10<<0x2
80004ad2:	f1 6c 01 c3 	st.b	r8[451],r12
   // The sector and the cylinder where the partition ends
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +6] = (LSB1(fs_s_u32_size_partition)&0xC0) + (LSB0(fs_s_u32_size_partition)&0x3F);
80004ad6:	fd db c0 06 	bfextu	lr,r11,0x0,0x6
80004ada:	14 9c       	mov	r12,r10
80004adc:	e0 1c ff c0 	andl	r12,0xffc0
80004ae0:	fc 0c 00 0c 	add	r12,lr,r12
80004ae4:	f1 6c 01 c4 	st.b	r8[452],r12
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0) +7] = LSB2(fs_s_u32_size_partition);
80004ae8:	13 9c       	ld.ub	r12,r9[0x1]
80004aea:	f1 6c 01 c5 	st.b	r8[453],r12

   // Write partition position (in sectors) at offset 8
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+ 8] = 0x01;
80004aee:	30 1e       	mov	lr,1
80004af0:	f1 6e 01 c6 	st.b	r8[454],lr
   //fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+ 9] = 0x00;
   //fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+10] = 0x00;
   //fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+11] = 0x00;
   // Write the number of sector in partition (= size - one sector MBR = last LBA, return by read_capacity)
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+12] = LSB0(fs_s_u32_size_partition);
80004af4:	f1 6b 01 ca 	st.b	r8[458],r11
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+13] = LSB1(fs_s_u32_size_partition);
80004af8:	f1 6a 01 cb 	st.b	r8[459],r10
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+14] = LSB2(fs_s_u32_size_partition);
80004afc:	f1 6c 01 cc 	st.b	r8[460],r12
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+15] = LSB3(fs_s_u32_size_partition);
80004b00:	13 89       	ld.ub	r9,r9[0x0]
80004b02:	f1 69 01 cd 	st.b	r8[461],r9
80004b06:	30 1c       	mov	r12,1

   return true;
}
80004b08:	d8 02       	popm	pc
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+12] = LSB0(fs_s_u32_size_partition);
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+13] = LSB1(fs_s_u32_size_partition);
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+14] = LSB2(fs_s_u32_size_partition);
   fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(0)+15] = LSB3(fs_s_u32_size_partition);

   return true;
80004b0a:	30 b9       	mov	r9,11
80004b0c:	cd 9b       	rjmp	80004abe <fat_write_MBR+0x5e>
80004b0e:	00 00       	add	r0,r0
80004b10:	00 00       	add	r0,r0
80004b12:	06 14       	sub	r4,r3
80004b14:	80 00       	ld.sh	r0,r0[0x0]
80004b16:	3c 94       	mov	r4,-55
80004b18:	80 00       	ld.sh	r0,r0[0x0]
80004b1a:	39 cc       	mov	r12,-100
80004b1c:	80 00       	ld.sh	r0,r0[0x0]
80004b1e:	3c 7c       	mov	r12,-57
80004b20:	00 00       	add	r0,r0
80004b22:	06 58       	eor	r8,r3
80004b24:	00 00       	add	r0,r0
80004b26:	08 a4       	st.w	r4++,r4
80004b28:	00 00       	add	r0,r0
80004b2a:	09 08       	ld.w	r8,r4++

80004b2c <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
80004b2c:	d4 31       	pushm	r0-r7,lr
80004b2e:	20 5d       	sub	sp,20
80004b30:	18 97       	mov	r7,r12
80004b32:	50 3b       	stdsp	sp[0xc],r11
80004b34:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
80004b36:	f0 1f 00 30 	mcall	80004bf4 <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
80004b3a:	f0 1f 00 30 	mcall	80004bf8 <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
80004b3e:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
80004b40:	30 01       	mov	r1,0
80004b42:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80004b44:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
80004b46:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
80004b48:	30 c6       	mov	r6,12
80004b4a:	31 ab       	mov	r11,26
80004b4c:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80004b4e:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
80004b50:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80004b52:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80004b54:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
80004b56:	f2 08 18 00 	cp.b	r8,r9
80004b5a:	c0 31       	brne	80004b60 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
80004b5c:	b8 83       	st.b	r12[0x0],r3
         continue;
80004b5e:	c4 58       	rjmp	80004be8 <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80004b60:	ec 08 18 00 	cp.b	r8,r6
80004b64:	5f 00       	sreq	r0
80004b66:	f6 08 18 00 	cp.b	r8,r11
80004b6a:	5f 04       	sreq	r4
80004b6c:	08 40       	or	r0,r4
80004b6e:	00 94       	mov	r4,r0
80004b70:	f4 00 18 00 	cp.b	r0,r10
80004b74:	c3 21       	brne	80004bd8 <fat_create_long_name_entry+0xac>
80004b76:	ea 08 18 00 	cp.b	r8,r5
80004b7a:	c3 70       	breq	80004be8 <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80004b7c:	e4 08 18 00 	cp.b	r8,r2
80004b80:	c0 41       	brne	80004b88 <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
80004b82:	40 34       	lddsp	r4,sp[0xc]
80004b84:	b8 84       	st.b	r12[0x0],r4
         continue;
80004b86:	c3 18       	rjmp	80004be8 <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
80004b88:	40 01       	lddsp	r1,sp[0x0]
80004b8a:	58 01       	cp.w	r1,0
80004b8c:	c2 41       	brne	80004bd4 <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80004b8e:	0f 84       	ld.ub	r4,r7[0x0]
80004b90:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
80004b94:	35 c1       	mov	r1,92
80004b96:	e2 04 19 00 	cp.h	r4,r1
80004b9a:	5f 00       	sreq	r0
80004b9c:	50 20       	stdsp	sp[0x8],r0
80004b9e:	32 f0       	mov	r0,47
80004ba0:	e0 04 19 00 	cp.h	r4,r0
80004ba4:	5f 01       	sreq	r1
80004ba6:	40 20       	lddsp	r0,sp[0x8]
80004ba8:	02 40       	or	r0,r1
80004baa:	f4 00 18 00 	cp.b	r0,r10
80004bae:	c0 50       	breq	80004bb8 <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80004bb0:	30 04       	mov	r4,0
80004bb2:	fb 54 00 12 	st.h	sp[18],r4
80004bb6:	c0 38       	rjmp	80004bbc <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
80004bb8:	58 04       	cp.w	r4,0
80004bba:	c0 31       	brne	80004bc0 <fat_create_long_name_entry+0x94>
80004bbc:	30 14       	mov	r4,1
80004bbe:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
80004bc0:	fa c4 ff ee 	sub	r4,sp,-18
80004bc4:	09 90       	ld.ub	r0,r4[0x1]
80004bc6:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
80004bc8:	09 84       	ld.ub	r4,r4[0x0]
80004bca:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
80004bcc:	2f f8       	sub	r8,-1
80004bce:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
80004bd0:	2f f7       	sub	r7,-1
80004bd2:	c0 38       	rjmp	80004bd8 <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
80004bd4:	3f f1       	mov	r1,-1
80004bd6:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80004bd8:	2f f8       	sub	r8,-1
80004bda:	5c 58       	castu.b	r8
80004bdc:	fc 08 18 00 	cp.b	r8,lr
80004be0:	e0 8b 00 08 	brhi	80004bf0 <fat_create_long_name_entry+0xc4>
80004be4:	2f fc       	sub	r12,-1
80004be6:	cb 8b       	rjmp	80004b56 <fat_create_long_name_entry+0x2a>
80004be8:	2f f8       	sub	r8,-1
80004bea:	5c 58       	castu.b	r8
80004bec:	2f fc       	sub	r12,-1
80004bee:	cb 4b       	rjmp	80004b56 <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
80004bf0:	2f bd       	sub	sp,-20
80004bf2:	d8 32       	popm	r0-r7,pc
80004bf4:	80 00       	ld.sh	r0,r0[0x0]
80004bf6:	39 cc       	mov	r12,-100
80004bf8:	80 00       	ld.sh	r0,r0[0x0]
80004bfa:	36 5c       	mov	r12,101

80004bfc <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_delete_file( bool b_cluster_list )
{
80004bfc:	d4 31       	pushm	r0-r7,lr
80004bfe:	18 90       	mov	r0,r12
80004c00:	30 04       	mov	r4,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80004c02:	30 f5       	mov	r5,15
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80004c04:	3e 53       	mov	r3,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80004c06:	49 56       	lddpc	r6,80004c58 <fat_delete_file+0x5c>
80004c08:	30 11       	mov	r1,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004c0a:	f0 1f 00 15 	mcall	80004c5c <fat_delete_file+0x60>
80004c0e:	c2 40       	breq	80004c56 <fat_delete_file+0x5a>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
80004c10:	f0 1f 00 14 	mcall	80004c60 <fat_delete_file+0x64>
      u8_tmp = ptr_entry[0];
80004c14:	19 82       	ld.ub	r2,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
80004c16:	f8 c7 ff f5 	sub	r7,r12,-11
80004c1a:	0f 88       	ld.ub	r8,r7[0x0]
80004c1c:	ea 08 18 00 	cp.b	r8,r5
80004c20:	c0 30       	breq	80004c26 <fat_delete_file+0x2a>
80004c22:	58 04       	cp.w	r4,0
80004c24:	c1 01       	brne	80004c44 <fat_delete_file+0x48>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
80004c26:	b8 83       	st.b	r12[0x0],r3
      fat_cache_mark_sector_as_dirty();
80004c28:	f0 1f 00 0f 	mcall	80004c64 <fat_delete_file+0x68>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
80004c2c:	0f 88       	ld.ub	r8,r7[0x0]
80004c2e:	ea 08 18 00 	cp.b	r8,r5
80004c32:	c0 41       	brne	80004c3a <fat_delete_file+0x3e>
80004c34:	e2 12 00 40 	andl	r2,0x40,COH
80004c38:	c0 61       	brne	80004c44 <fat_delete_file+0x48>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80004c3a:	8c 18       	ld.sh	r8,r6[0x2]
80004c3c:	20 18       	sub	r8,1
80004c3e:	ac 18       	st.h	r6[0x2],r8
80004c40:	02 94       	mov	r4,r1
   }  // end of while(1)
80004c42:	ce 4b       	rjmp	80004c0a <fat_delete_file+0xe>

   if( b_cluster_list )
80004c44:	58 00       	cp.w	r0,0
80004c46:	c0 21       	brne	80004c4a <fat_delete_file+0x4e>
80004c48:	da 3a       	popm	r0-r7,pc,r12=1
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
80004c4a:	30 09       	mov	r9,0
80004c4c:	48 78       	lddpc	r8,80004c68 <fat_delete_file+0x6c>
80004c4e:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
80004c50:	30 3c       	mov	r12,3
80004c52:	f0 1f 00 07 	mcall	80004c6c <fat_delete_file+0x70>
         return false;
   }

   return true;
}
80004c56:	d8 32       	popm	r0-r7,pc
80004c58:	00 00       	add	r0,r0
80004c5a:	08 a4       	st.w	r4++,r4
80004c5c:	80 00       	ld.sh	r0,r0[0x0]
80004c5e:	42 bc       	lddsp	r12,sp[0xac]
80004c60:	80 00       	ld.sh	r0,r0[0x0]
80004c62:	36 5c       	mov	r12,101
80004c64:	80 00       	ld.sh	r0,r0[0x0]
80004c66:	39 cc       	mov	r12,-100
80004c68:	00 00       	add	r0,r0
80004c6a:	06 18       	sub	r8,r3
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	43 40       	lddsp	r0,sp[0xd0]

80004c70 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80004c70:	eb cd 40 fc 	pushm	r2-r7,lr
80004c74:	20 8d       	sub	sp,32
80004c76:	30 06       	mov	r6,0
80004c78:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004c7a:	4a 95       	lddpc	r5,80004d1c <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80004c7c:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004c7e:	1a 93       	mov	r3,sp
80004c80:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80004c82:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004c84:	f0 1f 00 27 	mcall	80004d20 <fat_garbage_collector_entry+0xb0>
80004c88:	c0 81       	brne	80004c98 <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004c8a:	4a 78       	lddpc	r8,80004d24 <fat_garbage_collector_entry+0xb4>
80004c8c:	11 89       	ld.ub	r9,r8[0x0]
80004c8e:	31 a8       	mov	r8,26
80004c90:	f0 09 18 00 	cp.b	r9,r8
80004c94:	c3 d1       	brne	80004d0e <fat_garbage_collector_entry+0x9e>
80004c96:	c0 68       	rjmp	80004ca2 <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80004c98:	f0 1f 00 24 	mcall	80004d28 <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
80004c9c:	19 88       	ld.ub	r8,r12[0x0]
80004c9e:	58 08       	cp.w	r8,0
80004ca0:	c1 b1       	brne	80004cd6 <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80004ca2:	49 f8       	lddpc	r8,80004d1c <fat_garbage_collector_entry+0xac>
80004ca4:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80004ca6:	ec 07 19 00 	cp.h	r7,r6
80004caa:	c3 40       	breq	80004d12 <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004cac:	32 05       	mov	r5,32
80004cae:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80004cb0:	49 b6       	lddpc	r6,80004d1c <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80004cb2:	f0 1f 00 1c 	mcall	80004d20 <fat_garbage_collector_entry+0xb0>
80004cb6:	c2 c0       	breq	80004d0e <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80004cb8:	f0 1f 00 1c 	mcall	80004d28 <fat_garbage_collector_entry+0xb8>
80004cbc:	0a 9a       	mov	r10,r5
80004cbe:	08 9b       	mov	r11,r4
80004cc0:	f0 1f 00 1b 	mcall	80004d2c <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
80004cc4:	f0 1f 00 1b 	mcall	80004d30 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80004cc8:	8c 18       	ld.sh	r8,r6[0x2]
80004cca:	2f f8       	sub	r8,-1
80004ccc:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80004cce:	f0 07 19 00 	cp.h	r7,r8
80004cd2:	cf 01       	brne	80004cb2 <fat_garbage_collector_entry+0x42>
80004cd4:	c1 f8       	rjmp	80004d12 <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80004cd6:	e8 08 18 00 	cp.b	r8,r4
80004cda:	c1 70       	breq	80004d08 <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
80004cdc:	ec 07 19 00 	cp.h	r7,r6
80004ce0:	c1 20       	breq	80004d04 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80004ce2:	04 9a       	mov	r10,r2
80004ce4:	18 9b       	mov	r11,r12
80004ce6:	1a 9c       	mov	r12,sp
80004ce8:	f0 1f 00 13 	mcall	80004d34 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80004cec:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80004cee:	f0 1f 00 0d 	mcall	80004d20 <fat_garbage_collector_entry+0xb0>
80004cf2:	c0 e0       	breq	80004d0e <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80004cf4:	f0 1f 00 0d 	mcall	80004d28 <fat_garbage_collector_entry+0xb8>
80004cf8:	04 9a       	mov	r10,r2
80004cfa:	1a 9b       	mov	r11,sp
80004cfc:	f0 1f 00 0e 	mcall	80004d34 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
80004d00:	f0 1f 00 0c 	mcall	80004d30 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
80004d04:	2f f6       	sub	r6,-1
80004d06:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
80004d08:	2f f7       	sub	r7,-1
80004d0a:	5c 87       	casts.h	r7
   }  // end of while(1)
80004d0c:	cb bb       	rjmp	80004c82 <fat_garbage_collector_entry+0x12>
80004d0e:	30 0c       	mov	r12,0
80004d10:	c0 28       	rjmp	80004d14 <fat_garbage_collector_entry+0xa4>
80004d12:	30 1c       	mov	r12,1
}
80004d14:	2f 8d       	sub	sp,-32
80004d16:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80004d1a:	00 00       	add	r0,r0
80004d1c:	00 00       	add	r0,r0
80004d1e:	08 a4       	st.w	r4++,r4
80004d20:	80 00       	ld.sh	r0,r0[0x0]
80004d22:	42 bc       	lddsp	r12,sp[0xac]
80004d24:	00 00       	add	r0,r0
80004d26:	08 a8       	st.w	r4++,r8
80004d28:	80 00       	ld.sh	r0,r0[0x0]
80004d2a:	36 5c       	mov	r12,101
80004d2c:	80 00       	ld.sh	r0,r0[0x0]
80004d2e:	86 1a       	ld.sh	r10,r3[0x2]
80004d30:	80 00       	ld.sh	r0,r0[0x0]
80004d32:	39 cc       	mov	r12,-100
80004d34:	80 00       	ld.sh	r0,r0[0x0]
80004d36:	84 d2       	ld.uh	r2,r2[0xa]

80004d38 <fat_initialize_fat>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_initialize_fat( void )
{
80004d38:	d4 01       	pushm	lr
   // Init and reset the internal cache at the memory beginning
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat;
80004d3a:	49 d8       	lddpc	r8,80004dac <fat_initialize_fat+0x74>
80004d3c:	70 49       	ld.w	r9,r8[0x10]
80004d3e:	49 d8       	lddpc	r8,80004db0 <fat_initialize_fat+0x78>
80004d40:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( false ))
80004d42:	30 0c       	mov	r12,0
80004d44:	f0 1f 00 1c 	mcall	80004db4 <fat_initialize_fat+0x7c>
80004d48:	c3 10       	breq	80004daa <fat_initialize_fat+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80004d4a:	f0 1f 00 1c 	mcall	80004db8 <fat_initialize_fat+0x80>

   if( Is_fat32 )
80004d4e:	49 c8       	lddpc	r8,80004dbc <fat_initialize_fat+0x84>
80004d50:	11 89       	ld.ub	r9,r8[0x0]
80004d52:	30 38       	mov	r8,3
80004d54:	f0 09 18 00 	cp.b	r9,r8
80004d58:	c0 61       	brne	80004d64 <fat_initialize_fat+0x2c>
   {
      memcpy_code2ram( fs_g_sector, const_header_fat32, sizeof(const_header_fat32) );
80004d5a:	30 ca       	mov	r10,12
80004d5c:	49 9b       	lddpc	r11,80004dc0 <fat_initialize_fat+0x88>
80004d5e:	49 ac       	lddpc	r12,80004dc4 <fat_initialize_fat+0x8c>
80004d60:	f0 1f 00 1a 	mcall	80004dc8 <fat_initialize_fat+0x90>
   }
   if( Is_fat16 )
80004d64:	49 68       	lddpc	r8,80004dbc <fat_initialize_fat+0x84>
80004d66:	11 89       	ld.ub	r9,r8[0x0]
80004d68:	30 28       	mov	r8,2
80004d6a:	f0 09 18 00 	cp.b	r9,r8
80004d6e:	c0 61       	brne	80004d7a <fat_initialize_fat+0x42>
   {
      memcpy_code2ram( fs_g_sector, const_header_fat16, sizeof(const_header_fat16) );
80004d70:	30 4a       	mov	r10,4
80004d72:	49 7b       	lddpc	r11,80004dcc <fat_initialize_fat+0x94>
80004d74:	49 4c       	lddpc	r12,80004dc4 <fat_initialize_fat+0x8c>
80004d76:	f0 1f 00 15 	mcall	80004dc8 <fat_initialize_fat+0x90>
   }
   if( Is_fat12 )
80004d7a:	49 18       	lddpc	r8,80004dbc <fat_initialize_fat+0x84>
80004d7c:	11 89       	ld.ub	r9,r8[0x0]
80004d7e:	30 18       	mov	r8,1
80004d80:	f0 09 18 00 	cp.b	r9,r8
80004d84:	c0 61       	brne	80004d90 <fat_initialize_fat+0x58>
   {
      memcpy_code2ram( fs_g_sector, const_header_fat12, sizeof(const_header_fat12) );
80004d86:	30 3a       	mov	r10,3
80004d88:	49 2b       	lddpc	r11,80004dd0 <fat_initialize_fat+0x98>
80004d8a:	48 fc       	lddpc	r12,80004dc4 <fat_initialize_fat+0x8c>
80004d8c:	f0 1f 00 0f 	mcall	80004dc8 <fat_initialize_fat+0x90>
   }

   // Copy the first sector of FAT 1 in the first sector of FAT 2
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_nav.u32_fat_size;
80004d90:	48 78       	lddpc	r8,80004dac <fat_initialize_fat+0x74>
80004d92:	70 19       	ld.w	r9,r8[0x4]
80004d94:	70 48       	ld.w	r8,r8[0x10]
80004d96:	10 09       	add	r9,r8
80004d98:	48 68       	lddpc	r8,80004db0 <fat_initialize_fat+0x78>
80004d9a:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( false ))
80004d9c:	30 0c       	mov	r12,0
80004d9e:	f0 1f 00 06 	mcall	80004db4 <fat_initialize_fat+0x7c>
80004da2:	c0 40       	breq	80004daa <fat_initialize_fat+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80004da4:	f0 1f 00 05 	mcall	80004db8 <fat_initialize_fat+0x80>
80004da8:	da 0a       	popm	pc,r12=1
   return true;
80004daa:	d8 0a       	popm	pc,r12=0
80004dac:	00 00       	add	r0,r0
80004dae:	08 58       	eor	r8,r4
80004db0:	00 00       	add	r0,r0
80004db2:	06 14       	sub	r4,r3
80004db4:	80 00       	ld.sh	r0,r0[0x0]
80004db6:	3c 94       	mov	r4,-55
80004db8:	80 00       	ld.sh	r0,r0[0x0]
80004dba:	39 cc       	mov	r12,-100
80004dbc:	00 00       	add	r0,r0
80004dbe:	08 a4       	st.w	r4++,r4
80004dc0:	80 00       	ld.sh	r0,r0[0x0]
80004dc2:	8b e4       	st.w	r5[0x38],r4
80004dc4:	00 00       	add	r0,r0
80004dc6:	06 58       	eor	r8,r3
80004dc8:	80 00       	ld.sh	r0,r0[0x0]
80004dca:	84 d2       	ld.uh	r2,r2[0xa]
80004dcc:	80 00       	ld.sh	r0,r0[0x0]
80004dce:	8b e0       	st.w	r5[0x38],r0
80004dd0:	80 00       	ld.sh	r0,r0[0x0]
80004dd2:	8b ac       	st.w	r5[0x28],r12

80004dd4 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
80004dd4:	eb cd 40 c0 	pushm	r6-r7,lr
80004dd8:	20 1d       	sub	sp,4
80004dda:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80004ddc:	49 c8       	lddpc	r8,80004e4c <fat_write_fat32_FSInfo+0x78>
80004dde:	90 c9       	ld.uh	r9,r8[0x8]
80004de0:	70 4a       	ld.w	r10,r8[0x10]
80004de2:	49 c8       	lddpc	r8,80004e50 <fat_write_fat32_FSInfo+0x7c>
80004de4:	12 1a       	sub	r10,r9
80004de6:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
80004de8:	30 0c       	mov	r12,0
80004dea:	f0 1f 00 1b 	mcall	80004e54 <fat_write_fat32_FSInfo+0x80>
80004dee:	c2 c0       	breq	80004e46 <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80004df0:	f0 1f 00 1a 	mcall	80004e58 <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
80004df4:	f0 1f 00 1a 	mcall	80004e5c <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
80004df8:	49 a7       	lddpc	r7,80004e60 <fat_write_fat32_FSInfo+0x8c>
80004dfa:	30 46       	mov	r6,4
80004dfc:	0c 9a       	mov	r10,r6
80004dfe:	49 ab       	lddpc	r11,80004e64 <fat_write_fat32_FSInfo+0x90>
80004e00:	0e 9c       	mov	r12,r7
80004e02:	f0 1f 00 1a 	mcall	80004e68 <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
80004e06:	0c 9a       	mov	r10,r6
80004e08:	49 9b       	lddpc	r11,80004e6c <fat_write_fat32_FSInfo+0x98>
80004e0a:	ee cc fe 1c 	sub	r12,r7,-484
80004e0e:	f0 1f 00 17 	mcall	80004e68 <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
80004e12:	1b b9       	ld.ub	r9,sp[0x3]
80004e14:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80004e18:	1b a9       	ld.ub	r9,sp[0x2]
80004e1a:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80004e1e:	1b 99       	ld.ub	r9,sp[0x1]
80004e20:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80004e24:	1b 88       	ld.ub	r8,sp[0x0]
80004e26:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80004e2a:	0c 9a       	mov	r10,r6
80004e2c:	e0 6b 00 ff 	mov	r11,255
80004e30:	ee cc fe 14 	sub	r12,r7,-492
80004e34:	f0 1f 00 0f 	mcall	80004e70 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80004e38:	35 58       	mov	r8,85
80004e3a:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80004e3e:	3a a8       	mov	r8,-86
80004e40:	ef 68 01 ff 	st.b	r7[511],r8
80004e44:	30 1c       	mov	r12,1
   return true;
}
80004e46:	2f fd       	sub	sp,-4
80004e48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004e4c:	00 00       	add	r0,r0
80004e4e:	08 58       	eor	r8,r4
80004e50:	00 00       	add	r0,r0
80004e52:	06 14       	sub	r4,r3
80004e54:	80 00       	ld.sh	r0,r0[0x0]
80004e56:	3c 94       	mov	r4,-55
80004e58:	80 00       	ld.sh	r0,r0[0x0]
80004e5a:	39 cc       	mov	r12,-100
80004e5c:	80 00       	ld.sh	r0,r0[0x0]
80004e5e:	3c 7c       	mov	r12,-57
80004e60:	00 00       	add	r0,r0
80004e62:	06 58       	eor	r8,r3
80004e64:	80 00       	ld.sh	r0,r0[0x0]
80004e66:	8b 20       	st.w	r5[0x8],r0
80004e68:	80 00       	ld.sh	r0,r0[0x0]
80004e6a:	84 d2       	ld.uh	r2,r2[0xa]
80004e6c:	80 00       	ld.sh	r0,r0[0x0]
80004e6e:	8c 14       	ld.sh	r4,r6[0x2]
80004e70:	80 00       	ld.sh	r0,r0[0x0]
80004e72:	86 1a       	ld.sh	r10,r3[0x2]

80004e74 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remainning (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
80004e74:	d4 31       	pushm	r0-r7,lr
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow proceudre but scan all FAT
   bool b_quick_find = true;

   if( Is_fat32 )
80004e76:	4c 78       	lddpc	r8,80004f90 <fat_allocfreespace+0x11c>
80004e78:	11 89       	ld.ub	r9,r8[0x0]
80004e7a:	30 38       	mov	r8,3
80004e7c:	f0 09 18 00 	cp.b	r9,r8
80004e80:	c0 61       	brne	80004e8c <fat_allocfreespace+0x18>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004e82:	3f fc       	mov	r12,-1
80004e84:	f0 1f 00 44 	mcall	80004f94 <fat_allocfreespace+0x120>
80004e88:	e0 80 00 83 	breq	80004f8e <fat_allocfreespace+0x11a>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
80004e8c:	4c 31       	lddpc	r1,80004f98 <fat_allocfreespace+0x124>
80004e8e:	03 89       	ld.ub	r9,r1[0x0]
80004e90:	3f f8       	mov	r8,-1
80004e92:	f0 09 18 00 	cp.b	r9,r8
80004e96:	c0 61       	brne	80004ea2 <fat_allocfreespace+0x2e>
80004e98:	30 10       	mov	r0,1
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80004e9a:	30 29       	mov	r9,2
80004e9c:	4c 08       	lddpc	r8,80004f9c <fat_allocfreespace+0x128>
80004e9e:	91 09       	st.w	r8[0x0],r9
80004ea0:	c0 78       	rjmp	80004eae <fat_allocfreespace+0x3a>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
80004ea2:	4b e8       	lddpc	r8,80004f98 <fat_allocfreespace+0x124>
80004ea4:	70 09       	ld.w	r9,r8[0x0]
80004ea6:	2f f9       	sub	r9,-1
80004ea8:	4b d8       	lddpc	r8,80004f9c <fat_allocfreespace+0x128>
80004eaa:	91 09       	st.w	r8[0x0],r9
80004eac:	30 10       	mov	r0,1
   }

   fat_clear_info_fat_mod();
80004eae:	f0 1f 00 3d 	mcall	80004fa0 <fat_allocfreespace+0x12c>

   // Read ALL FAT1
   for(
80004eb2:	4b b8       	lddpc	r8,80004f9c <fat_allocfreespace+0x128>
80004eb4:	70 09       	ld.w	r9,r8[0x0]
80004eb6:	4b c8       	lddpc	r8,80004fa4 <fat_allocfreespace+0x130>
80004eb8:	70 38       	ld.w	r8,r8[0xc]
80004eba:	10 39       	cp.w	r9,r8
80004ebc:	c5 e2       	brcc	80004f78 <fat_allocfreespace+0x104>
80004ebe:	30 04       	mov	r4,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80004ec0:	08 92       	mov	r2,r4
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004ec2:	4b 77       	lddpc	r7,80004f9c <fat_allocfreespace+0x128>
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004ec4:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004ec6:	4b 55       	lddpc	r5,80004f98 <fat_allocfreespace+0x124>
80004ec8:	4b 76       	lddpc	r6,80004fa4 <fat_allocfreespace+0x130>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80004eca:	04 9c       	mov	r12,r2
80004ecc:	f0 1f 00 37 	mcall	80004fa8 <fat_allocfreespace+0x134>
80004ed0:	c5 f0       	breq	80004f8e <fat_allocfreespace+0x11a>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
80004ed2:	6e 18       	ld.w	r8,r7[0x4]
80004ed4:	58 08       	cp.w	r8,0
80004ed6:	c4 01       	brne	80004f56 <fat_allocfreespace+0xe2>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80004ed8:	6e 08       	ld.w	r8,r7[0x0]
80004eda:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80004edc:	58 04       	cp.w	r4,0
80004ede:	c0 80       	breq	80004eee <fat_allocfreespace+0x7a>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80004ee0:	20 18       	sub	r8,1
80004ee2:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004ee4:	06 9c       	mov	r12,r3
80004ee6:	f0 1f 00 31 	mcall	80004fa8 <fat_allocfreespace+0x134>
80004eea:	c1 e1       	brne	80004f26 <fat_allocfreespace+0xb2>
80004eec:	c5 18       	rjmp	80004f8e <fat_allocfreespace+0x11a>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80004eee:	03 88       	ld.ub	r8,r1[0x0]
80004ef0:	3f f9       	mov	r9,-1
80004ef2:	f2 08 18 00 	cp.b	r8,r9
80004ef6:	c1 60       	breq	80004f22 <fat_allocfreespace+0xae>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80004ef8:	6a 08       	ld.w	r8,r5[0x0]
80004efa:	58 08       	cp.w	r8,0
80004efc:	c0 e1       	brne	80004f18 <fat_allocfreespace+0xa4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80004efe:	4a 59       	lddpc	r9,80004f90 <fat_allocfreespace+0x11c>
80004f00:	13 88       	ld.ub	r8,r9[0x0]
80004f02:	30 39       	mov	r9,3
80004f04:	f2 08 18 00 	cp.b	r8,r9
80004f08:	c0 50       	breq	80004f12 <fat_allocfreespace+0x9e>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80004f0a:	31 b9       	mov	r9,27
80004f0c:	4a 88       	lddpc	r8,80004fac <fat_allocfreespace+0x138>
80004f0e:	b0 89       	st.b	r8[0x0],r9
80004f10:	d8 3a       	popm	r0-r7,pc,r12=0
                     return false;
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004f12:	6c 68       	ld.w	r8,r6[0x18]
80004f14:	8f 08       	st.w	r7[0x0],r8
80004f16:	c0 28       	rjmp	80004f1a <fat_allocfreespace+0xa6>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004f18:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004f1a:	06 9c       	mov	r12,r3
80004f1c:	f0 1f 00 23 	mcall	80004fa8 <fat_allocfreespace+0x134>
80004f20:	c3 70       	breq	80004f8e <fat_allocfreespace+0x11a>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
80004f22:	6e 18       	ld.w	r8,r7[0x4]
80004f24:	8b 08       	st.w	r5[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80004f26:	6e 18       	ld.w	r8,r7[0x4]
80004f28:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80004f2a:	e0 68 ff ff 	mov	r8,65535
80004f2e:	ea 18 0f ff 	orh	r8,0xfff
80004f32:	8f 18       	st.w	r7[0x4],r8
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80004f34:	06 9c       	mov	r12,r3
80004f36:	f0 1f 00 1d 	mcall	80004fa8 <fat_allocfreespace+0x134>
80004f3a:	c2 a0       	breq	80004f8e <fat_allocfreespace+0x11a>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80004f3c:	6a 19       	ld.w	r9,r5[0x4]
80004f3e:	0d 98       	ld.ub	r8,r6[0x1]
80004f40:	10 39       	cp.w	r9,r8
80004f42:	e0 8b 00 06 	brhi	80004f4e <fat_allocfreespace+0xda>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80004f46:	30 09       	mov	r9,0
80004f48:	49 48       	lddpc	r8,80004f98 <fat_allocfreespace+0x124>
80004f4a:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
80004f4c:	c1 e8       	rjmp	80004f88 <fat_allocfreespace+0x114>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004f4e:	10 19       	sub	r9,r8
80004f50:	8b 19       	st.w	r5[0x4],r9
80004f52:	06 94       	mov	r4,r3
80004f54:	c0 98       	rjmp	80004f66 <fat_allocfreespace+0xf2>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80004f56:	58 04       	cp.w	r4,0
80004f58:	c1 81       	brne	80004f88 <fat_allocfreespace+0x114>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
80004f5a:	58 00       	cp.w	r0,0
80004f5c:	c0 50       	breq	80004f66 <fat_allocfreespace+0xf2>
            {
               fs_g_cluster.u32_pos += 500;
80004f5e:	6e 08       	ld.w	r8,r7[0x0]
80004f60:	f0 c8 fe 0c 	sub	r8,r8,-500
80004f64:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
80004f66:	6e 08       	ld.w	r8,r7[0x0]
80004f68:	2f f8       	sub	r8,-1
80004f6a:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
80004f6c:	6c 39       	ld.w	r9,r6[0xc]
80004f6e:	10 39       	cp.w	r9,r8
80004f70:	fe 9b ff ad 	brhi	80004eca <fat_allocfreespace+0x56>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
80004f74:	58 04       	cp.w	r4,0
80004f76:	c0 91       	brne	80004f88 <fat_allocfreespace+0x114>
   {
      if( b_quick_find )
80004f78:	58 00       	cp.w	r0,0
80004f7a:	c0 30       	breq	80004f80 <fat_allocfreespace+0x10c>
80004f7c:	30 00       	mov	r0,0
80004f7e:	c8 eb       	rjmp	80004e9a <fat_allocfreespace+0x26>
      {
         // Retry in normal mode to scann all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
80004f80:	31 b9       	mov	r9,27
80004f82:	48 b8       	lddpc	r8,80004fac <fat_allocfreespace+0x138>
80004f84:	b0 89       	st.b	r8[0x0],r9
80004f86:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;
   }

   return fat_update_fat2();
80004f88:	f0 1f 00 0a 	mcall	80004fb0 <fat_allocfreespace+0x13c>
80004f8c:	d8 32       	popm	r0-r7,pc
80004f8e:	d8 3a       	popm	r0-r7,pc,r12=0
80004f90:	00 00       	add	r0,r0
80004f92:	08 a4       	st.w	r4++,r4
80004f94:	80 00       	ld.sh	r0,r0[0x0]
80004f96:	4d d4       	lddpc	r4,80005108 <fat_write_PBR+0xa4>
80004f98:	00 00       	add	r0,r0
80004f9a:	09 00       	ld.w	r0,r4++
80004f9c:	00 00       	add	r0,r0
80004f9e:	08 f8       	st.b	--r4,r8
80004fa0:	80 00       	ld.sh	r0,r0[0x0]
80004fa2:	48 c8       	lddpc	r8,80004fd0 <fat_alloc_entry_free+0x1c>
80004fa4:	00 00       	add	r0,r0
80004fa6:	08 58       	eor	r8,r4
80004fa8:	80 00       	ld.sh	r0,r0[0x0]
80004faa:	3d a8       	mov	r8,-38
80004fac:	00 00       	add	r0,r0
80004fae:	08 a8       	st.w	r4++,r8
80004fb0:	80 00       	ld.sh	r0,r0[0x0]
80004fb2:	49 54       	lddpc	r4,80005004 <fat_alloc_entry_free+0x50>

80004fb4 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialise the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
80004fb4:	d4 31       	pushm	r0-r7,lr
80004fb6:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004fb8:	30 09       	mov	r9,0
80004fba:	4a 38       	lddpc	r8,80005044 <fat_alloc_entry_free+0x90>
80004fbc:	b0 19       	st.h	r8[0x2],r9
80004fbe:	18 92       	mov	r2,r12
80004fc0:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004fc2:	4a 26       	lddpc	r6,80005048 <fat_alloc_entry_free+0x94>
80004fc4:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80004fc6:	4a 21       	lddpc	r1,8000504c <fat_alloc_entry_free+0x98>
80004fc8:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004fca:	10 97       	mov	r7,r8
80004fcc:	12 90       	mov	r0,r9
80004fce:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80004fd0:	f0 1f 00 20 	mcall	80005050 <fat_alloc_entry_free+0x9c>
80004fd4:	c1 61       	brne	80005000 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80004fd6:	0d 88       	ld.ub	r8,r6[0x0]
80004fd8:	e6 08 18 00 	cp.b	r8,r3
80004fdc:	c3 11       	brne	8000503e <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80004fde:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80004fe0:	f0 1f 00 1d 	mcall	80005054 <fat_alloc_entry_free+0xa0>
80004fe4:	c0 a1       	brne	80004ff8 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80004fe6:	58 04       	cp.w	r4,0
80004fe8:	c2 b1       	brne	8000503e <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
80004fea:	f0 1f 00 1c 	mcall	80005058 <fat_alloc_entry_free+0xa4>
80004fee:	c2 80       	breq	8000503e <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80004ff0:	ae 10       	st.h	r7[0x2],r0
80004ff2:	40 02       	lddsp	r2,sp[0x0]
80004ff4:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
80004ff6:	ce db       	rjmp	80004fd0 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80004ff8:	f0 1f 00 19 	mcall	8000505c <fat_alloc_entry_free+0xa8>
80004ffc:	ce a1       	brne	80004fd0 <fat_alloc_entry_free+0x1c>
80004ffe:	c2 08       	rjmp	8000503e <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005000:	f0 1f 00 18 	mcall	80005060 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
80005004:	19 88       	ld.ub	r8,r12[0x0]
80005006:	30 09       	mov	r9,0
80005008:	f2 08 18 00 	cp.b	r8,r9
8000500c:	c0 61       	brne	80005018 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
8000500e:	20 12       	sub	r2,1
80005010:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
80005012:	c0 31       	brne	80005018 <fat_alloc_entry_free+0x64>
80005014:	30 1c       	mov	r12,1
80005016:	c1 58       	rjmp	80005040 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005018:	8e 18       	ld.sh	r8,r7[0x2]
8000501a:	2f f8       	sub	r8,-1
8000501c:	5c 88       	casts.h	r8
8000501e:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005020:	cd 81       	brne	80004fd0 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
80005022:	58 04       	cp.w	r4,0
80005024:	c0 60       	breq	80005030 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80005026:	31 b9       	mov	r9,27
80005028:	48 88       	lddpc	r8,80005048 <fat_alloc_entry_free+0x94>
8000502a:	b0 89       	st.b	r8[0x0],r9
8000502c:	30 0c       	mov	r12,0
            return false;
8000502e:	c0 98       	rjmp	80005040 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
80005030:	f0 1f 00 0a 	mcall	80005058 <fat_alloc_entry_free+0xa4>
80005034:	c0 50       	breq	8000503e <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005036:	ae 10       	st.h	r7[0x2],r0
80005038:	40 02       	lddsp	r2,sp[0x0]
8000503a:	0a 94       	mov	r4,r5
8000503c:	cc ab       	rjmp	80004fd0 <fat_alloc_entry_free+0x1c>
8000503e:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
80005040:	2f fd       	sub	sp,-4
80005042:	d8 32       	popm	r0-r7,pc
80005044:	00 00       	add	r0,r0
80005046:	08 a4       	st.w	r4++,r4
80005048:	00 00       	add	r0,r0
8000504a:	08 a8       	st.w	r4++,r8
8000504c:	00 00       	add	r0,r0
8000504e:	09 00       	ld.w	r0,r4++
80005050:	80 00       	ld.sh	r0,r0[0x0]
80005052:	42 bc       	lddsp	r12,sp[0xac]
80005054:	80 00       	ld.sh	r0,r0[0x0]
80005056:	4e 74       	lddpc	r4,800051f0 <fat_write_PBR+0x18c>
80005058:	80 00       	ld.sh	r0,r0[0x0]
8000505a:	4c 70       	lddpc	r0,80005174 <fat_write_PBR+0x110>
8000505c:	80 00       	ld.sh	r0,r0[0x0]
8000505e:	48 e0       	lddpc	r0,80005094 <fat_write_PBR+0x30>
80005060:	80 00       	ld.sh	r0,r0[0x0]
80005062:	36 5c       	mov	r12,101

80005064 <fat_write_PBR>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_PBR( bool b_MBR )
{
80005064:	d4 21       	pushm	r4-r7,lr
80005066:	20 1d       	sub	sp,4
   uint16_t u16_tmp;

   //** Init the cache sector with PBR
   if( b_MBR )
80005068:	58 0c       	cp.w	r12,0
8000506a:	c0 50       	breq	80005074 <fat_write_PBR+0x10>
      fs_gu32_addrsector = 1;
8000506c:	30 19       	mov	r9,1
8000506e:	4d 88       	lddpc	r8,800051cc <fat_write_PBR+0x168>
80005070:	91 09       	st.w	r8[0x0],r9
80005072:	c0 48       	rjmp	8000507a <fat_write_PBR+0x16>
   else
      fs_gu32_addrsector = 0;
80005074:	30 09       	mov	r9,0
80005076:	4d 68       	lddpc	r8,800051cc <fat_write_PBR+0x168>
80005078:	91 09       	st.w	r8[0x0],r9

   if( !fat_cache_read_sector( false ))
8000507a:	30 0c       	mov	r12,0
8000507c:	f0 1f 00 55 	mcall	800051d0 <fat_write_PBR+0x16c>
80005080:	e0 80 00 8f 	breq	8000519e <fat_write_PBR+0x13a>
      return false;
   fat_cache_mark_sector_as_dirty();
80005084:	f0 1f 00 54 	mcall	800051d4 <fat_write_PBR+0x170>
   fat_cache_clear();
80005088:	f0 1f 00 54 	mcall	800051d8 <fat_write_PBR+0x174>

   //** WRITE CONSTANTE & VARIABLE FOR FAT and FAT32
   memcpy_code2ram( fs_g_sector, const_header_pbr , sizeof(const_header_pbr) );
8000508c:	4d 47       	lddpc	r7,800051dc <fat_write_PBR+0x178>
8000508e:	31 da       	mov	r10,29
80005090:	4d 4b       	lddpc	r11,800051e0 <fat_write_PBR+0x17c>
80005092:	0e 9c       	mov	r12,r7
80005094:	f0 1f 00 54 	mcall	800051e4 <fat_write_PBR+0x180>
   // PBR signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80005098:	35 58       	mov	r8,85
8000509a:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000509e:	3a a8       	mov	r8,-86
800050a0:	ef 68 01 ff 	st.b	r7[511],r8

   // offset 13-13, Add sector by cluster
   fs_g_sector[13] = fs_g_nav.u8_BPB_SecPerClus;
800050a4:	4d 18       	lddpc	r8,800051e8 <fat_write_PBR+0x184>
800050a6:	11 98       	ld.ub	r8,r8[0x1]
800050a8:	ef 68 00 0d 	st.b	r7[13],r8
   // offset 26-27, Number of header
   fs_g_sector[26] = (LSB1(fs_s_u32_size_partition)<<2) + (LSB0(fs_s_u32_size_partition)>>6);
800050ac:	4d 06       	lddpc	r6,800051ec <fat_write_PBR+0x188>
800050ae:	ec c5 ff fe 	sub	r5,r6,-2
800050b2:	ec c4 ff fd 	sub	r4,r6,-3
800050b6:	09 88       	ld.ub	r8,r4[0x0]
800050b8:	a7 88       	lsr	r8,0x6
800050ba:	0b 89       	ld.ub	r9,r5[0x0]
800050bc:	f0 09 00 28 	add	r8,r8,r9<<0x2
800050c0:	ef 68 00 1a 	st.b	r7[26],r8
   //** WRITE CONSTANTE & VARIABLE DEPENDING OF FAT16 and FAT32
   // Since offset 36, there are a different structure space for FAT16 and FAT32
   // offset 39-42 or 67-70, Volume ID not used
   // offset 43-53 or 71-81, Volume Label
   // offset 54-61 or 82-89, File system type
   if( Is_fat32 )
800050c4:	4c b8       	lddpc	r8,800051f0 <fat_write_PBR+0x18c>
800050c6:	11 89       	ld.ub	r9,r8[0x0]
800050c8:	30 38       	mov	r8,3
800050ca:	f0 09 18 00 	cp.b	r9,r8
800050ce:	c0 81       	brne	800050de <fat_write_PBR+0x7a>
   {
      memcpy_code2ram( &fs_g_sector[64], const_tail_pbr, sizeof(const_tail_pbr) );
800050d0:	31 aa       	mov	r10,26
800050d2:	4c 9b       	lddpc	r11,800051f4 <fat_write_PBR+0x190>
800050d4:	0e 9c       	mov	r12,r7
800050d6:	2c 0c       	sub	r12,-64
800050d8:	f0 1f 00 43 	mcall	800051e4 <fat_write_PBR+0x180>
800050dc:	c0 78       	rjmp	800050ea <fat_write_PBR+0x86>
   }else{
      memcpy_code2ram( &fs_g_sector[36], const_tail_pbr, sizeof(const_tail_pbr) );
800050de:	31 aa       	mov	r10,26
800050e0:	4c 5b       	lddpc	r11,800051f4 <fat_write_PBR+0x190>
800050e2:	4b fc       	lddpc	r12,800051dc <fat_write_PBR+0x178>
800050e4:	2d cc       	sub	r12,-36
800050e6:	f0 1f 00 40 	mcall	800051e4 <fat_write_PBR+0x180>
   }

   u16_tmp = (uint16_t)fs_g_nav.u32_fat_size;    // save value in fast data space to optimize code
800050ea:	4c 08       	lddpc	r8,800051e8 <fat_write_PBR+0x184>
800050ec:	70 18       	ld.w	r8,r8[0x4]
800050ee:	ba 18       	st.h	sp[0x2],r8
   if( Is_fat32 )
800050f0:	4c 08       	lddpc	r8,800051f0 <fat_write_PBR+0x18c>
800050f2:	11 89       	ld.ub	r9,r8[0x0]
800050f4:	30 38       	mov	r8,3
800050f6:	f0 09 18 00 	cp.b	r9,r8
800050fa:	c2 c1       	brne	80005152 <fat_write_PBR+0xee>
   {
      // offset 14-15, Add Number of reserved sector, FAT32 = 32 sectors
      fs_g_sector[14] = 32;
800050fc:	4b 88       	lddpc	r8,800051dc <fat_write_PBR+0x178>
800050fe:	32 09       	mov	r9,32
80005100:	f1 69 00 0e 	st.b	r8[14],r9
      // offset 17-18, Add Number of root entry, FAT32 = 0 entry
      // offset 36-39, Fat size 32bits
      LOW0_32_BPB_FATSz32 = LSB(u16_tmp);
80005104:	fa c9 ff fe 	sub	r9,sp,-2
80005108:	13 9a       	ld.ub	r10,r9[0x1]
8000510a:	f1 6a 00 24 	st.b	r8[36],r10
      LOW1_32_BPB_FATSz32 = MSB(u16_tmp);
8000510e:	13 89       	ld.ub	r9,r9[0x0]
80005110:	f1 69 00 25 	st.b	r8[37],r9
      // offset 40-41, Ext flags (all FAT are enabled = 0)
      // offset 42-43, Fs version (version0:0 = 0)
      // offset 44-47, Root Cluster (first free cluster = 2)
      fs_g_sector[44]= 2;
80005114:	30 29       	mov	r9,2
80005116:	f1 69 00 2c 	st.b	r8[44],r9
      // offset 48-49, Fs Info (usualy 1)
      fs_g_sector[48]= 1;
8000511a:	30 19       	mov	r9,1
8000511c:	f1 69 00 30 	st.b	r8[48],r9
      // offset 50-51, Backup Boot Sector (usualy 6)
      // fs_g_sector[50]= 0;
      // offset 52-63, reserved space
      // offset 54-61, File system type
      fs_g_sector[85]='3';
80005120:	33 39       	mov	r9,51
80005122:	f1 69 00 55 	st.b	r8[85],r9
      fs_g_sector[86]='2';
80005126:	33 29       	mov	r9,50
80005128:	f1 69 00 56 	st.b	r8[86],r9
      // Update FSInfo position
      fs_g_nav.u16_offset_FSInfo = (32-1);
8000512c:	31 fa       	mov	r10,31
8000512e:	4a f9       	lddpc	r9,800051e8 <fat_write_PBR+0x184>
80005130:	b2 4a       	st.h	r9[0x8],r10
   if( ( Is_fat32 )
   ||  ((0x10000-1) <= fs_s_u32_size_partition) )
   {
      // FAT32 or disk > 32MB
      // offset 32-35, Number of sector in partition (value 32 bits)
      fs_g_sector[32] = LSB0(fs_s_u32_size_partition);
80005132:	09 89       	ld.ub	r9,r4[0x0]
80005134:	f1 69 00 20 	st.b	r8[32],r9
      fs_g_sector[33] = LSB1(fs_s_u32_size_partition);
80005138:	0b 89       	ld.ub	r9,r5[0x0]
8000513a:	f1 69 00 21 	st.b	r8[33],r9
      fs_g_sector[34] = LSB2(fs_s_u32_size_partition);
8000513e:	0d 99       	ld.ub	r9,r6[0x1]
80005140:	f1 69 00 22 	st.b	r8[34],r9
      fs_g_sector[35] = LSB3(fs_s_u32_size_partition);
80005144:	0d 89       	ld.ub	r9,r6[0x0]
80005146:	f1 69 00 23 	st.b	r8[35],r9
   }

   if( Is_fat32 )
   {
      // Init the FAT32 FSInfo Sector
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
8000514a:	3f fc       	mov	r12,-1
8000514c:	f0 1f 00 2b 	mcall	800051f8 <fat_write_PBR+0x194>
80005150:	c2 78       	rjmp	8000519e <fat_write_PBR+0x13a>
   }
   else
   {
      // FAT 12 or 16
      // offset 14-15, Add Number of reserved sector, FAT = 1 sector
      fs_g_sector[14] = 1;
80005152:	4a 38       	lddpc	r8,800051dc <fat_write_PBR+0x178>
80005154:	30 1a       	mov	r10,1
80005156:	f1 6a 00 0e 	st.b	r8[14],r10
      // offset 17-18, Add Number of root entry, FAT = 512 entrys
      //fs_g_sector[17] = 512&0xFF;
      fs_g_sector[18] = 512>>8;
8000515a:	30 2b       	mov	r11,2
8000515c:	f1 6b 00 12 	st.b	r8[18],r11

      // offset 22-23, Fat size 16bits
      LOW_16_BPB_FATSz16  = LSB(u16_tmp);
80005160:	fa cb ff fe 	sub	r11,sp,-2
80005164:	17 9c       	ld.ub	r12,r11[0x1]
80005166:	f1 6c 00 16 	st.b	r8[22],r12
      HIGH_16_BPB_FATSz16 = MSB(u16_tmp);
8000516a:	17 8b       	ld.ub	r11,r11[0x0]
8000516c:	f1 6b 00 17 	st.b	r8[23],r11
      // offset 54-61, File system type
      fs_g_sector[57]='1';
80005170:	33 1b       	mov	r11,49
80005172:	f1 6b 00 39 	st.b	r8[57],r11
      if( Is_fat12 )
80005176:	f4 09 18 00 	cp.b	r9,r10
8000517a:	c0 51       	brne	80005184 <fat_write_PBR+0x120>
      {
         fs_g_sector[58]='2';
8000517c:	33 29       	mov	r9,50
8000517e:	f1 69 00 3a 	st.b	r8[58],r9
80005182:	c1 08       	rjmp	800051a2 <fat_write_PBR+0x13e>
      }else{
         fs_g_sector[58]='6';
80005184:	33 69       	mov	r9,54
80005186:	49 68       	lddpc	r8,800051dc <fat_write_PBR+0x178>
80005188:	f1 69 00 3a 	st.b	r8[58],r9
8000518c:	c0 b8       	rjmp	800051a2 <fat_write_PBR+0x13e>
      fs_g_sector[35] = LSB3(fs_s_u32_size_partition);
   }
   else
   {
      // offset 19-20, Number of sector in partition (value 16 bits)
      fs_g_sector[19] = LSB0(fs_s_u32_size_partition);
8000518e:	49 48       	lddpc	r8,800051dc <fat_write_PBR+0x178>
80005190:	09 89       	ld.ub	r9,r4[0x0]
80005192:	f1 69 00 13 	st.b	r8[19],r9
      fs_g_sector[20] = LSB1(fs_s_u32_size_partition);
80005196:	0b 89       	ld.ub	r9,r5[0x0]
80005198:	f1 69 00 14 	st.b	r8[20],r9
8000519c:	30 1c       	mov	r12,1
      // Init the FAT32 FSInfo Sector
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
         return false;
   }
   return true;
}
8000519e:	2f fd       	sub	sp,-4
800051a0:	d8 22       	popm	r4-r7,pc
         fs_g_sector[58]='6';
      }
   }

   // Write the number of sector in partition (= size - one sector MBR = last LBA, return by read_capacity)
   if( ( Is_fat32 )
800051a2:	49 38       	lddpc	r8,800051ec <fat_write_PBR+0x188>
800051a4:	70 08       	ld.w	r8,r8[0x0]
800051a6:	e0 48 ff fe 	cp.w	r8,65534
800051aa:	fe 98 ff f2 	brls	8000518e <fat_write_PBR+0x12a>
   ||  ((0x10000-1) <= fs_s_u32_size_partition) )
   {
      // FAT32 or disk > 32MB
      // offset 32-35, Number of sector in partition (value 32 bits)
      fs_g_sector[32] = LSB0(fs_s_u32_size_partition);
800051ae:	48 c8       	lddpc	r8,800051dc <fat_write_PBR+0x178>
800051b0:	09 89       	ld.ub	r9,r4[0x0]
800051b2:	f1 69 00 20 	st.b	r8[32],r9
      fs_g_sector[33] = LSB1(fs_s_u32_size_partition);
800051b6:	0b 89       	ld.ub	r9,r5[0x0]
800051b8:	f1 69 00 21 	st.b	r8[33],r9
      fs_g_sector[34] = LSB2(fs_s_u32_size_partition);
800051bc:	0d 99       	ld.ub	r9,r6[0x1]
800051be:	f1 69 00 22 	st.b	r8[34],r9
      fs_g_sector[35] = LSB3(fs_s_u32_size_partition);
800051c2:	0d 89       	ld.ub	r9,r6[0x0]
800051c4:	f1 69 00 23 	st.b	r8[35],r9
800051c8:	30 1c       	mov	r12,1
800051ca:	ce ab       	rjmp	8000519e <fat_write_PBR+0x13a>
800051cc:	00 00       	add	r0,r0
800051ce:	06 14       	sub	r4,r3
800051d0:	80 00       	ld.sh	r0,r0[0x0]
800051d2:	3c 94       	mov	r4,-55
800051d4:	80 00       	ld.sh	r0,r0[0x0]
800051d6:	39 cc       	mov	r12,-100
800051d8:	80 00       	ld.sh	r0,r0[0x0]
800051da:	3c 7c       	mov	r12,-57
800051dc:	00 00       	add	r0,r0
800051de:	06 58       	eor	r8,r3
800051e0:	80 00       	ld.sh	r0,r0[0x0]
800051e2:	8b 4c       	st.w	r5[0x10],r12
800051e4:	80 00       	ld.sh	r0,r0[0x0]
800051e6:	84 d2       	ld.uh	r2,r2[0xa]
800051e8:	00 00       	add	r0,r0
800051ea:	08 58       	eor	r8,r4
800051ec:	00 00       	add	r0,r0
800051ee:	09 08       	ld.w	r8,r4++
800051f0:	00 00       	add	r0,r0
800051f2:	08 a4       	st.w	r4++,r4
800051f4:	80 00       	ld.sh	r0,r0[0x0]
800051f6:	8b f8       	st.w	r5[0x3c],r8
800051f8:	80 00       	ld.sh	r0,r0[0x0]
800051fa:	4d d4       	lddpc	r4,8000536c <fat_create_short_entry_name+0xfc>

800051fc <fat_check_name>:
//!
//! @return    number of entry file to strore the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800051fc:	d4 31       	pushm	r0-r7,lr
800051fe:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
80005200:	33 a2       	mov	r2,58
80005202:	30 d5       	mov	r5,13
80005204:	30 23       	mov	r3,2
80005206:	49 86       	lddpc	r6,80005264 <fat_check_name+0x68>
80005208:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to strore the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
8000520c:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
8000520e:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
80005210:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
80005212:	0e 9c       	mov	r12,r7
80005214:	f0 1f 00 15 	mcall	80005268 <fat_check_name+0x6c>
80005218:	c1 a1       	brne	8000524c <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
8000521a:	ee 02 19 00 	cp.h	r2,r7
8000521e:	c0 60       	breq	8000522a <fat_check_name+0x2e>
80005220:	02 98       	mov	r8,r1
80005222:	11 89       	ld.ub	r9,r8[0x0]
80005224:	ee 09 19 00 	cp.h	r9,r7
80005228:	c0 61       	brne	80005234 <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
8000522a:	31 c9       	mov	r9,28
8000522c:	49 08       	lddpc	r8,8000526c <fat_check_name+0x70>
8000522e:	b0 89       	st.b	r8[0x0],r9
80005230:	30 03       	mov	r3,0
            return 0;      // incorrect character
80005232:	c1 68       	rjmp	8000525e <fat_check_name+0x62>
80005234:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
80005236:	0c 38       	cp.w	r8,r6
80005238:	cf 51       	brne	80005222 <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
8000523a:	58 05       	cp.w	r5,0
8000523c:	c0 41       	brne	80005244 <fat_check_name+0x48>
      {
         u8_nb_entry++;
8000523e:	2f f3       	sub	r3,-1
80005240:	5c 53       	castu.b	r3
80005242:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
80005244:	20 15       	sub	r5,1
80005246:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
80005248:	2f f4       	sub	r4,-1
   }
8000524a:	ce 3b       	rjmp	80005210 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
8000524c:	31 48       	mov	r8,20
8000524e:	f0 03 18 00 	cp.b	r3,r8
80005252:	e0 88 00 06 	brls	8000525e <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80005256:	32 b9       	mov	r9,43
80005258:	48 58       	lddpc	r8,8000526c <fat_check_name+0x70>
8000525a:	b0 89       	st.b	r8[0x0],r9
8000525c:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
8000525e:	06 9c       	mov	r12,r3
80005260:	d8 32       	popm	r0-r7,pc
80005262:	00 00       	add	r0,r0
80005264:	80 00       	ld.sh	r0,r0[0x0]
80005266:	8b 24       	st.w	r5[0x8],r4
80005268:	80 00       	ld.sh	r0,r0[0x0]
8000526a:	36 34       	mov	r4,99
8000526c:	00 00       	add	r0,r0
8000526e:	08 a8       	st.w	r4++,r8

80005270 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
80005270:	d4 31       	pushm	r0-r7,lr
80005272:	20 8d       	sub	sp,32
80005274:	18 94       	mov	r4,r12
80005276:	50 2b       	stdsp	sp[0x8],r11
80005278:	14 97       	mov	r7,r10
8000527a:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
8000527c:	58 09       	cp.w	r9,0
8000527e:	c0 40       	breq	80005286 <fat_create_short_entry_name+0x16>
80005280:	30 09       	mov	r9,0
80005282:	50 19       	stdsp	sp[0x4],r9
80005284:	c0 68       	rjmp	80005290 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
80005286:	f0 1f 00 66 	mcall	8000541c <fat_create_short_entry_name+0x1ac>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000528a:	f0 1f 00 66 	mcall	80005420 <fat_create_short_entry_name+0x1b0>
8000528e:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005290:	30 98       	mov	r8,9
80005292:	f0 07 18 00 	cp.b	r7,r8
80005296:	e0 8b 00 04 	brhi	8000529e <fat_create_short_entry_name+0x2e>
8000529a:	30 18       	mov	r8,1
8000529c:	c0 88       	rjmp	800052ac <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
8000529e:	36 38       	mov	r8,99
800052a0:	ee 08 18 00 	cp.b	r8,r7
800052a4:	f9 b8 02 02 	movhs	r8,2
800052a8:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
800052ac:	e0 6a cc cd 	mov	r10,52429
800052b0:	ea 1a cc cc 	orh	r10,0xcccc
800052b4:	ee 0a 06 42 	mulu.d	r2,r7,r10
800052b8:	e6 09 16 03 	lsr	r9,r3,0x3
800052bc:	f2 09 00 29 	add	r9,r9,r9<<0x2
800052c0:	ee 09 01 19 	sub	r9,r7,r9<<0x1
800052c4:	2d 09       	sub	r9,-48
800052c6:	5c 59       	castu.b	r9
800052c8:	50 69       	stdsp	sp[0x18],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
800052ca:	e0 63 85 1f 	mov	r3,34079
800052ce:	ea 13 51 eb 	orh	r3,0x51eb
800052d2:	ee 03 06 42 	mulu.d	r2,r7,r3
800052d6:	e6 09 16 05 	lsr	r9,r3,0x5
800052da:	f2 0b 10 64 	mul	r11,r9,100
800052de:	ee 0b 01 0b 	sub	r11,r7,r11
800052e2:	5c 5b       	castu.b	r11
800052e4:	f6 0a 06 4a 	mulu.d	r10,r11,r10
800052e8:	f6 0a 16 03 	lsr	r10,r11,0x3
800052ec:	2d 0a       	sub	r10,-48
800052ee:	5c 5a       	castu.b	r10
800052f0:	50 5a       	stdsp	sp[0x14],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800052f2:	2d 09       	sub	r9,-48
800052f4:	5c 59       	castu.b	r9
800052f6:	50 49       	stdsp	sp[0x10],r9
800052f8:	30 01       	mov	r1,0
800052fa:	30 17       	mov	r7,1
800052fc:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800052fe:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005300:	f0 09 11 ff 	rsub	r9,r8,-1
80005304:	2f 89       	sub	r9,-8
80005306:	50 39       	stdsp	sp[0xc],r9
80005308:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
8000530a:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
8000530c:	f0 08 11 06 	rsub	r8,r8,6
80005310:	5c 58       	castu.b	r8
80005312:	50 78       	stdsp	sp[0x1c],r8
80005314:	c0 28       	rjmp	80005318 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
80005316:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
80005318:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
8000531a:	e6 07 18 00 	cp.b	r7,r3
8000531e:	c1 41       	brne	80005346 <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
80005320:	40 39       	lddsp	r9,sp[0xc]
80005322:	0a 39       	cp.w	r9,r5
80005324:	5f 09       	sreq	r9
80005326:	e0 06 18 00 	cp.b	r6,r0
8000532a:	5f 08       	sreq	r8
8000532c:	f3 e8 10 08 	or	r8,r9,r8
80005330:	30 09       	mov	r9,0
80005332:	f2 08 18 00 	cp.b	r8,r9
80005336:	c0 51       	brne	80005340 <fat_create_short_entry_name+0xd0>
80005338:	0c 9c       	mov	r12,r6
8000533a:	f0 1f 00 3b 	mcall	80005424 <fat_create_short_entry_name+0x1b4>
8000533e:	c1 10       	breq	80005360 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80005340:	2f f7       	sub	r7,-1
80005342:	5c 57       	castu.b	r7
            continue;
80005344:	ce ab       	rjmp	80005318 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
80005346:	e4 07 18 00 	cp.b	r7,r2
8000534a:	c1 21       	brne	8000536e <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
8000534c:	30 b9       	mov	r9,11
8000534e:	f2 05 18 00 	cp.b	r5,r9
80005352:	c0 50       	breq	8000535c <fat_create_short_entry_name+0xec>
80005354:	0c 9c       	mov	r12,r6
80005356:	f0 1f 00 34 	mcall	80005424 <fat_create_short_entry_name+0x1b4>
8000535a:	c0 30       	breq	80005360 <fat_create_short_entry_name+0xf0>
8000535c:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
8000535e:	cd db       	rjmp	80005318 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005360:	0c 9c       	mov	r12,r6
80005362:	f0 1f 00 32 	mcall	80005428 <fat_create_short_entry_name+0x1b8>
80005366:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005368:	2f f4       	sub	r4,-1
         if( 0 == character )
8000536a:	58 0c       	cp.w	r12,0
8000536c:	cd 60       	breq	80005318 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
8000536e:	30 78       	mov	r8,7
80005370:	f0 07 18 00 	cp.b	r7,r8
80005374:	c0 c1       	brne	8000538c <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005376:	e0 06 18 00 	cp.b	r6,r0
8000537a:	c0 50       	breq	80005384 <fat_create_short_entry_name+0x114>
8000537c:	0c 9c       	mov	r12,r6
8000537e:	f0 1f 00 2a 	mcall	80005424 <fat_create_short_entry_name+0x1b4>
80005382:	c0 30       	breq	80005388 <fat_create_short_entry_name+0x118>
80005384:	30 87       	mov	r7,8
80005386:	cc 9b       	rjmp	80005318 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005388:	2f f4       	sub	r4,-1
8000538a:	cc 7b       	rjmp	80005318 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
8000538c:	30 68       	mov	r8,6
8000538e:	f0 07 18 00 	cp.b	r7,r8
80005392:	c0 61       	brne	8000539e <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005394:	e4 05 18 00 	cp.b	r5,r2
80005398:	cb f0       	breq	80005316 <fat_create_short_entry_name+0xa6>
8000539a:	32 06       	mov	r6,32
8000539c:	c1 28       	rjmp	800053c0 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
8000539e:	30 98       	mov	r8,9
800053a0:	f0 07 18 00 	cp.b	r7,r8
800053a4:	c0 71       	brne	800053b2 <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
800053a6:	30 b8       	mov	r8,11
800053a8:	f0 05 18 00 	cp.b	r5,r8
800053ac:	c3 50       	breq	80005416 <fat_create_short_entry_name+0x1a6>
800053ae:	32 06       	mov	r6,32
800053b0:	c0 f8       	rjmp	800053ce <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
800053b2:	30 58       	mov	r8,5
800053b4:	f0 07 18 00 	cp.b	r7,r8
800053b8:	c0 41       	brne	800053c0 <fat_create_short_entry_name+0x150>
800053ba:	40 66       	lddsp	r6,sp[0x18]
800053bc:	30 67       	mov	r7,6
800053be:	c0 f8       	rjmp	800053dc <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
800053c0:	30 48       	mov	r8,4
800053c2:	f0 07 18 00 	cp.b	r7,r8
800053c6:	c0 41       	brne	800053ce <fat_create_short_entry_name+0x15e>
800053c8:	40 56       	lddsp	r6,sp[0x14]
800053ca:	30 57       	mov	r7,5
800053cc:	c1 28       	rjmp	800053f0 <fat_create_short_entry_name+0x180>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
800053ce:	30 38       	mov	r8,3
800053d0:	f0 07 18 00 	cp.b	r7,r8
800053d4:	c0 41       	brne	800053dc <fat_create_short_entry_name+0x16c>
800053d6:	40 46       	lddsp	r6,sp[0x10]
800053d8:	30 47       	mov	r7,4
800053da:	c0 b8       	rjmp	800053f0 <fat_create_short_entry_name+0x180>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
800053dc:	30 28       	mov	r8,2
800053de:	0e 99       	mov	r9,r7
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
800053e0:	f0 07 18 00 	cp.b	r7,r8
800053e4:	fb f7 00 07 	ld.weq	r7,sp[0x1c]
800053e8:	f0 09 18 00 	cp.b	r9,r8
800053ec:	f9 b6 00 7e 	moveq	r6,126
      }

      if( mode )
800053f0:	40 08       	lddsp	r8,sp[0x0]
800053f2:	58 08       	cp.w	r8,0
800053f4:	c0 50       	breq	800053fe <fat_create_short_entry_name+0x18e>
      {
         // Record the short name in buffer
         *short_name = character;
800053f6:	40 29       	lddsp	r9,sp[0x8]
800053f8:	12 c6       	st.b	r9++,r6
800053fa:	50 29       	stdsp	sp[0x8],r9
800053fc:	c0 48       	rjmp	80005404 <fat_create_short_entry_name+0x194>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
800053fe:	40 18       	lddsp	r8,sp[0x4]
80005400:	10 c6       	st.b	r8++,r6
80005402:	50 18       	stdsp	sp[0x4],r8
         ptr_entry++;
      }
      u8_i++;
80005404:	2f f5       	sub	r5,-1
80005406:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80005408:	e2 08 16 01 	lsr	r8,r1,0x1
8000540c:	a7 71       	lsl	r1,0x7
8000540e:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80005410:	0c 01       	add	r1,r6
80005412:	5c 51       	castu.b	r1
80005414:	c8 2b       	rjmp	80005318 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80005416:	02 9c       	mov	r12,r1
80005418:	2f 8d       	sub	sp,-32
8000541a:	d8 32       	popm	r0-r7,pc
8000541c:	80 00       	ld.sh	r0,r0[0x0]
8000541e:	39 cc       	mov	r12,-100
80005420:	80 00       	ld.sh	r0,r0[0x0]
80005422:	36 5c       	mov	r12,101
80005424:	80 00       	ld.sh	r0,r0[0x0]
80005426:	36 34       	mov	r4,99
80005428:	80 00       	ld.sh	r0,r0[0x0]
8000542a:	48 7c       	lddpc	r12,80005444 <fat_entry_shortname_compare+0x18>

8000542c <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
8000542c:	eb cd 40 80 	pushm	r7,lr
80005430:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005432:	f0 1f 00 12 	mcall	80005478 <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80005436:	19 88       	ld.ub	r8,r12[0x0]
80005438:	58 08       	cp.w	r8,0
8000543a:	c0 61       	brne	80005446 <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
8000543c:	30 a9       	mov	r9,10
8000543e:	49 08       	lddpc	r8,8000547c <fat_entry_shortname_compare+0x50>
80005440:	b0 89       	st.b	r8[0x0],r9
80005442:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005446:	3e 59       	mov	r9,-27
80005448:	f2 08 18 00 	cp.b	r8,r9
8000544c:	c0 70       	breq	8000545a <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
8000544e:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005452:	30 f8       	mov	r8,15
80005454:	f0 09 18 00 	cp.b	r9,r8
80005458:	c0 61       	brne	80005464 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
8000545a:	30 b9       	mov	r9,11
8000545c:	48 88       	lddpc	r8,8000547c <fat_entry_shortname_compare+0x50>
8000545e:	b0 89       	st.b	r8[0x0],r9
80005460:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005464:	30 b9       	mov	r9,11
80005466:	48 68       	lddpc	r8,8000547c <fat_entry_shortname_compare+0x50>
80005468:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
8000546a:	30 ba       	mov	r10,11
8000546c:	0e 9b       	mov	r11,r7
8000546e:	f0 1f 00 05 	mcall	80005480 <fat_entry_shortname_compare+0x54>
80005472:	5f 0c       	sreq	r12
}
80005474:	e3 cd 80 80 	ldm	sp++,r7,pc
80005478:	80 00       	ld.sh	r0,r0[0x0]
8000547a:	36 5c       	mov	r12,101
8000547c:	00 00       	add	r0,r0
8000547e:	08 a8       	st.w	r4++,r8
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	84 ac       	ld.uh	r12,r2[0x4]

80005484 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005484:	d4 31       	pushm	r0-r7,lr
80005486:	20 3d       	sub	sp,12
80005488:	18 93       	mov	r3,r12
8000548a:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
8000548c:	1a 96       	mov	r6,sp
8000548e:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005490:	49 65       	lddpc	r5,800054e8 <fat_find_short_entry_name+0x64>
80005492:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005494:	49 61       	lddpc	r1,800054ec <fat_find_short_entry_name+0x68>
80005496:	30 a0       	mov	r0,10
80005498:	c0 58       	rjmp	800054a2 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
8000549a:	3f f8       	mov	r8,-1
8000549c:	f0 07 18 00 	cp.b	r7,r8
800054a0:	c2 00       	breq	800054e0 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist

      u8_nb++;                                           // Try next short name
800054a2:	2f f7       	sub	r7,-1
800054a4:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
800054a6:	04 99       	mov	r9,r2
800054a8:	0e 9a       	mov	r10,r7
800054aa:	1a 9b       	mov	r11,sp
800054ac:	06 9c       	mov	r12,r3
800054ae:	f0 1f 00 11 	mcall	800054f0 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
800054b2:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
800054b4:	f0 1f 00 10 	mcall	800054f4 <fat_find_short_entry_name+0x70>
800054b8:	c0 81       	brne	800054c8 <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
800054ba:	48 d8       	lddpc	r8,800054ec <fat_find_short_entry_name+0x68>
800054bc:	11 89       	ld.ub	r9,r8[0x0]
800054be:	31 a8       	mov	r8,26
800054c0:	f0 09 18 00 	cp.b	r9,r8
800054c4:	c0 e1       	brne	800054e0 <fat_find_short_entry_name+0x5c>
800054c6:	c0 e8       	rjmp	800054e2 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
800054c8:	1a 9c       	mov	r12,sp
800054ca:	f0 1f 00 0c 	mcall	800054f8 <fat_find_short_entry_name+0x74>
800054ce:	ce 61       	brne	8000549a <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
800054d0:	03 88       	ld.ub	r8,r1[0x0]
800054d2:	e0 08 18 00 	cp.b	r8,r0
800054d6:	c0 60       	breq	800054e2 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
800054d8:	8a 18       	ld.sh	r8,r5[0x2]
800054da:	2f f8       	sub	r8,-1
800054dc:	aa 18       	st.h	r5[0x2],r8
      }
800054de:	ce bb       	rjmp	800054b4 <fat_find_short_entry_name+0x30>
800054e0:	30 07       	mov	r7,0
   }
}
800054e2:	0e 9c       	mov	r12,r7
800054e4:	2f dd       	sub	sp,-12
800054e6:	d8 32       	popm	r0-r7,pc
800054e8:	00 00       	add	r0,r0
800054ea:	08 a4       	st.w	r4++,r4
800054ec:	00 00       	add	r0,r0
800054ee:	08 a8       	st.w	r4++,r8
800054f0:	80 00       	ld.sh	r0,r0[0x0]
800054f2:	52 70       	stdsp	sp[0x9c],r0
800054f4:	80 00       	ld.sh	r0,r0[0x0]
800054f6:	42 bc       	lddsp	r12,sp[0xac]
800054f8:	80 00       	ld.sh	r0,r0[0x0]
800054fa:	54 2c       	stdsp	sp[0x108],r12

800054fc <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
800054fc:	eb cd 40 fc 	pushm	r2-r7,lr
80005500:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80005502:	f0 1f 00 21 	mcall	80005584 <fat_create_entry_file_name+0x88>
80005506:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80005508:	c3 b0       	breq	8000557e <fat_create_entry_file_name+0x82>
      return false;

   // Search a unik short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
8000550a:	0c 9c       	mov	r12,r6
8000550c:	f0 1f 00 1f 	mcall	80005588 <fat_create_entry_file_name+0x8c>
80005510:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80005512:	c0 61       	brne	8000551e <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005514:	32 a9       	mov	r9,42
80005516:	49 e8       	lddpc	r8,8000558c <fat_create_entry_file_name+0x90>
80005518:	b0 89       	st.b	r8[0x0],r9
8000551a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }

   // Alloc a space for entrys
   if( !fat_alloc_entry_free( u8_nb_entry ))
8000551e:	0a 9c       	mov	r12,r5
80005520:	f0 1f 00 1c 	mcall	80005590 <fat_create_entry_file_name+0x94>
80005524:	c2 d0       	breq	8000557e <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005526:	30 09       	mov	r9,0
80005528:	0e 9a       	mov	r10,r7
8000552a:	12 9b       	mov	r11,r9
8000552c:	0c 9c       	mov	r12,r6
8000552e:	f0 1f 00 1a 	mcall	80005594 <fat_create_entry_file_name+0x98>
80005532:	18 92       	mov	r2,r12
   u8_nb_entry--;
80005534:	20 15       	sub	r5,1
80005536:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005538:	c1 c0       	breq	80005570 <fat_create_entry_file_name+0x74>
8000553a:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
8000553c:	49 74       	lddpc	r4,80005598 <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
8000553e:	ea c3 ff c0 	sub	r3,r5,-64
80005542:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005544:	88 18       	ld.sh	r8,r4[0x2]
80005546:	20 18       	sub	r8,1
80005548:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
8000554a:	f0 1f 00 15 	mcall	8000559c <fat_create_entry_file_name+0xa0>
8000554e:	c1 80       	breq	8000557e <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005550:	ea 07 18 00 	cp.b	r7,r5
80005554:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005558:	0e 9a       	mov	r10,r7
8000555a:	04 9b       	mov	r11,r2
8000555c:	0c 9c       	mov	r12,r6
8000555e:	f0 1f 00 11 	mcall	800055a0 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005562:	2f f7       	sub	r7,-1
80005564:	5c 57       	castu.b	r7
80005566:	ee 05 18 00 	cp.b	r5,r7
8000556a:	c0 33       	brcs	80005570 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
8000556c:	2f 36       	sub	r6,-13
8000556e:	ce bb       	rjmp	80005544 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005570:	48 a8       	lddpc	r8,80005598 <fat_create_entry_file_name+0x9c>
80005572:	90 19       	ld.sh	r9,r8[0x2]
80005574:	f2 05 00 05 	add	r5,r9,r5
80005578:	b0 15       	st.h	r8[0x2],r5
8000557a:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
8000557e:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005582:	00 00       	add	r0,r0
80005584:	80 00       	ld.sh	r0,r0[0x0]
80005586:	51 fc       	stdsp	sp[0x7c],r12
80005588:	80 00       	ld.sh	r0,r0[0x0]
8000558a:	54 84       	stdsp	sp[0x120],r4
8000558c:	00 00       	add	r0,r0
8000558e:	08 a8       	st.w	r4++,r8
80005590:	80 00       	ld.sh	r0,r0[0x0]
80005592:	4f b4       	lddpc	r4,8000577c <fat_clean_zone+0x78>
80005594:	80 00       	ld.sh	r0,r0[0x0]
80005596:	52 70       	stdsp	sp[0x9c],r0
80005598:	00 00       	add	r0,r0
8000559a:	08 a4       	st.w	r4++,r4
8000559c:	80 00       	ld.sh	r0,r0[0x0]
8000559e:	42 bc       	lddsp	r12,sp[0xac]
800055a0:	80 00       	ld.sh	r0,r0[0x0]
800055a2:	4b 2c       	lddpc	r12,80005668 <fat_getfreespace+0x34>

800055a4 <fat_read_fat32_FSInfo>:
//! This function returns the space free in the selected FAT32 partition
//!
//! @return the number of sector free (if 0xFFFFFFFF, then no value available in FSInfo Sector)
//!
uint32_t   fat_read_fat32_FSInfo( void )
{
800055a4:	d4 01       	pushm	lr
800055a6:	20 1d       	sub	sp,4
   uint32_t u32_nb_free_cluster;

   // Read FAT32 FSInfo Sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
800055a8:	49 c8       	lddpc	r8,80005618 <fat_read_fat32_FSInfo+0x74>
800055aa:	90 c9       	ld.uh	r9,r8[0x8]
800055ac:	70 4a       	ld.w	r10,r8[0x10]
800055ae:	49 c8       	lddpc	r8,8000561c <fat_read_fat32_FSInfo+0x78>
800055b0:	12 1a       	sub	r10,r9
800055b2:	91 0a       	st.w	r8[0x0],r10
   if( !fat_cache_read_sector( true ))
800055b4:	30 1c       	mov	r12,1
800055b6:	f0 1f 00 1b 	mcall	80005620 <fat_read_fat32_FSInfo+0x7c>
800055ba:	c2 c0       	breq	80005612 <fat_read_fat32_FSInfo+0x6e>
      return 0xFFFFFFFF;

   //* Check signature
   // offset 510-511, Signature
   if( fs_g_sector[510] != FS_BR_SIGNATURE_LOW )
800055bc:	49 a8       	lddpc	r8,80005624 <fat_read_fat32_FSInfo+0x80>
800055be:	f1 39 01 fe 	ld.ub	r9,r8[510]
800055c2:	35 58       	mov	r8,85
800055c4:	f0 09 18 00 	cp.b	r9,r8
800055c8:	c2 51       	brne	80005612 <fat_read_fat32_FSInfo+0x6e>
      return 0xFFFFFFFF;
   if( fs_g_sector[511] != FS_BR_SIGNATURE_HIGH)
800055ca:	49 78       	lddpc	r8,80005624 <fat_read_fat32_FSInfo+0x80>
800055cc:	f1 39 01 ff 	ld.ub	r9,r8[511]
800055d0:	3a a8       	mov	r8,-86
800055d2:	f0 09 18 00 	cp.b	r9,r8
800055d6:	c1 e1       	brne	80005612 <fat_read_fat32_FSInfo+0x6e>
      return 0xFFFFFFFF;
   // offset 00-04, This lead signature
   if( 0 != memcmp_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) ))
800055d8:	30 4a       	mov	r10,4
800055da:	49 4b       	lddpc	r11,80005628 <fat_read_fat32_FSInfo+0x84>
800055dc:	49 2c       	lddpc	r12,80005624 <fat_read_fat32_FSInfo+0x80>
800055de:	f0 1f 00 14 	mcall	8000562c <fat_read_fat32_FSInfo+0x88>
800055e2:	c1 81       	brne	80005612 <fat_read_fat32_FSInfo+0x6e>
      return 0xFFFFFFFF;
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   if( 0 != memcmp_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig)) )
800055e4:	30 4a       	mov	r10,4
800055e6:	49 3b       	lddpc	r11,80005630 <fat_read_fat32_FSInfo+0x8c>
800055e8:	48 fc       	lddpc	r12,80005624 <fat_read_fat32_FSInfo+0x80>
800055ea:	f8 cc fe 1c 	sub	r12,r12,-484
800055ee:	f0 1f 00 10 	mcall	8000562c <fat_read_fat32_FSInfo+0x88>
800055f2:	c1 01       	brne	80005612 <fat_read_fat32_FSInfo+0x6e>
      return 0xFFFFFFFF;

   //* Read value
   // offset 488-491, free cluster count
   LSB0(u32_nb_free_cluster) = fs_g_sector[488];
800055f4:	48 c9       	lddpc	r9,80005624 <fat_read_fat32_FSInfo+0x80>
800055f6:	f3 3a 01 e8 	ld.ub	r10,r9[488]
800055fa:	ba ba       	st.b	sp[0x3],r10
   LSB1(u32_nb_free_cluster) = fs_g_sector[489];
800055fc:	f3 3a 01 e9 	ld.ub	r10,r9[489]
80005600:	ba aa       	st.b	sp[0x2],r10
   LSB2(u32_nb_free_cluster) = fs_g_sector[490];
80005602:	f3 3a 01 ea 	ld.ub	r10,r9[490]
80005606:	ba 9a       	st.b	sp[0x1],r10
   LSB3(u32_nb_free_cluster) = fs_g_sector[491];
80005608:	f3 39 01 eb 	ld.ub	r9,r9[491]
8000560c:	ba 89       	st.b	sp[0x0],r9
   return u32_nb_free_cluster;
8000560e:	40 0c       	lddsp	r12,sp[0x0]
80005610:	c0 28       	rjmp	80005614 <fat_read_fat32_FSInfo+0x70>
80005612:	3f fc       	mov	r12,-1
}
80005614:	2f fd       	sub	sp,-4
80005616:	d8 02       	popm	pc
80005618:	00 00       	add	r0,r0
8000561a:	08 58       	eor	r8,r4
8000561c:	00 00       	add	r0,r0
8000561e:	06 14       	sub	r4,r3
80005620:	80 00       	ld.sh	r0,r0[0x0]
80005622:	3c 94       	mov	r4,-55
80005624:	00 00       	add	r0,r0
80005626:	06 58       	eor	r8,r3
80005628:	80 00       	ld.sh	r0,r0[0x0]
8000562a:	8b 20       	st.w	r5[0x8],r0
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	84 ac       	ld.uh	r12,r2[0x4]
80005630:	80 00       	ld.sh	r0,r0[0x0]
80005632:	8c 14       	ld.sh	r4,r6[0x2]

80005634 <fat_getfreespace>:
//!
//! @return    the number of sector free <br>
//!            if 0, then error or full
//!
uint32_t   fat_getfreespace( void )
{
80005634:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_nb_free_cluster = 0;

   // Read ALL FAT1
   fs_g_cluster.u32_pos = 2;
80005636:	30 29       	mov	r9,2
80005638:	4a c8       	lddpc	r8,800056e8 <fat_getfreespace+0xb4>
8000563a:	91 09       	st.w	r8[0x0],r9

   if( Is_fat12 )
8000563c:	4a c8       	lddpc	r8,800056ec <fat_getfreespace+0xb8>
8000563e:	11 88       	ld.ub	r8,r8[0x0]
80005640:	30 19       	mov	r9,1
80005642:	f2 08 18 00 	cp.b	r8,r9
80005646:	c1 c1       	brne	8000567e <fat_getfreespace+0x4a>
   {  // FAT12 only
      for(
80005648:	4a a8       	lddpc	r8,800056f0 <fat_getfreespace+0xbc>
8000564a:	70 38       	ld.w	r8,r8[0xc]
8000564c:	58 28       	cp.w	r8,2
8000564e:	e0 8b 00 04 	brhi	80005656 <fat_getfreespace+0x22>
80005652:	30 06       	mov	r6,0
80005654:	c4 48       	rjmp	800056dc <fat_getfreespace+0xa8>
80005656:	30 06       	mov	r6,0
      ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
      ;     fs_g_cluster.u32_pos++ )
      {
         // Get the value of the cluster
         if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005658:	0c 94       	mov	r4,r6
            return 0;

         if ( 0 == fs_g_cluster.u32_val )
8000565a:	4a 47       	lddpc	r7,800056e8 <fat_getfreespace+0xb4>
   // Read ALL FAT1
   fs_g_cluster.u32_pos = 2;

   if( Is_fat12 )
   {  // FAT12 only
      for(
8000565c:	4a 55       	lddpc	r5,800056f0 <fat_getfreespace+0xbc>
      ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
      ;     fs_g_cluster.u32_pos++ )
      {
         // Get the value of the cluster
         if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
8000565e:	08 9c       	mov	r12,r4
80005660:	f0 1f 00 25 	mcall	800056f4 <fat_getfreespace+0xc0>
80005664:	c4 10       	breq	800056e6 <fat_getfreespace+0xb2>
            return 0;

         if ( 0 == fs_g_cluster.u32_val )
80005666:	6e 18       	ld.w	r8,r7[0x4]
            u32_nb_free_cluster++;
80005668:	58 08       	cp.w	r8,0
8000566a:	f7 b6 00 ff 	subeq	r6,-1

   if( Is_fat12 )
   {  // FAT12 only
      for(
      ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
      ;     fs_g_cluster.u32_pos++ )
8000566e:	6e 08       	ld.w	r8,r7[0x0]
80005670:	2f f8       	sub	r8,-1
80005672:	8f 08       	st.w	r7[0x0],r8
   // Read ALL FAT1
   fs_g_cluster.u32_pos = 2;

   if( Is_fat12 )
   {  // FAT12 only
      for(
80005674:	6a 39       	ld.w	r9,r5[0xc]
80005676:	10 39       	cp.w	r9,r8
80005678:	fe 9b ff f3 	brhi	8000565e <fat_getfreespace+0x2a>
8000567c:	c3 08       	rjmp	800056dc <fat_getfreespace+0xa8>
            u32_nb_free_cluster++;
      }
   }
   else
   {
      if( Is_fat32 )
8000567e:	30 39       	mov	r9,3
80005680:	f2 08 18 00 	cp.b	r8,r9
80005684:	c0 61       	brne	80005690 <fat_getfreespace+0x5c>
      {
         u32_nb_free_cluster = fat_read_fat32_FSInfo();
80005686:	f0 1f 00 1d 	mcall	800056f8 <fat_getfreespace+0xc4>
8000568a:	18 96       	mov	r6,r12
         if( 0xFFFFFFFF != u32_nb_free_cluster )
8000568c:	5b fc       	cp.w	r12,-1
8000568e:	c2 71       	brne	800056dc <fat_getfreespace+0xa8>
            goto endof_fat_getfreespace;
         u32_nb_free_cluster = 0;
      }
      // Speed optimization only for FAT16 and FAT32
      // init first value used by fat_cluster_readnext()
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80005690:	30 0c       	mov	r12,0
80005692:	f0 1f 00 19 	mcall	800056f4 <fat_getfreespace+0xc0>
80005696:	c2 80       	breq	800056e6 <fat_getfreespace+0xb2>
         return false;
      for(
80005698:	49 48       	lddpc	r8,800056e8 <fat_getfreespace+0xb4>
8000569a:	70 09       	ld.w	r9,r8[0x0]
8000569c:	49 58       	lddpc	r8,800056f0 <fat_getfreespace+0xbc>
8000569e:	70 38       	ld.w	r8,r8[0xc]
800056a0:	10 39       	cp.w	r9,r8
800056a2:	c0 33       	brcs	800056a8 <fat_getfreespace+0x74>
800056a4:	30 06       	mov	r6,0
800056a6:	c1 28       	rjmp	800056ca <fat_getfreespace+0x96>
800056a8:	30 06       	mov	r6,0
      ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
      ;     fs_g_cluster.u32_pos++ )
      {
         if ( 0 == fs_g_cluster.u32_val )
800056aa:	49 07       	lddpc	r7,800056e8 <fat_getfreespace+0xb4>
      }
      // Speed optimization only for FAT16 and FAT32
      // init first value used by fat_cluster_readnext()
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
         return false;
      for(
800056ac:	49 15       	lddpc	r5,800056f0 <fat_getfreespace+0xbc>
      ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
      ;     fs_g_cluster.u32_pos++ )
      {
         if ( 0 == fs_g_cluster.u32_val )
800056ae:	6e 18       	ld.w	r8,r7[0x4]
            u32_nb_free_cluster++;
800056b0:	58 08       	cp.w	r8,0
800056b2:	f7 b6 00 ff 	subeq	r6,-1
         if( !fat_cluster_readnext() )
800056b6:	f0 1f 00 12 	mcall	800056fc <fat_getfreespace+0xc8>
800056ba:	c1 60       	breq	800056e6 <fat_getfreespace+0xb2>
      // init first value used by fat_cluster_readnext()
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
         return false;
      for(
      ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
      ;     fs_g_cluster.u32_pos++ )
800056bc:	6e 08       	ld.w	r8,r7[0x0]
800056be:	2f f8       	sub	r8,-1
800056c0:	8f 08       	st.w	r7[0x0],r8
      }
      // Speed optimization only for FAT16 and FAT32
      // init first value used by fat_cluster_readnext()
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
         return false;
      for(
800056c2:	6a 39       	ld.w	r9,r5[0xc]
800056c4:	10 39       	cp.w	r9,r8
800056c6:	fe 9b ff f4 	brhi	800056ae <fat_getfreespace+0x7a>
            u32_nb_free_cluster++;
         if( !fat_cluster_readnext() )
            return false;
      }
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      if( Is_fat32 )
800056ca:	48 98       	lddpc	r8,800056ec <fat_getfreespace+0xb8>
800056cc:	11 89       	ld.ub	r9,r8[0x0]
800056ce:	30 38       	mov	r8,3
800056d0:	f0 09 18 00 	cp.b	r9,r8
800056d4:	c0 41       	brne	800056dc <fat_getfreespace+0xa8>
      {
         // Save value for the future call
         fat_write_fat32_FSInfo( u32_nb_free_cluster );
800056d6:	0c 9c       	mov	r12,r6
800056d8:	f0 1f 00 0a 	mcall	80005700 <fat_getfreespace+0xcc>
      }
#endif
   }
endof_fat_getfreespace:
   return (u32_nb_free_cluster * fs_g_nav.u8_BPB_SecPerClus);
800056dc:	48 58       	lddpc	r8,800056f0 <fat_getfreespace+0xbc>
800056de:	11 9c       	ld.ub	r12,r8[0x1]
800056e0:	ec 0c 02 4c 	mul	r12,r6,r12
800056e4:	d8 22       	popm	r4-r7,pc
800056e6:	d8 2a       	popm	r4-r7,pc,r12=0
800056e8:	00 00       	add	r0,r0
800056ea:	08 f8       	st.b	--r4,r8
800056ec:	00 00       	add	r0,r0
800056ee:	08 a4       	st.w	r4++,r4
800056f0:	00 00       	add	r0,r0
800056f2:	08 58       	eor	r8,r4
800056f4:	80 00       	ld.sh	r0,r0[0x0]
800056f6:	3d a8       	mov	r8,-38
800056f8:	80 00       	ld.sh	r0,r0[0x0]
800056fa:	55 a4       	stdsp	sp[0x168],r4
800056fc:	80 00       	ld.sh	r0,r0[0x0]
800056fe:	3d 14       	mov	r4,-47
80005700:	80 00       	ld.sh	r0,r0[0x0]
80005702:	4d d4       	lddpc	r4,80005874 <fat_mount+0x28>

80005704 <fat_clean_zone>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_clean_zone( bool b_MBR )
{
80005704:	eb cd 40 fe 	pushm	r1-r7,lr
80005708:	18 97       	mov	r7,r12
   uint16_t u16_nb_sector_clean, u16_i;
   _MEM_TYPE_SLOW_   uint8_t *ptr;

   // Flush the internal cache before clear the cache
   if( !fat_cache_flush())
8000570a:	f0 1f 00 27 	mcall	800057a4 <fat_clean_zone+0xa0>
8000570e:	c4 60       	breq	8000579a <fat_clean_zone+0x96>
      return false;
   fat_cache_clear();
80005710:	f0 1f 00 26 	mcall	800057a8 <fat_clean_zone+0xa4>

   // remark: these zones are stored after the PBR and are continues
   // Start after PBR
   if( b_MBR )
80005714:	58 07       	cp.w	r7,0
80005716:	c0 50       	breq	80005720 <fat_clean_zone+0x1c>
   {
      fs_gu32_addrsector = 2; // Jump MBR and PBR
80005718:	30 29       	mov	r9,2
8000571a:	4a 58       	lddpc	r8,800057ac <fat_clean_zone+0xa8>
8000571c:	91 09       	st.w	r8[0x0],r9
8000571e:	c0 48       	rjmp	80005726 <fat_clean_zone+0x22>
   }else{
      fs_gu32_addrsector = 1; // Jump only a PBR (no MBR create)
80005720:	30 19       	mov	r9,1
80005722:	4a 38       	lddpc	r8,800057ac <fat_clean_zone+0xa8>
80005724:	91 09       	st.w	r8[0x0],r9
   }

   // Compute reserved zone size and root size
   if( Is_fat32 )
80005726:	4a 38       	lddpc	r8,800057b0 <fat_clean_zone+0xac>
80005728:	11 89       	ld.ub	r9,r8[0x0]
8000572a:	30 38       	mov	r8,3
8000572c:	f0 09 18 00 	cp.b	r9,r8
80005730:	c0 30       	breq	80005736 <fat_clean_zone+0x32>
80005732:	32 05       	mov	r5,32
80005734:	c0 88       	rjmp	80005744 <fat_clean_zone+0x40>
   {  // FAT 32
      fs_gu32_addrsector++;   // Jump FAT32 FSInfo Sector
80005736:	49 e8       	lddpc	r8,800057ac <fat_clean_zone+0xa8>
80005738:	70 09       	ld.w	r9,r8[0x0]
8000573a:	2f f9       	sub	r9,-1
8000573c:	91 09       	st.w	r8[0x0],r9
      // root size = cluster size AND reserved zone = 32 - 2 (2 = PBR + FSInfo)
      u16_nb_sector_clean = fs_g_nav.u8_BPB_SecPerClus + 30;
8000573e:	49 e8       	lddpc	r8,800057b4 <fat_clean_zone+0xb0>
80005740:	11 95       	ld.ub	r5,r8[0x1]
80005742:	2e 25       	sub	r5,-30
   else
   {  // FAT 12 or 16
      // root size = 512 entrys = 32 sectors AND reserved zone = 1 - 1(PBR)
      u16_nb_sector_clean = 32;
   }
   u16_nb_sector_clean += ((uint16_t)fs_g_nav.u32_fat_size*2);  // Add FAT size
80005744:	49 c8       	lddpc	r8,800057b4 <fat_clean_zone+0xb0>
80005746:	90 38       	ld.sh	r8,r8[0x6]
80005748:	a1 78       	lsl	r8,0x1
8000574a:	10 05       	add	r5,r8
8000574c:	5c 85       	casts.h	r5

   // loop to clean
   for( ; u16_nb_sector_clean!=0; u16_nb_sector_clean-- )
8000574e:	c2 80       	breq	8000579e <fat_clean_zone+0x9a>
   {
      // To improve the format time
      // We check if the sector is clean (0x00) instead of write a clean sector.
      if( !fat_cache_read_sector( true ))
80005750:	30 12       	mov	r2,1
         return false;
      ptr = fs_g_sector;
      for( u16_i=0; u16_i<FS_CACHE_SIZE; u16_i++,ptr++ )
      {
         if( 0x00 != *ptr )
80005752:	49 a3       	lddpc	r3,800057b8 <fat_clean_zone+0xb4>
80005754:	30 07       	mov	r7,0
//! @param     b_MBR          true, include a MBR on disk
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_clean_zone( bool b_MBR )
80005756:	e6 c6 fe 01 	sub	r6,r3,-511
8000575a:	e6 02 00 01 	add	r1,r3,r2
            fat_cache_clear();
            fat_cache_mark_sector_as_dirty();
            break;
         }
      }
      fs_gu32_addrsector++;
8000575e:	49 44       	lddpc	r4,800057ac <fat_clean_zone+0xa8>
   // loop to clean
   for( ; u16_nb_sector_clean!=0; u16_nb_sector_clean-- )
   {
      // To improve the format time
      // We check if the sector is clean (0x00) instead of write a clean sector.
      if( !fat_cache_read_sector( true ))
80005760:	04 9c       	mov	r12,r2
80005762:	f0 1f 00 17 	mcall	800057bc <fat_clean_zone+0xb8>
80005766:	c1 a0       	breq	8000579a <fat_clean_zone+0x96>
         return false;
      ptr = fs_g_sector;
      for( u16_i=0; u16_i<FS_CACHE_SIZE; u16_i++,ptr++ )
      {
         if( 0x00 != *ptr )
80005768:	07 88       	ld.ub	r8,r3[0x0]
8000576a:	ee 08 18 00 	cp.b	r8,r7
8000576e:	c0 61       	brne	8000577a <fat_clean_zone+0x76>
//! @param     b_MBR          true, include a MBR on disk
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_clean_zone( bool b_MBR )
80005770:	02 98       	mov	r8,r1
      if( !fat_cache_read_sector( true ))
         return false;
      ptr = fs_g_sector;
      for( u16_i=0; u16_i<FS_CACHE_SIZE; u16_i++,ptr++ )
      {
         if( 0x00 != *ptr )
80005772:	11 89       	ld.ub	r9,r8[0x0]
80005774:	ee 09 18 00 	cp.b	r9,r7
80005778:	c0 60       	breq	80005784 <fat_clean_zone+0x80>
         {
            // Sector not clean then erase it
            fat_cache_clear();
8000577a:	f0 1f 00 0c 	mcall	800057a8 <fat_clean_zone+0xa4>
            fat_cache_mark_sector_as_dirty();
8000577e:	f0 1f 00 11 	mcall	800057c0 <fat_clean_zone+0xbc>
            break;
80005782:	c0 58       	rjmp	8000578c <fat_clean_zone+0x88>
      // To improve the format time
      // We check if the sector is clean (0x00) instead of write a clean sector.
      if( !fat_cache_read_sector( true ))
         return false;
      ptr = fs_g_sector;
      for( u16_i=0; u16_i<FS_CACHE_SIZE; u16_i++,ptr++ )
80005784:	0c 38       	cp.w	r8,r6
80005786:	c0 30       	breq	8000578c <fat_clean_zone+0x88>
80005788:	2f f8       	sub	r8,-1
8000578a:	cf 4b       	rjmp	80005772 <fat_clean_zone+0x6e>
            fat_cache_clear();
            fat_cache_mark_sector_as_dirty();
            break;
         }
      }
      fs_gu32_addrsector++;
8000578c:	68 08       	ld.w	r8,r4[0x0]
8000578e:	2f f8       	sub	r8,-1
80005790:	89 08       	st.w	r4[0x0],r8
      u16_nb_sector_clean = 32;
   }
   u16_nb_sector_clean += ((uint16_t)fs_g_nav.u32_fat_size*2);  // Add FAT size

   // loop to clean
   for( ; u16_nb_sector_clean!=0; u16_nb_sector_clean-- )
80005792:	20 15       	sub	r5,1
80005794:	5c 85       	casts.h	r5
80005796:	ce 51       	brne	80005760 <fat_clean_zone+0x5c>
80005798:	c0 38       	rjmp	8000579e <fat_clean_zone+0x9a>
8000579a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8000579e:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
800057a2:	00 00       	add	r0,r0
800057a4:	80 00       	ld.sh	r0,r0[0x0]
800057a6:	3c 28       	mov	r8,-62
800057a8:	80 00       	ld.sh	r0,r0[0x0]
800057aa:	3c 7c       	mov	r12,-57
800057ac:	00 00       	add	r0,r0
800057ae:	06 14       	sub	r4,r3
800057b0:	00 00       	add	r0,r0
800057b2:	08 a4       	st.w	r4++,r4
800057b4:	00 00       	add	r0,r0
800057b6:	08 58       	eor	r8,r4
800057b8:	00 00       	add	r0,r0
800057ba:	06 58       	eor	r8,r3
800057bc:	80 00       	ld.sh	r0,r0[0x0]
800057be:	3c 94       	mov	r4,-55
800057c0:	80 00       	ld.sh	r0,r0[0x0]
800057c2:	39 cc       	mov	r12,-100

800057c4 <fat_format>:
//! This routine can't format a multi-partiton, if the disk contains a multi-partition area
//! then the multi-partition will be erased and replaced by a single partition on all disk space.
//! @endverbatim
//!
bool  fat_format( uint8_t u8_fat_type )
{
800057c4:	eb cd 40 e0 	pushm	r5-r7,lr
800057c8:	18 96       	mov	r6,r12
   fs_g_nav.u8_partition = 0;
#endif


   // Get drive capacity (= last LBA)
   mem_read_capacity( fs_g_nav.u8_lun , &fs_s_u32_size_partition );
800057ca:	49 8b       	lddpc	r11,80005828 <fat_format+0x64>
800057cc:	49 88       	lddpc	r8,8000582c <fat_format+0x68>
800057ce:	11 8c       	ld.ub	r12,r8[0x0]
800057d0:	f0 1f 00 18 	mcall	80005830 <fat_format+0x6c>

   if( u8_fat_type & FS_FORMAT_NOMBR_FLAG )
800057d4:	30 08       	mov	r8,0
800057d6:	f0 06 18 00 	cp.b	r6,r8
800057da:	c0 35       	brlt	800057e0 <fat_format+0x1c>
800057dc:	30 17       	mov	r7,1
800057de:	c0 88       	rjmp	800057ee <fat_format+0x2a>
   {
      b_MBR = false;
      u8_fat_type &= ~FS_FORMAT_NOMBR_FLAG;
800057e0:	ed d6 c0 07 	bfextu	r6,r6,0x0,0x7
      // partition size = disk size = last LBA + 1
      fs_s_u32_size_partition++;
800057e4:	49 18       	lddpc	r8,80005828 <fat_format+0x64>
800057e6:	70 09       	ld.w	r9,r8[0x0]
800057e8:	2f f9       	sub	r9,-1
800057ea:	91 09       	st.w	r8[0x0],r9
800057ec:	30 07       	mov	r7,0
      b_MBR = true;
      // partition size = size disk -1 = last LBA
   }

   // Compute the FAT type for the device
   if( !fat_select_filesystem( u8_fat_type , b_MBR ))
800057ee:	0e 95       	mov	r5,r7
800057f0:	0e 9b       	mov	r11,r7
800057f2:	0c 9c       	mov	r12,r6
800057f4:	f0 1f 00 10 	mcall	80005834 <fat_format+0x70>
800057f8:	c1 50       	breq	80005822 <fat_format+0x5e>
      return false;

   // Write the MBR sector (first sector)
   if( b_MBR )
800057fa:	58 07       	cp.w	r7,0
800057fc:	c0 40       	breq	80005804 <fat_format+0x40>
      if( !fat_write_MBR())
800057fe:	f0 1f 00 0f 	mcall	80005838 <fat_format+0x74>
80005802:	c1 00       	breq	80005822 <fat_format+0x5e>
         return false;

   // Write the PBR sector
   if( !fat_write_PBR( b_MBR ))
80005804:	0a 9c       	mov	r12,r5
80005806:	f0 1f 00 0e 	mcall	8000583c <fat_format+0x78>
8000580a:	c0 c0       	breq	80005822 <fat_format+0x5e>
      return false;

   // Clear reserved zone, FAT zone, and Root dir zone
   // Remark: the reserved zone of FAT32 isn't initialized, because BPB_FSInfo is equal to 0
   if( !fat_clean_zone( b_MBR ))
8000580c:	0a 9c       	mov	r12,r5
8000580e:	f0 1f 00 0d 	mcall	80005840 <fat_format+0x7c>
80005812:	c0 80       	breq	80005822 <fat_format+0x5e>
      return false;

   // Initialization of the FAT 1 and 2
   if( !fat_initialize_fat())
80005814:	f0 1f 00 0c 	mcall	80005844 <fat_format+0x80>
80005818:	c0 50       	breq	80005822 <fat_format+0x5e>
      return false;

   return fat_cache_flush();
8000581a:	f0 1f 00 0c 	mcall	80005848 <fat_format+0x84>
8000581e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005822:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80005826:	00 00       	add	r0,r0
80005828:	00 00       	add	r0,r0
8000582a:	09 08       	ld.w	r8,r4++
8000582c:	00 00       	add	r0,r0
8000582e:	08 58       	eor	r8,r4
80005830:	80 00       	ld.sh	r0,r0[0x0]
80005832:	74 5c       	ld.w	r12,r10[0x14]
80005834:	80 00       	ld.sh	r0,r0[0x0]
80005836:	46 c8       	lddsp	r8,sp[0x1b0]
80005838:	80 00       	ld.sh	r0,r0[0x0]
8000583a:	4a 60       	lddpc	r0,800058d0 <fat_mount+0x84>
8000583c:	80 00       	ld.sh	r0,r0[0x0]
8000583e:	50 64       	stdsp	sp[0x18],r4
80005840:	80 00       	ld.sh	r0,r0[0x0]
80005842:	57 04       	stdsp	sp[0x1c0],r4
80005844:	80 00       	ld.sh	r0,r0[0x0]
80005846:	4d 38       	lddpc	r8,80005990 <fat_mount+0x144>
80005848:	80 00       	ld.sh	r0,r0[0x0]
8000584a:	3c 28       	mov	r8,-62

8000584c <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
8000584c:	d4 31       	pushm	r0-r7,lr
8000584e:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005850:	30 07       	mov	r7,0
80005852:	fe f8 02 d2 	ld.w	r8,pc[722]
80005856:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005858:	f0 1f 00 b4 	mcall	80005b28 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000585c:	fe f8 02 d0 	ld.w	r8,pc[720]
80005860:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005862:	fe f8 02 ce 	ld.w	r8,pc[718]
80005866:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is availabled
   if( !fat_check_device() )
80005868:	f0 1f 00 b3 	mcall	80005b34 <fat_mount+0x2e8>
8000586c:	e0 80 01 58 	breq	80005b1c <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005870:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80005874:	ea c8 fe 42 	sub	r8,r5,-446
80005878:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
8000587a:	38 04       	mov	r4,-128
8000587c:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
8000587e:	30 1c       	mov	r12,1
80005880:	f0 1f 00 af 	mcall	80005b3c <fat_mount+0x2f0>
80005884:	e0 80 01 4c 	breq	80005b1c <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005888:	eb 39 01 fe 	ld.ub	r9,r5[510]
8000588c:	35 58       	mov	r8,85
8000588e:	f0 09 18 00 	cp.b	r9,r8
80005892:	c0 d0       	breq	800058ac <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005894:	eb 39 01 ff 	ld.ub	r9,r5[511]
80005898:	3a a8       	mov	r8,-86
8000589a:	f0 09 18 00 	cp.b	r9,r8
8000589e:	c0 70       	breq	800058ac <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
800058a0:	30 29       	mov	r9,2
800058a2:	fe f8 02 9e 	ld.w	r8,pc[670]
800058a6:	b0 89       	st.b	r8[0x0],r9
800058a8:	30 0c       	mov	r12,0
         return false;
800058aa:	c3 a9       	rjmp	80005b1e <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
800058ac:	fe f8 02 84 	ld.w	r8,pc[644]
800058b0:	70 08       	ld.w	r8,r8[0x0]
800058b2:	58 08       	cp.w	r8,0
800058b4:	c5 21       	brne	80005958 <fat_mount+0x10c>
800058b6:	40 08       	lddsp	r8,sp[0x0]
800058b8:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800058ba:	30 1e       	mov	lr,1
800058bc:	30 63       	mov	r3,6
800058be:	30 e2       	mov	r2,14
800058c0:	30 b1       	mov	r1,11
800058c2:	30 c0       	mov	r0,12
800058c4:	11 89       	ld.ub	r9,r8[0x0]
800058c6:	e8 09 18 00 	cp.b	r9,r4
800058ca:	5f 0b       	sreq	r11
800058cc:	ee 09 18 00 	cp.b	r9,r7
800058d0:	5f 09       	sreq	r9
800058d2:	f7 e9 10 09 	or	r9,r11,r9
800058d6:	ee 09 18 00 	cp.b	r9,r7
800058da:	c1 90       	breq	8000590c <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
800058dc:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
800058de:	fc 09 18 00 	cp.b	r9,lr
800058e2:	5f 0c       	sreq	r12
800058e4:	ec 09 18 00 	cp.b	r9,r6
800058e8:	5f 0b       	sreq	r11
800058ea:	f9 eb 10 0b 	or	r11,r12,r11
800058ee:	ee 0b 18 00 	cp.b	r11,r7
800058f2:	c1 41       	brne	8000591a <fat_mount+0xce>
800058f4:	e6 09 18 00 	cp.b	r9,r3
800058f8:	c1 10       	breq	8000591a <fat_mount+0xce>
800058fa:	e4 09 18 00 	cp.b	r9,r2
800058fe:	c0 e0       	breq	8000591a <fat_mount+0xce>
80005900:	e2 09 18 00 	cp.b	r9,r1
80005904:	c0 b0       	breq	8000591a <fat_mount+0xce>
80005906:	e0 09 18 00 	cp.b	r9,r0
8000590a:	c0 80       	breq	8000591a <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
8000590c:	2f fa       	sub	r10,-1
8000590e:	5c 5a       	castu.b	r10
80005910:	2f 08       	sub	r8,-16
80005912:	ec 0a 18 00 	cp.b	r10,r6
80005916:	cd 71       	brne	800058c4 <fat_mount+0x78>
80005918:	c2 08       	rjmp	80005958 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
8000591a:	ec 0a 18 00 	cp.b	r10,r6
8000591e:	c1 d0       	breq	80005958 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005920:	fe f3 02 10 	ld.w	r3,pc[528]
80005924:	a5 6a       	lsl	r10,0x4
80005926:	f4 ca fe 42 	sub	r10,r10,-446
8000592a:	ea 0a 00 0a 	add	r10,r5,r10
8000592e:	f5 38 00 08 	ld.ub	r8,r10[8]
80005932:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005934:	f5 38 00 09 	ld.ub	r8,r10[9]
80005938:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
8000593a:	f5 38 00 0a 	ld.ub	r8,r10[10]
8000593e:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005940:	f5 38 00 0b 	ld.ub	r8,r10[11]
80005944:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005946:	4f 88       	lddpc	r8,80005b24 <fat_mount+0x2d8>
80005948:	11 8c       	ld.ub	r12,r8[0x0]
8000594a:	f0 1f 00 7f 	mcall	80005b44 <fat_mount+0x2f8>
8000594e:	66 08       	ld.w	r8,r3[0x0]
80005950:	f8 08 02 48 	mul	r8,r12,r8
80005954:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005956:	c9 4b       	rjmp	8000587e <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005958:	4f 88       	lddpc	r8,80005b38 <fat_mount+0x2ec>
8000595a:	11 89       	ld.ub	r9,r8[0x0]
8000595c:	3e b8       	mov	r8,-21
8000595e:	f0 09 18 00 	cp.b	r9,r8
80005962:	c0 f1       	brne	80005980 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005964:	4f 58       	lddpc	r8,80005b38 <fat_mount+0x2ec>
80005966:	11 a9       	ld.ub	r9,r8[0x2]
80005968:	39 08       	mov	r8,-112
8000596a:	f0 09 18 00 	cp.b	r9,r8
8000596e:	c0 91       	brne	80005980 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005970:	4f 28       	lddpc	r8,80005b38 <fat_mount+0x2ec>
80005972:	f1 38 00 15 	ld.ub	r8,r8[21]
80005976:	e2 18 00 f0 	andl	r8,0xf0,COH
8000597a:	e0 48 00 f0 	cp.w	r8,240
8000597e:	c0 60       	breq	8000598a <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005980:	30 39       	mov	r9,3
80005982:	4f 08       	lddpc	r8,80005b40 <fat_mount+0x2f4>
80005984:	b0 89       	st.b	r8[0x0],r9
80005986:	30 0c       	mov	r12,0
      return false;
80005988:	cc b8       	rjmp	80005b1e <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
8000598a:	30 49       	mov	r9,4
8000598c:	4e d8       	lddpc	r8,80005b40 <fat_mount+0x2f4>
8000598e:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005990:	4e aa       	lddpc	r10,80005b38 <fat_mount+0x2ec>
80005992:	f5 39 00 0c 	ld.ub	r9,r10[12]
80005996:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005998:	f5 38 00 0d 	ld.ub	r8,r10[13]
8000599c:	b3 38       	mul	r8,r9
8000599e:	5c 58       	castu.b	r8
800059a0:	4e 1b       	lddpc	r11,80005b24 <fat_mount+0x2d8>
800059a2:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
800059a4:	30 0b       	mov	r11,0
800059a6:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
800059a8:	fa cb ff fc 	sub	r11,sp,-4
800059ac:	fa c7 ff f9 	sub	r7,sp,-7
800059b0:	f5 3c 00 16 	ld.ub	r12,r10[22]
800059b4:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
800059b6:	fa ce ff fa 	sub	lr,sp,-6
800059ba:	f5 3a 00 17 	ld.ub	r10,r10[23]
800059be:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
800059c0:	40 1a       	lddsp	r10,sp[0x4]
800059c2:	58 0a       	cp.w	r10,0
800059c4:	c0 e1       	brne	800059e0 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
800059c6:	4d da       	lddpc	r10,80005b38 <fat_mount+0x2ec>
800059c8:	f5 3c 00 24 	ld.ub	r12,r10[36]
800059cc:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
800059ce:	f5 3c 00 25 	ld.ub	r12,r10[37]
800059d2:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
800059d4:	f5 3c 00 26 	ld.ub	r12,r10[38]
800059d8:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
800059da:	f5 3a 00 27 	ld.ub	r10,r10[39]
800059de:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
800059e0:	12 95       	mov	r5,r9
800059e2:	40 1c       	lddsp	r12,sp[0x4]
800059e4:	f2 0c 02 4c 	mul	r12,r9,r12
800059e8:	4c fa       	lddpc	r10,80005b24 <fat_mount+0x2d8>
800059ea:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
800059ec:	4d 3a       	lddpc	r10,80005b38 <fat_mount+0x2ec>
800059ee:	f5 3a 00 13 	ld.ub	r10,r10[19]
800059f2:	58 0a       	cp.w	r10,0
800059f4:	c1 61       	brne	80005a20 <fat_mount+0x1d4>
800059f6:	4d 16       	lddpc	r6,80005b38 <fat_mount+0x2ec>
800059f8:	ed 34 00 14 	ld.ub	r4,r6[20]
800059fc:	30 06       	mov	r6,0
800059fe:	ec 04 18 00 	cp.b	r4,r6
80005a02:	c0 f1       	brne	80005a20 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80005a04:	4c da       	lddpc	r10,80005b38 <fat_mount+0x2ec>
80005a06:	f5 36 00 20 	ld.ub	r6,r10[32]
80005a0a:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005a0c:	f5 37 00 21 	ld.ub	r7,r10[33]
80005a10:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80005a12:	f5 3e 00 22 	ld.ub	lr,r10[34]
80005a16:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005a18:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005a1c:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005a1e:	c0 98       	rjmp	80005a30 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005a20:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80005a22:	4c 6a       	lddpc	r10,80005b38 <fat_mount+0x2ec>
80005a24:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005a28:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005a2a:	30 0a       	mov	r10,0
80005a2c:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005a2e:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005a30:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80005a32:	4b da       	lddpc	r10,80005b24 <fat_mount+0x2d8>
80005a34:	f8 0b 15 01 	lsl	r11,r12,0x1
80005a38:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005a3c:	fa c6 ff f6 	sub	r6,sp,-10
80005a40:	fa c7 ff f4 	sub	r7,sp,-12
80005a44:	4b db       	lddpc	r11,80005b38 <fat_mount+0x2ec>
80005a46:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005a4a:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005a4c:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005a50:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80005a52:	f2 03 15 04 	lsl	r3,r9,0x4
80005a56:	9a de       	ld.uh	lr,sp[0xa]
80005a58:	e6 0e 00 0e 	add	lr,r3,lr
80005a5c:	a5 7e       	lsl	lr,0x5
80005a5e:	20 1e       	sub	lr,1
80005a60:	f2 03 15 09 	lsl	r3,r9,0x9
80005a64:	fc 03 0c 02 	divs	r2,lr,r3
80005a68:	e4 09 02 4e 	mul	lr,r2,r9
80005a6c:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005a70:	f7 33 00 0e 	ld.ub	r3,r11[14]
80005a74:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80005a76:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005a7a:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005a7c:	9a 57       	ld.sh	r7,sp[0xa]
80005a7e:	f7 3b 00 30 	ld.ub	r11,r11[48]
80005a82:	0e 96       	mov	r6,r7
80005a84:	ee 0b 01 0b 	sub	r11,r7,r11
80005a88:	b3 3b       	mul	r11,r9
80005a8a:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80005a8c:	ee 09 02 49 	mul	r9,r7,r9
80005a90:	5c 79       	castu.h	r9
80005a92:	4a 8b       	lddpc	r11,80005b30 <fat_mount+0x2e4>
80005a94:	76 0b       	ld.w	r11,r11[0x0]
80005a96:	f2 0b 00 0b 	add	r11,r9,r11
80005a9a:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80005a9c:	5c 7e       	castu.h	lr
80005a9e:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80005aa2:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80005aa4:	58 08       	cp.w	r8,0
80005aa6:	c3 b0       	breq	80005b1c <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80005aa8:	a9 35       	mul	r5,r4
80005aaa:	ea 09 01 09 	sub	r9,r5,r9
80005aae:	18 19       	sub	r9,r12
80005ab0:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005ab2:	30 1a       	mov	r10,1
80005ab4:	f4 08 18 00 	cp.b	r8,r10
80005ab8:	c0 70       	breq	80005ac6 <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80005aba:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005abc:	a1 98       	lsr	r8,0x1
80005abe:	f4 08 18 00 	cp.b	r8,r10
80005ac2:	cf c1       	brne	80005aba <fat_mount+0x26e>
80005ac4:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80005ac6:	40 18       	lddsp	r8,sp[0x4]
80005ac8:	f0 ca ff fe 	sub	r10,r8,-2
80005acc:	49 69       	lddpc	r9,80005b24 <fat_mount+0x2d8>
80005ace:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80005ad0:	e0 48 0f f4 	cp.w	r8,4084
80005ad4:	e0 8b 00 07 	brhi	80005ae2 <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80005ad8:	30 19       	mov	r9,1
80005ada:	49 58       	lddpc	r8,80005b2c <fat_mount+0x2e0>
80005adc:	b0 89       	st.b	r8[0x0],r9
80005ade:	30 1c       	mov	r12,1
80005ae0:	c1 f8       	rjmp	80005b1e <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80005ae2:	e0 48 ff f4 	cp.w	r8,65524
80005ae6:	e0 8b 00 07 	brhi	80005af4 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80005aea:	30 29       	mov	r9,2
80005aec:	49 08       	lddpc	r8,80005b2c <fat_mount+0x2e0>
80005aee:	b0 89       	st.b	r8[0x0],r9
80005af0:	30 1c       	mov	r12,1
80005af2:	c1 68       	rjmp	80005b1e <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80005af4:	30 39       	mov	r9,3
80005af6:	48 e8       	lddpc	r8,80005b2c <fat_mount+0x2e0>
80005af8:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80005afa:	48 b8       	lddpc	r8,80005b24 <fat_mount+0x2d8>
80005afc:	2e 88       	sub	r8,-24
80005afe:	48 f9       	lddpc	r9,80005b38 <fat_mount+0x2ec>
80005b00:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80005b04:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80005b06:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80005b0a:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80005b0c:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80005b10:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80005b12:	f3 39 00 2f 	ld.ub	r9,r9[47]
80005b16:	b0 89       	st.b	r8[0x0],r9
80005b18:	30 1c       	mov	r12,1
80005b1a:	c0 28       	rjmp	80005b1e <fat_mount+0x2d2>
80005b1c:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80005b1e:	2f dd       	sub	sp,-12
80005b20:	d8 32       	popm	r0-r7,pc
80005b22:	00 00       	add	r0,r0
80005b24:	00 00       	add	r0,r0
80005b26:	08 58       	eor	r8,r4
80005b28:	80 00       	ld.sh	r0,r0[0x0]
80005b2a:	35 f8       	mov	r8,95
80005b2c:	00 00       	add	r0,r0
80005b2e:	08 a4       	st.w	r4++,r4
80005b30:	00 00       	add	r0,r0
80005b32:	06 14       	sub	r4,r3
80005b34:	80 00       	ld.sh	r0,r0[0x0]
80005b36:	45 24       	lddsp	r4,sp[0x148]
80005b38:	00 00       	add	r0,r0
80005b3a:	06 58       	eor	r8,r3
80005b3c:	80 00       	ld.sh	r0,r0[0x0]
80005b3e:	3c 94       	mov	r4,-55
80005b40:	00 00       	add	r0,r0
80005b42:	08 a8       	st.w	r4++,r8
80005b44:	80 00       	ld.sh	r0,r0[0x0]
80005b46:	74 84       	ld.w	r4,r10[0x20]

80005b48 <file_load_segment_value>:
//!
//! @param     segment  Pointer on the variable to fill
//!
static void file_load_segment_value( Fs_file_segment _MEM_TYPE_SLOW_ *segment )
{
   segment->u8_lun = fs_g_nav.u8_lun;
80005b48:	48 58       	lddpc	r8,80005b5c <file_load_segment_value+0x14>
80005b4a:	11 88       	ld.ub	r8,r8[0x0]
80005b4c:	b8 88       	st.b	r12[0x0],r8
   segment->u32_addr = fs_g_seg.u32_addr;
80005b4e:	48 58       	lddpc	r8,80005b60 <file_load_segment_value+0x18>
80005b50:	70 09       	ld.w	r9,r8[0x0]
80005b52:	99 19       	st.w	r12[0x4],r9
   segment->u16_size = fs_g_seg.u32_size_or_pos;
80005b54:	70 18       	ld.w	r8,r8[0x4]
80005b56:	b8 48       	st.h	r12[0x8],r8
}
80005b58:	5e fc       	retal	r12
80005b5a:	00 00       	add	r0,r0
80005b5c:	00 00       	add	r0,r0
80005b5e:	08 58       	eor	r8,r4
80005b60:	00 00       	add	r0,r0
80005b62:	09 00       	ld.w	r0,r4++

80005b64 <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
uint8_t    file_eof( void )
{
80005b64:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80005b66:	f0 1f 00 07 	mcall	80005b80 <file_eof+0x1c>
80005b6a:	c0 41       	brne	80005b72 <file_eof+0xe>
80005b6c:	e0 6c 00 ff 	mov	r12,255
80005b70:	d8 02       	popm	pc
      return 0xFF;
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
80005b72:	48 58       	lddpc	r8,80005b84 <file_eof+0x20>
80005b74:	70 29       	ld.w	r9,r8[0x8]
80005b76:	70 38       	ld.w	r8,r8[0xc]
80005b78:	10 39       	cp.w	r9,r8
80005b7a:	5f 8c       	srls	r12
}
80005b7c:	d8 02       	popm	pc
80005b7e:	00 00       	add	r0,r0
80005b80:	80 00       	ld.sh	r0,r0[0x0]
80005b82:	46 68       	lddsp	r8,sp[0x198]
80005b84:	00 00       	add	r0,r0
80005b86:	06 18       	sub	r8,r3

80005b88 <file_seek>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_seek( uint32_t u32_pos , uint8_t u8_whence )
{
80005b88:	eb cd 40 c0 	pushm	r6-r7,lr
80005b8c:	18 96       	mov	r6,r12
80005b8e:	16 97       	mov	r7,r11
   if( !fat_check_mount_select_open())
80005b90:	f0 1f 00 28 	mcall	80005c30 <file_seek+0xa8>
80005b94:	c4 c0       	breq	80005c2c <file_seek+0xa4>
      return false;

   switch(u8_whence)
80005b96:	30 18       	mov	r8,1
80005b98:	f0 07 18 00 	cp.b	r7,r8
80005b9c:	c2 90       	breq	80005bee <file_seek+0x66>
80005b9e:	c1 a3       	brcs	80005bd2 <file_seek+0x4a>
80005ba0:	30 28       	mov	r8,2
80005ba2:	f0 07 18 00 	cp.b	r7,r8
80005ba6:	c0 70       	breq	80005bb4 <file_seek+0x2c>
80005ba8:	30 38       	mov	r8,3
80005baa:	f0 07 18 00 	cp.b	r7,r8
80005bae:	c3 00       	breq	80005c0e <file_seek+0x86>
80005bb0:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   {
      case FS_SEEK_CUR_RE:
      if( fs_g_nav_entry.u32_pos_in_file < u32_pos )
80005bb4:	4a 08       	lddpc	r8,80005c34 <file_seek+0xac>
80005bb6:	70 38       	ld.w	r8,r8[0xc]
80005bb8:	0c 38       	cp.w	r8,r6
80005bba:	c0 62       	brcc	80005bc6 <file_seek+0x3e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80005bbc:	30 79       	mov	r9,7
80005bbe:	49 f8       	lddpc	r8,80005c38 <file_seek+0xb0>
80005bc0:	b0 89       	st.b	r8[0x0],r9
80005bc2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file -= u32_pos;
80005bc6:	49 c9       	lddpc	r9,80005c34 <file_seek+0xac>
80005bc8:	f0 06 01 06 	sub	r6,r8,r6
80005bcc:	93 36       	st.w	r9[0xc],r6
80005bce:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_SET:
      if( fs_g_nav_entry.u32_size < u32_pos )
80005bd2:	49 98       	lddpc	r8,80005c34 <file_seek+0xac>
80005bd4:	70 28       	ld.w	r8,r8[0x8]
80005bd6:	10 36       	cp.w	r6,r8
80005bd8:	e0 88 00 07 	brls	80005be6 <file_seek+0x5e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80005bdc:	30 79       	mov	r9,7
80005bde:	49 78       	lddpc	r8,80005c38 <file_seek+0xb0>
80005be0:	b0 89       	st.b	r8[0x0],r9
80005be2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = u32_pos;
80005be6:	49 48       	lddpc	r8,80005c34 <file_seek+0xac>
80005be8:	91 36       	st.w	r8[0xc],r6
80005bea:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_END:
      if( fs_g_nav_entry.u32_size < u32_pos )
80005bee:	49 28       	lddpc	r8,80005c34 <file_seek+0xac>
80005bf0:	70 28       	ld.w	r8,r8[0x8]
80005bf2:	10 36       	cp.w	r6,r8
80005bf4:	e0 88 00 07 	brls	80005c02 <file_seek+0x7a>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80005bf8:	30 79       	mov	r9,7
80005bfa:	49 08       	lddpc	r8,80005c38 <file_seek+0xb0>
80005bfc:	b0 89       	st.b	r8[0x0],r9
80005bfe:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size - u32_pos;
80005c02:	48 d9       	lddpc	r9,80005c34 <file_seek+0xac>
80005c04:	f0 06 01 06 	sub	r6,r8,r6
80005c08:	93 36       	st.w	r9[0xc],r6
80005c0a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_CUR_FW:
      u32_pos += fs_g_nav_entry.u32_pos_in_file;
80005c0e:	48 a8       	lddpc	r8,80005c34 <file_seek+0xac>
80005c10:	70 39       	ld.w	r9,r8[0xc]
80005c12:	12 06       	add	r6,r9
      if( fs_g_nav_entry.u32_size < u32_pos )
80005c14:	70 28       	ld.w	r8,r8[0x8]
80005c16:	10 36       	cp.w	r6,r8
80005c18:	e0 88 00 07 	brls	80005c26 <file_seek+0x9e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80005c1c:	30 79       	mov	r9,7
80005c1e:	48 78       	lddpc	r8,80005c38 <file_seek+0xb0>
80005c20:	b0 89       	st.b	r8[0x0],r9
80005c22:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = u32_pos;
80005c26:	48 48       	lddpc	r8,80005c34 <file_seek+0xac>
80005c28:	91 36       	st.w	r8[0xc],r6
80005c2a:	30 1c       	mov	r12,1
      break;
   }
   return true;
}
80005c2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005c30:	80 00       	ld.sh	r0,r0[0x0]
80005c32:	46 68       	lddsp	r8,sp[0x198]
80005c34:	00 00       	add	r0,r0
80005c36:	06 18       	sub	r8,r3
80005c38:	00 00       	add	r0,r0
80005c3a:	08 a8       	st.w	r4++,r8

80005c3c <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80005c3c:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80005c3e:	f0 1f 00 0a 	mcall	80005c64 <file_close+0x28>
80005c42:	c1 00       	breq	80005c62 <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
80005c44:	48 98       	lddpc	r8,80005c68 <file_close+0x2c>
80005c46:	11 88       	ld.ub	r8,r8[0x0]
80005c48:	e2 18 00 02 	andl	r8,0x2,COH
80005c4c:	c0 80       	breq	80005c5c <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
80005c4e:	f0 1f 00 08 	mcall	80005c6c <file_close+0x30>
80005c52:	c0 80       	breq	80005c62 <file_close+0x26>
            return;           // error
         fat_write_entry_file();
80005c54:	f0 1f 00 07 	mcall	80005c70 <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80005c58:	f0 1f 00 07 	mcall	80005c74 <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80005c5c:	30 09       	mov	r9,0
80005c5e:	48 38       	lddpc	r8,80005c68 <file_close+0x2c>
80005c60:	b0 89       	st.b	r8[0x0],r9
80005c62:	d8 02       	popm	pc
80005c64:	80 00       	ld.sh	r0,r0[0x0]
80005c66:	46 68       	lddsp	r8,sp[0x198]
80005c68:	00 00       	add	r0,r0
80005c6a:	06 18       	sub	r8,r3
80005c6c:	80 00       	ld.sh	r0,r0[0x0]
80005c6e:	42 bc       	lddsp	r12,sp[0xac]
80005c70:	80 00       	ld.sh	r0,r0[0x0]
80005c72:	39 dc       	mov	r12,-99
80005c74:	80 00       	ld.sh	r0,r0[0x0]
80005c76:	3c 28       	mov	r8,-62

80005c78 <file_write>:
//! because this routine returns a physical memory segment without File System information.
//! Note: the file can be fragmented and you must call file_write() for each fragments.
//! @endverbatim
//!
bool  file_write( Fs_file_segment _MEM_TYPE_SLOW_ *segment )
{
80005c78:	eb cd 40 80 	pushm	r7,lr
80005c7c:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_open())
80005c7e:	f0 1f 00 19 	mcall	80005ce0 <file_write+0x68>
80005c82:	c2 c0       	breq	80005cda <file_write+0x62>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80005c84:	49 88       	lddpc	r8,80005ce4 <file_write+0x6c>
80005c86:	11 88       	ld.ub	r8,r8[0x0]
80005c88:	e2 18 00 02 	andl	r8,0x2,COH
80005c8c:	c0 61       	brne	80005c98 <file_write+0x20>
   {
      fs_g_status = FS_ERR_READ_ONLY;
80005c8e:	31 59       	mov	r9,21
80005c90:	49 68       	lddpc	r8,80005ce8 <file_write+0x70>
80005c92:	b0 89       	st.b	r8[0x0],r9
80005c94:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if( !fat_write_file( FS_CLUST_ACT_SEG , segment->u16_size ))
80005c98:	8e cb       	ld.uh	r11,r7[0x8]
80005c9a:	30 1c       	mov	r12,1
80005c9c:	f0 1f 00 14 	mcall	80005cec <file_write+0x74>
80005ca0:	c1 d0       	breq	80005cda <file_write+0x62>
      return false;

   // If the segment is too large then truncate it
   if( (segment->u16_size != 0)  // if not undefine limit
80005ca2:	8e 48       	ld.sh	r8,r7[0x8]
80005ca4:	58 08       	cp.w	r8,0
80005ca6:	c0 80       	breq	80005cb6 <file_write+0x3e>
   &&  (segment->u16_size < fs_g_seg.u32_size_or_pos) )
80005ca8:	5c 78       	castu.h	r8

   if( !fat_write_file( FS_CLUST_ACT_SEG , segment->u16_size ))
      return false;

   // If the segment is too large then truncate it
   if( (segment->u16_size != 0)  // if not undefine limit
80005caa:	49 29       	lddpc	r9,80005cf0 <file_write+0x78>
80005cac:	72 19       	ld.w	r9,r9[0x4]
80005cae:	12 38       	cp.w	r8,r9
80005cb0:	c0 32       	brcc	80005cb6 <file_write+0x3e>
   &&  (segment->u16_size < fs_g_seg.u32_size_or_pos) )
   {
      fs_g_seg.u32_size_or_pos = segment->u16_size ;
80005cb2:	49 09       	lddpc	r9,80005cf0 <file_write+0x78>
80005cb4:	93 18       	st.w	r9[0x4],r8
   }

   // Update file position
   fs_g_nav_entry.u32_pos_in_file += ((uint32_t)fs_g_seg.u32_size_or_pos * FS_512B);
80005cb6:	48 f8       	lddpc	r8,80005cf0 <file_write+0x78>
80005cb8:	70 19       	ld.w	r9,r8[0x4]
80005cba:	a9 79       	lsl	r9,0x9
80005cbc:	48 a8       	lddpc	r8,80005ce4 <file_write+0x6c>
80005cbe:	70 3a       	ld.w	r10,r8[0xc]
80005cc0:	14 09       	add	r9,r10
80005cc2:	91 39       	st.w	r8[0xc],r9

   // Update size file
   if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
80005cc4:	70 28       	ld.w	r8,r8[0x8]
80005cc6:	10 39       	cp.w	r9,r8
80005cc8:	e0 88 00 04 	brls	80005cd0 <file_write+0x58>
   {
      fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
80005ccc:	48 68       	lddpc	r8,80005ce4 <file_write+0x6c>
80005cce:	91 29       	st.w	r8[0x8],r9
   }
   file_load_segment_value( segment );
80005cd0:	0e 9c       	mov	r12,r7
80005cd2:	f0 1f 00 09 	mcall	80005cf4 <file_write+0x7c>
80005cd6:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   return true;
80005cda:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80005cde:	00 00       	add	r0,r0
80005ce0:	80 00       	ld.sh	r0,r0[0x0]
80005ce2:	46 68       	lddsp	r8,sp[0x198]
80005ce4:	00 00       	add	r0,r0
80005ce6:	06 18       	sub	r8,r3
80005ce8:	00 00       	add	r0,r0
80005cea:	08 a8       	st.w	r4++,r8
80005cec:	80 00       	ld.sh	r0,r0[0x0]
80005cee:	44 1c       	lddsp	r12,sp[0x104]
80005cf0:	00 00       	add	r0,r0
80005cf2:	09 00       	ld.w	r0,r4++
80005cf4:	80 00       	ld.sh	r0,r0[0x0]
80005cf6:	5b 48       	cp.w	r8,-12

80005cf8 <file_putc>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_putc( uint8_t u8_byte )
{
80005cf8:	eb cd 40 80 	pushm	r7,lr
80005cfc:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_open())
80005cfe:	f0 1f 00 15 	mcall	80005d50 <file_putc+0x58>
80005d02:	c2 50       	breq	80005d4c <file_putc+0x54>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80005d04:	49 48       	lddpc	r8,80005d54 <file_putc+0x5c>
80005d06:	11 88       	ld.ub	r8,r8[0x0]
80005d08:	e2 18 00 02 	andl	r8,0x2,COH
80005d0c:	c0 61       	brne	80005d18 <file_putc+0x20>
   {
      fs_g_status = FS_ERR_READ_ONLY;
80005d0e:	31 59       	mov	r9,21
80005d10:	49 28       	lddpc	r8,80005d58 <file_putc+0x60>
80005d12:	b0 89       	st.b	r8[0x0],r9
80005d14:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
80005d18:	30 1b       	mov	r11,1
80005d1a:	30 2c       	mov	r12,2
80005d1c:	f0 1f 00 10 	mcall	80005d5c <file_putc+0x64>
80005d20:	c1 60       	breq	80005d4c <file_putc+0x54>
      return false;

   // Write the data in the internal cache
   fat_cache_mark_sector_as_dirty();
80005d22:	f0 1f 00 10 	mcall	80005d60 <file_putc+0x68>
   fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ]    = u8_byte;
80005d26:	48 c8       	lddpc	r8,80005d54 <file_putc+0x5c>
80005d28:	70 39       	ld.w	r9,r8[0xc]
80005d2a:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80005d2e:	48 eb       	lddpc	r11,80005d64 <file_putc+0x6c>
80005d30:	f6 0a 0b 07 	st.b	r11[r10],r7
   fs_g_nav_entry.u32_pos_in_file++;
80005d34:	2f f9       	sub	r9,-1
80005d36:	91 39       	st.w	r8[0xc],r9

   // Update the file size
   if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
80005d38:	70 28       	ld.w	r8,r8[0x8]
80005d3a:	10 39       	cp.w	r9,r8
80005d3c:	e0 8b 00 04 	brhi	80005d44 <file_putc+0x4c>
80005d40:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
80005d44:	48 48       	lddpc	r8,80005d54 <file_putc+0x5c>
80005d46:	91 29       	st.w	r8[0x8],r9
80005d48:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80005d4c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80005d50:	80 00       	ld.sh	r0,r0[0x0]
80005d52:	46 68       	lddsp	r8,sp[0x198]
80005d54:	00 00       	add	r0,r0
80005d56:	06 18       	sub	r8,r3
80005d58:	00 00       	add	r0,r0
80005d5a:	08 a8       	st.w	r4++,r8
80005d5c:	80 00       	ld.sh	r0,r0[0x0]
80005d5e:	44 1c       	lddsp	r12,sp[0x104]
80005d60:	80 00       	ld.sh	r0,r0[0x0]
80005d62:	39 cc       	mov	r12,-100
80005d64:	00 00       	add	r0,r0
80005d66:	06 58       	eor	r8,r3

80005d68 <file_set_eof>:
//! The file_write() routine uses the sector unit (512B),
//! and you can set a specific byte size with a file_seek() call and fiel_set_eof() call.
//! @endverbatim
//!
bool  file_set_eof( void )
{
80005d68:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open())
80005d6a:	f0 1f 00 0c 	mcall	80005d98 <file_set_eof+0x30>
80005d6e:	c1 40       	breq	80005d96 <file_set_eof+0x2e>
      return false;

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80005d70:	48 b8       	lddpc	r8,80005d9c <file_set_eof+0x34>
80005d72:	11 88       	ld.ub	r8,r8[0x0]
80005d74:	e2 18 00 02 	andl	r8,0x2,COH
80005d78:	c0 51       	brne	80005d82 <file_set_eof+0x1a>
   {
      fs_g_status = FS_ERR_READ_ONLY;
80005d7a:	31 59       	mov	r9,21
80005d7c:	48 98       	lddpc	r8,80005da0 <file_set_eof+0x38>
80005d7e:	b0 89       	st.b	r8[0x0],r9
80005d80:	d8 0a       	popm	pc,r12=0
      return false;
   }

   // Update the file size
   fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
80005d82:	48 78       	lddpc	r8,80005d9c <file_set_eof+0x34>
80005d84:	70 39       	ld.w	r9,r8[0xc]
80005d86:	91 29       	st.w	r8[0x8],r9

   if( !fat_read_file( FS_CLUST_ACT_CLR ))
80005d88:	30 3c       	mov	r12,3
80005d8a:	f0 1f 00 07 	mcall	80005da4 <file_set_eof+0x3c>
80005d8e:	c0 40       	breq	80005d96 <file_set_eof+0x2e>
      return false;

   return fat_cache_flush();
80005d90:	f0 1f 00 06 	mcall	80005da8 <file_set_eof+0x40>
80005d94:	d8 02       	popm	pc
80005d96:	d8 0a       	popm	pc,r12=0
80005d98:	80 00       	ld.sh	r0,r0[0x0]
80005d9a:	46 68       	lddsp	r8,sp[0x198]
80005d9c:	00 00       	add	r0,r0
80005d9e:	06 18       	sub	r8,r3
80005da0:	00 00       	add	r0,r0
80005da2:	08 a8       	st.w	r4++,r8
80005da4:	80 00       	ld.sh	r0,r0[0x0]
80005da6:	43 40       	lddsp	r0,sp[0xd0]
80005da8:	80 00       	ld.sh	r0,r0[0x0]
80005daa:	3c 28       	mov	r8,-62

80005dac <file_getc>:
//!
//! @return    The byte readed
//! @return    EOF, in case of error or end of file
//!
uint16_t   file_getc( void )
{
80005dac:	d4 01       	pushm	lr
   uint16_t   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80005dae:	49 78       	lddpc	r8,80005e08 <file_getc+0x5c>
80005db0:	11 88       	ld.ub	r8,r8[0x0]
80005db2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005db6:	c0 51       	brne	80005dc0 <file_getc+0x14>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
80005db8:	31 e9       	mov	r9,30
80005dba:	49 58       	lddpc	r8,80005e0c <file_getc+0x60>
80005dbc:	b0 89       	st.b	r8[0x0],r9
80005dbe:	dc 0a       	popm	pc,r12=-1
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
80005dc0:	49 28       	lddpc	r8,80005e08 <file_getc+0x5c>
80005dc2:	70 29       	ld.w	r9,r8[0x8]
80005dc4:	70 38       	ld.w	r8,r8[0xc]
80005dc6:	10 39       	cp.w	r9,r8
80005dc8:	e0 8b 00 06 	brhi	80005dd4 <file_getc+0x28>
      {
         fs_g_status = FS_ERR_EOF;
80005dcc:	32 09       	mov	r9,32
80005dce:	49 08       	lddpc	r8,80005e0c <file_getc+0x60>
80005dd0:	b0 89       	st.b	r8[0x0],r9
80005dd2:	dc 0a       	popm	pc,r12=-1
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
80005dd4:	30 2c       	mov	r12,2
80005dd6:	f0 1f 00 0f 	mcall	80005e10 <file_getc+0x64>
80005dda:	c0 c1       	brne	80005df2 <file_getc+0x46>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
80005ddc:	48 c8       	lddpc	r8,80005e0c <file_getc+0x60>
80005dde:	11 89       	ld.ub	r9,r8[0x0]
80005de0:	31 a8       	mov	r8,26
80005de2:	f0 09 18 00 	cp.b	r9,r8
80005de6:	c0 20       	breq	80005dea <file_getc+0x3e>
80005de8:	dc 0a       	popm	pc,r12=-1
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
80005dea:	32 09       	mov	r9,32
80005dec:	48 88       	lddpc	r8,80005e0c <file_getc+0x60>
80005dee:	b0 89       	st.b	r8[0x0],r9
80005df0:	dc 0a       	popm	pc,r12=-1
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
80005df2:	48 68       	lddpc	r8,80005e08 <file_getc+0x5c>
80005df4:	70 39       	ld.w	r9,r8[0xc]
80005df6:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80005dfa:	48 7b       	lddpc	r11,80005e14 <file_getc+0x68>
80005dfc:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
      fs_g_nav_entry.u32_pos_in_file++;
80005e00:	2f f9       	sub	r9,-1
80005e02:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
   }
   return FS_EOF;   // No data readed
}
80005e04:	d8 02       	popm	pc
80005e06:	00 00       	add	r0,r0
80005e08:	00 00       	add	r0,r0
80005e0a:	06 18       	sub	r8,r3
80005e0c:	00 00       	add	r0,r0
80005e0e:	08 a8       	st.w	r4++,r8
80005e10:	80 00       	ld.sh	r0,r0[0x0]
80005e12:	43 40       	lddsp	r0,sp[0xd0]
80005e14:	00 00       	add	r0,r0
80005e16:	06 58       	eor	r8,r3

80005e18 <file_read>:
//! because this routine returns a physical memory segment without File System information.
//! Note: the file can be fragmented and you must call file_read() for each fragments.
//! @endverbatim
//!
bool  file_read( Fs_file_segment _MEM_TYPE_SLOW_ *segment )
{
80005e18:	eb cd 40 b0 	pushm	r4-r5,r7,lr
80005e1c:	18 97       	mov	r7,r12
   uint8_t u8_nb_sector_truncated;

   if( !fat_check_mount_select_open())
80005e1e:	f0 1f 00 34 	mcall	80005eec <file_read+0xd4>
80005e22:	c6 20       	breq	80005ee6 <file_read+0xce>
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80005e24:	4b 38       	lddpc	r8,80005ef0 <file_read+0xd8>
80005e26:	11 88       	ld.ub	r8,r8[0x0]
80005e28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005e2c:	c0 61       	brne	80005e38 <file_read+0x20>
   {
      fs_g_status = FS_ERR_WRITE_ONLY;
80005e2e:	31 e9       	mov	r9,30
80005e30:	4b 18       	lddpc	r8,80005ef4 <file_read+0xdc>
80005e32:	b0 89       	st.b	r8[0x0],r9
80005e34:	e3 cf 80 b0 	ldm	sp++,r4-r5,r7,pc,r12=0
      return false;
   }

   if ( file_eof() )
80005e38:	f0 1f 00 30 	mcall	80005ef8 <file_read+0xe0>
80005e3c:	c0 60       	breq	80005e48 <file_read+0x30>
   {
      // End of the file
      fs_g_status = FS_ERR_EOF;
80005e3e:	32 09       	mov	r9,32
80005e40:	4a d8       	lddpc	r8,80005ef4 <file_read+0xdc>
80005e42:	b0 89       	st.b	r8[0x0],r9
80005e44:	e3 cf 80 b0 	ldm	sp++,r4-r5,r7,pc,r12=0
      return false;
   }

   if( !fat_read_file(FS_CLUST_ACT_SEG))
80005e48:	30 1c       	mov	r12,1
80005e4a:	f0 1f 00 2d 	mcall	80005efc <file_read+0xe4>
80005e4e:	c0 c1       	brne	80005e66 <file_read+0x4e>
   {
      if( FS_ERR_OUT_LIST == fs_g_status )
80005e50:	4a 98       	lddpc	r8,80005ef4 <file_read+0xdc>
80005e52:	11 89       	ld.ub	r9,r8[0x0]
80005e54:	31 a8       	mov	r8,26
80005e56:	f0 09 18 00 	cp.b	r9,r8
80005e5a:	c4 61       	brne	80005ee6 <file_read+0xce>
         fs_g_status = FS_ERR_EOF;  // translate the error
80005e5c:	32 09       	mov	r9,32
80005e5e:	4a 68       	lddpc	r8,80005ef4 <file_read+0xdc>
80005e60:	b0 89       	st.b	r8[0x0],r9
80005e62:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc
      return false;
   }
   // If the segment is too large then truncate it
   if( (segment->u16_size != 0)                          // if no limit then no truncate
80005e66:	8e 48       	ld.sh	r8,r7[0x8]
80005e68:	58 08       	cp.w	r8,0
80005e6a:	c0 e0       	breq	80005e86 <file_read+0x6e>
   &&  (segment->u16_size < fs_g_seg.u32_size_or_pos) )
80005e6c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80005e70:	4a 4a       	lddpc	r10,80005f00 <file_read+0xe8>
80005e72:	74 1a       	ld.w	r10,r10[0x4]
      if( FS_ERR_OUT_LIST == fs_g_status )
         fs_g_status = FS_ERR_EOF;  // translate the error
      return false;
   }
   // If the segment is too large then truncate it
   if( (segment->u16_size != 0)                          // if no limit then no truncate
80005e74:	14 39       	cp.w	r9,r10
80005e76:	c0 82       	brcc	80005e86 <file_read+0x6e>
   &&  (segment->u16_size < fs_g_seg.u32_size_or_pos) )
   {
      u8_nb_sector_truncated   = fs_g_seg.u32_size_or_pos - segment->u16_size;
80005e78:	f4 08 01 08 	sub	r8,r10,r8
80005e7c:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
      fs_g_seg.u32_size_or_pos = segment->u16_size ;
80005e80:	4a 08       	lddpc	r8,80005f00 <file_read+0xe8>
80005e82:	91 19       	st.w	r8[0x4],r9
      if( FS_ERR_OUT_LIST == fs_g_status )
         fs_g_status = FS_ERR_EOF;  // translate the error
      return false;
   }
   // If the segment is too large then truncate it
   if( (segment->u16_size != 0)                          // if no limit then no truncate
80005e84:	c0 28       	rjmp	80005e88 <file_read+0x70>
80005e86:	30 0c       	mov	r12,0
   }else{
      u8_nb_sector_truncated = 0;
   }

   // Update file position
   fs_g_nav_entry.u32_pos_in_file += (uint32_t)fs_g_seg.u32_size_or_pos * FS_512B;
80005e88:	49 e9       	lddpc	r9,80005f00 <file_read+0xe8>
80005e8a:	72 1a       	ld.w	r10,r9[0x4]
80005e8c:	f4 0b 15 09 	lsl	r11,r10,0x9
80005e90:	49 88       	lddpc	r8,80005ef0 <file_read+0xd8>
80005e92:	70 39       	ld.w	r9,r8[0xc]
80005e94:	f6 09 00 09 	add	r9,r11,r9
80005e98:	91 39       	st.w	r8[0xc],r9
   if( fs_g_nav_entry.u32_size < fs_g_nav_entry.u32_pos_in_file )
80005e9a:	70 2b       	ld.w	r11,r8[0x8]
80005e9c:	16 39       	cp.w	r9,r11
80005e9e:	e0 88 00 1f 	brls	80005edc <file_read+0xc4>
      // then compute sectors not used in last cluster of file cluster list
      uint8_t u8_nb_sector_not_used;

      // Compute the number of sector used in last cluster
      // remark: also the two first bytes of size is used, because the cluster size can't be more larger then 64KB
      u8_nb_sector_not_used = LSB1( fs_g_nav_entry.u32_size ) >> (FS_512B_SHIFT_BIT-8);
80005ea2:	f1 38 00 0a 	ld.ub	r8,r8[10]
80005ea6:	a1 98       	lsr	r8,0x1
      if( 0 != (fs_g_nav_entry.u32_size & FS_512B_MASK) )
80005ea8:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80005eac:	c0 30       	breq	80005eb2 <file_read+0x9a>
      {  // last sector of file isn't full, but it must been read
         u8_nb_sector_not_used++;
80005eae:	2f f8       	sub	r8,-1
80005eb0:	5c 58       	castu.b	r8
      }

      // Compute the number of sector not used in last cluster
      u8_nb_sector_not_used = fs_g_nav.u8_BPB_SecPerClus - (u8_nb_sector_not_used % fs_g_nav.u8_BPB_SecPerClus);
80005eb2:	49 5b       	lddpc	r11,80005f04 <file_read+0xec>
80005eb4:	17 9b       	ld.ub	r11,r11[0x1]
80005eb6:	f0 0b 0d 04 	divu	r4,r8,r11
80005eba:	f6 05 01 08 	sub	r8,r11,r5
80005ebe:	5c 58       	castu.b	r8
      // if all space of cluster isn't used, then it is wrong
      if( u8_nb_sector_not_used == fs_g_nav.u8_BPB_SecPerClus )
80005ec0:	f0 0b 18 00 	cp.b	r11,r8
80005ec4:	f9 b8 00 00 	moveq	r8,0
         u8_nb_sector_not_used = 0; // The file uses all last cluster space

      // Subtract this value a the file position and segment size
      u8_nb_sector_not_used -= u8_nb_sector_truncated;
80005ec8:	18 18       	sub	r8,r12
80005eca:	5c 58       	castu.b	r8
      fs_g_seg.u32_size_or_pos -= u8_nb_sector_not_used;                                     // unit sector
80005ecc:	48 db       	lddpc	r11,80005f00 <file_read+0xe8>
80005ece:	10 1a       	sub	r10,r8
80005ed0:	97 1a       	st.w	r11[0x4],r10
      fs_g_nav_entry.u32_pos_in_file -= ((uint16_t)u8_nb_sector_not_used) << FS_512B_SHIFT_BIT;   // unit byte
80005ed2:	a9 78       	lsl	r8,0x9
80005ed4:	48 7a       	lddpc	r10,80005ef0 <file_read+0xd8>
80005ed6:	f2 08 01 08 	sub	r8,r9,r8
80005eda:	95 38       	st.w	r10[0xc],r8
   }
   file_load_segment_value( segment );
80005edc:	0e 9c       	mov	r12,r7
80005ede:	f0 1f 00 0b 	mcall	80005f08 <file_read+0xf0>
80005ee2:	e3 cf 90 b0 	ldm	sp++,r4-r5,r7,pc,r12=1
   return true;
80005ee6:	e3 cf 80 b0 	ldm	sp++,r4-r5,r7,pc,r12=0
80005eea:	00 00       	add	r0,r0
80005eec:	80 00       	ld.sh	r0,r0[0x0]
80005eee:	46 68       	lddsp	r8,sp[0x198]
80005ef0:	00 00       	add	r0,r0
80005ef2:	06 18       	sub	r8,r3
80005ef4:	00 00       	add	r0,r0
80005ef6:	08 a8       	st.w	r4++,r8
80005ef8:	80 00       	ld.sh	r0,r0[0x0]
80005efa:	5b 64       	cp.w	r4,-10
80005efc:	80 00       	ld.sh	r0,r0[0x0]
80005efe:	43 40       	lddsp	r0,sp[0xd0]
80005f00:	00 00       	add	r0,r0
80005f02:	09 00       	ld.w	r0,r4++
80005f04:	00 00       	add	r0,r0
80005f06:	08 58       	eor	r8,r4
80005f08:	80 00       	ld.sh	r0,r0[0x0]
80005f0a:	5b 48       	cp.w	r8,-12

80005f0c <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
80005f0c:	eb cd 40 c0 	pushm	r6-r7,lr
80005f10:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
80005f12:	f0 1f 00 20 	mcall	80005f90 <file_open+0x84>
80005f16:	c3 a0       	breq	80005f8a <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
80005f18:	f0 1f 00 1f 	mcall	80005f94 <file_open+0x88>
80005f1c:	c3 70       	breq	80005f8a <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
80005f1e:	0e 96       	mov	r6,r7
80005f20:	0e 98       	mov	r8,r7
80005f22:	e2 18 00 02 	andl	r8,0x2,COH
80005f26:	c1 90       	breq	80005f58 <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
80005f28:	30 1c       	mov	r12,1
80005f2a:	f0 1f 00 1c 	mcall	80005f98 <file_open+0x8c>
80005f2e:	c2 e0       	breq	80005f8a <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
80005f30:	49 b8       	lddpc	r8,80005f9c <file_open+0x90>
80005f32:	11 a8       	ld.ub	r8,r8[0x2]
80005f34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005f38:	c0 60       	breq	80005f44 <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80005f3a:	31 59       	mov	r9,21
80005f3c:	49 98       	lddpc	r8,80005fa0 <file_open+0x94>
80005f3e:	b0 89       	st.b	r8[0x0],r9
80005f40:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
80005f44:	49 88       	lddpc	r8,80005fa4 <file_open+0x98>
80005f46:	11 8c       	ld.ub	r12,r8[0x0]
80005f48:	f0 1f 00 18 	mcall	80005fa8 <file_open+0x9c>
80005f4c:	c0 a0       	breq	80005f60 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80005f4e:	31 49       	mov	r9,20
80005f50:	49 48       	lddpc	r8,80005fa0 <file_open+0x94>
80005f52:	b0 89       	st.b	r8[0x0],r9
80005f54:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80005f58:	30 0c       	mov	r12,0
80005f5a:	f0 1f 00 10 	mcall	80005f98 <file_open+0x8c>
80005f5e:	c1 60       	breq	80005f8a <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80005f60:	0c 98       	mov	r8,r6
80005f62:	e2 18 00 04 	andl	r8,0x4,COH
80005f66:	c0 40       	breq	80005f6e <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80005f68:	30 09       	mov	r9,0
80005f6a:	48 d8       	lddpc	r8,80005f9c <file_open+0x90>
80005f6c:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80005f6e:	e2 16 00 08 	andl	r6,0x8,COH
80005f72:	c0 50       	breq	80005f7c <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
80005f74:	30 09       	mov	r9,0
80005f76:	48 a8       	lddpc	r8,80005f9c <file_open+0x90>
80005f78:	91 39       	st.w	r8[0xc],r9
80005f7a:	c0 48       	rjmp	80005f82 <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80005f7c:	48 88       	lddpc	r8,80005f9c <file_open+0x90>
80005f7e:	70 29       	ld.w	r9,r8[0x8]
80005f80:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
80005f82:	48 78       	lddpc	r8,80005f9c <file_open+0x90>
80005f84:	b0 87       	st.b	r8[0x0],r7
80005f86:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80005f8a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005f8e:	00 00       	add	r0,r0
80005f90:	80 00       	ld.sh	r0,r0[0x0]
80005f92:	46 8c       	lddsp	r12,sp[0x1a0]
80005f94:	80 00       	ld.sh	r0,r0[0x0]
80005f96:	33 18       	mov	r8,49
80005f98:	80 00       	ld.sh	r0,r0[0x0]
80005f9a:	3a 70       	mov	r0,-89
80005f9c:	00 00       	add	r0,r0
80005f9e:	06 18       	sub	r8,r3
80005fa0:	00 00       	add	r0,r0
80005fa2:	08 a8       	st.w	r4++,r8
80005fa4:	00 00       	add	r0,r0
80005fa6:	08 58       	eor	r8,r4
80005fa8:	80 00       	ld.sh	r0,r0[0x0]
80005faa:	74 90       	ld.w	r0,r10[0x24]

80005fac <nav_get>:
#if (FS_NB_NAVIGATOR > 1)
   return fs_g_u8_nav_selected;
#else
   return 0;
#endif
}
80005fac:	48 28       	lddpc	r8,80005fb4 <nav_get+0x8>
80005fae:	11 8c       	ld.ub	r12,r8[0x0]
80005fb0:	5e fc       	retal	r12
80005fb2:	00 00       	add	r0,r0
80005fb4:	00 00       	add	r0,r0
80005fb6:	09 24       	ld.uh	r4,r4++

80005fb8 <nav_drive_get>:
      return 0xFF;
   return ((fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return (fs_g_nav.u8_lun);
#endif
}
80005fb8:	48 28       	lddpc	r8,80005fc0 <nav_drive_get+0x8>
80005fba:	11 8c       	ld.ub	r12,r8[0x0]
80005fbc:	5e fc       	retal	r12
80005fbe:	00 00       	add	r0,r0
80005fc0:	00 00       	add	r0,r0
80005fc2:	08 58       	eor	r8,r4

80005fc4 <nav_drive_getname>:
//! @return    'A','B',...
//! @return    'X', in case of no drive selected
//!
uint8_t    nav_drive_getname( void )
{
   if(0xFF == fs_g_nav.u8_lun)
80005fc4:	48 68       	lddpc	r8,80005fdc <nav_drive_getname+0x18>
80005fc6:	11 8c       	ld.ub	r12,r8[0x0]
80005fc8:	3f f8       	mov	r8,-1
80005fca:	f0 0c 18 00 	cp.b	r12,r8
80005fce:	c0 31       	brne	80005fd4 <nav_drive_getname+0x10>
80005fd0:	35 8c       	mov	r12,88
80005fd2:	5e fc       	retal	r12
      return 'X';
#if (FS_MULTI_PARTITION  ==  true)
   return ('A' + (fs_g_nav.u8_lun*4) + fs_g_nav.u8_partition); // Maximum 4 partitions per device
#else
   return ('A' + fs_g_nav.u8_lun);
80005fd4:	2b fc       	sub	r12,-65
80005fd6:	5c 5c       	castu.b	r12
#endif
}
80005fd8:	5e fc       	retal	r12
80005fda:	00 00       	add	r0,r0
80005fdc:	00 00       	add	r0,r0
80005fde:	08 58       	eor	r8,r4

80005fe0 <nav_getindex>:
//! This routine is interresting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80005fe0:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80005fe2:	48 69       	lddpc	r9,80005ff8 <nav_getindex+0x18>
80005fe4:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
80005fe6:	48 6a       	lddpc	r10,80005ffc <nav_getindex+0x1c>
80005fe8:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
80005fea:	13 89       	ld.ub	r9,r9[0x0]
80005fec:	b8 89       	st.b	r12[0x0],r9
80005fee:	99 1b       	st.w	r12[0x4],r11
80005ff0:	b8 4a       	st.h	r12[0x8],r10
}
80005ff2:	2f dd       	sub	sp,-12
80005ff4:	5e fc       	retal	r12
80005ff6:	00 00       	add	r0,r0
80005ff8:	00 00       	add	r0,r0
80005ffa:	08 58       	eor	r8,r4
80005ffc:	00 00       	add	r0,r0
80005ffe:	08 a4       	st.w	r4++,r4

80006000 <nav_file_lgt>:
//! @return    Size of selected file (unit byte)
//!
uint32_t   nav_file_lgt( void )
{
   return fs_g_nav_entry.u32_size;
}
80006000:	48 28       	lddpc	r8,80006008 <nav_file_lgt+0x8>
80006002:	70 2c       	ld.w	r12,r8[0x8]
80006004:	5e fc       	retal	r12
80006006:	00 00       	add	r0,r0
80006008:	00 00       	add	r0,r0
8000600a:	06 18       	sub	r8,r3

8000600c <nav_file_lgtsector>:
//! This function returns the size of selected file (unit sector)
//!
//! @return    Size of selected file (unit 512B)
//!
uint16_t   nav_file_lgtsector( void )
{
8000600c:	48 38       	lddpc	r8,80006018 <nav_file_lgtsector+0xc>
8000600e:	70 2c       	ld.w	r12,r8[0x8]
   return (fs_g_nav_entry.u32_size >> FS_512B_SHIFT_BIT);
}
80006010:	f9 dc b1 30 	bfexts	r12,r12,0x9,0x10
80006014:	5e fc       	retal	r12
80006016:	00 00       	add	r0,r0
80006018:	00 00       	add	r0,r0
8000601a:	06 18       	sub	r8,r3

8000601c <nav_file_isdir>:
//!
//! @return    true, it is a directory
//! @return    false, in other case
//!
bool  nav_file_isdir( void )
{
8000601c:	d4 01       	pushm	lr
   return fat_entry_is_dir();
8000601e:	f0 1f 00 02 	mcall	80006024 <nav_file_isdir+0x8>
}
80006022:	d8 02       	popm	pc
80006024:	80 00       	ld.sh	r0,r0[0x0]
80006026:	35 e0       	mov	r0,94

80006028 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80006028:	d4 31       	pushm	r0-r7,lr
8000602a:	20 1d       	sub	sp,4
8000602c:	18 95       	mov	r5,r12
8000602e:	16 96       	mov	r6,r11
80006030:	14 97       	mov	r7,r10
80006032:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80006034:	f0 1f 00 2f 	mcall	800060f0 <nav_file_name+0xc8>
80006038:	c5 80       	breq	800060e8 <nav_file_name+0xc0>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000603a:	58 07       	cp.w	r7,0
8000603c:	c0 50       	breq	80006046 <nav_file_name+0x1e>
8000603e:	58 06       	cp.w	r6,0
80006040:	c0 31       	brne	80006046 <nav_file_name+0x1e>
80006042:	30 1c       	mov	r12,1
80006044:	c5 38       	rjmp	800060ea <nav_file_name+0xc2>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
80006046:	4a c8       	lddpc	r8,800060f4 <nav_file_name+0xcc>
80006048:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000604a:	58 04       	cp.w	r4,0
8000604c:	c0 31       	brne	80006052 <nav_file_name+0x2a>
8000604e:	30 10       	mov	r0,1
80006050:	c0 68       	rjmp	8000605c <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80006052:	08 99       	mov	r9,r4
80006054:	20 19       	sub	r9,1
80006056:	4a 88       	lddpc	r8,800060f4 <nav_file_name+0xcc>
80006058:	b0 19       	st.h	r8[0x2],r9
8000605a:	30 00       	mov	r0,0
8000605c:	30 09       	mov	r9,0
8000605e:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006060:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80006062:	4a 52       	lddpc	r2,800060f4 <nav_file_name+0xcc>
80006064:	c0 28       	rjmp	80006068 <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80006066:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
80006068:	f0 1f 00 24 	mcall	800060f8 <nav_file_name+0xd0>
8000606c:	c3 e0       	breq	800060e8 <nav_file_name+0xc0>
         break; // error

      if ( b_readshortname )
8000606e:	58 00       	cp.w	r0,0
80006070:	c0 70       	breq	8000607e <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80006072:	0e 9a       	mov	r10,r7
80006074:	0c 9b       	mov	r11,r6
80006076:	0a 9c       	mov	r12,r5
80006078:	f0 1f 00 21 	mcall	800060fc <nav_file_name+0xd4>
8000607c:	c3 78       	rjmp	800060ea <nav_file_name+0xc2>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
8000607e:	06 99       	mov	r9,r3
80006080:	0e 9a       	mov	r10,r7
80006082:	0c 9b       	mov	r11,r6
80006084:	0a 9c       	mov	r12,r5
80006086:	f0 1f 00 1f 	mcall	80006100 <nav_file_name+0xd8>
8000608a:	c1 20       	breq	800060ae <nav_file_name+0x86>
      {
         if( g_b_string_length )
8000608c:	49 e8       	lddpc	r8,80006104 <nav_file_name+0xdc>
8000608e:	11 89       	ld.ub	r9,r8[0x0]
80006090:	30 08       	mov	r8,0
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
80006092:	f0 09 18 00 	cp.b	r9,r8
80006096:	eb f8 12 00 	ld.shne	r8,r5[0x0]
8000609a:	fb f9 10 00 	ld.wne	r9,sp[0x0]
8000609e:	f1 d9 e1 08 	addne	r8,r8,r9
800060a2:	eb f8 1c 00 	st.hne	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800060a6:	49 48       	lddpc	r8,800060f4 <nav_file_name+0xcc>
800060a8:	b0 14       	st.h	r8[0x2],r4
800060aa:	30 1c       	mov	r12,1
         return true;
800060ac:	c1 f8       	rjmp	800060ea <nav_file_name+0xc2>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800060ae:	49 79       	lddpc	r9,80006108 <nav_file_name+0xe0>
800060b0:	13 88       	ld.ub	r8,r9[0x0]
800060b2:	e2 08 18 00 	cp.b	r8,r1
800060b6:	c0 70       	breq	800060c4 <nav_file_name+0x9c>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800060b8:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
800060ba:	30 b9       	mov	r9,11
800060bc:	f2 08 18 00 	cp.b	r8,r9
800060c0:	c1 41       	brne	800060e8 <nav_file_name+0xc0>
800060c2:	cd 2b       	rjmp	80006066 <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
800060c4:	49 09       	lddpc	r9,80006104 <nav_file_name+0xdc>
800060c6:	13 88       	ld.ub	r8,r9[0x0]
800060c8:	30 09       	mov	r9,0
800060ca:	f2 08 18 00 	cp.b	r8,r9
800060ce:	c0 60       	breq	800060da <nav_file_name+0xb2>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
800060d0:	40 08       	lddsp	r8,sp[0x0]
800060d2:	2f 38       	sub	r8,-13
800060d4:	5c 88       	casts.h	r8
800060d6:	50 08       	stdsp	sp[0x0],r8
800060d8:	c0 48       	rjmp	800060e0 <nav_file_name+0xb8>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
800060da:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800060dc:	20 d6       	sub	r6,13
800060de:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800060e0:	84 18       	ld.sh	r8,r2[0x2]
800060e2:	20 18       	sub	r8,1
800060e4:	a4 18       	st.h	r2[0x2],r8
800060e6:	cc 1b       	rjmp	80006068 <nav_file_name+0x40>
800060e8:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
800060ea:	2f fd       	sub	sp,-4
800060ec:	d8 32       	popm	r0-r7,pc
800060ee:	00 00       	add	r0,r0
800060f0:	80 00       	ld.sh	r0,r0[0x0]
800060f2:	46 50       	lddsp	r0,sp[0x194]
800060f4:	00 00       	add	r0,r0
800060f6:	08 a4       	st.w	r4++,r4
800060f8:	80 00       	ld.sh	r0,r0[0x0]
800060fa:	42 bc       	lddsp	r12,sp[0xac]
800060fc:	80 00       	ld.sh	r0,r0[0x0]
800060fe:	38 08       	mov	r8,-128
80006100:	80 00       	ld.sh	r0,r0[0x0]
80006102:	36 74       	mov	r4,103
80006104:	00 00       	add	r0,r0
80006106:	08 a9       	st.w	r4++,r9
80006108:	00 00       	add	r0,r0
8000610a:	08 a8       	st.w	r4++,r8

8000610c <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
8000610c:	d4 31       	pushm	r0-r7,lr
8000610e:	20 4d       	sub	sp,16
80006110:	50 0c       	stdsp	sp[0x0],r12
80006112:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
80006114:	f0 1f 00 51 	mcall	80006258 <nav_filelist_set+0x14c>
80006118:	e0 80 00 9e 	breq	80006254 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
8000611c:	4d 08       	lddpc	r8,8000625c <nav_filelist_set+0x150>
8000611e:	90 18       	ld.sh	r8,r8[0x2]
80006120:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80006122:	4d 08       	lddpc	r8,80006260 <nav_filelist_set+0x154>
80006124:	f1 0a 00 24 	ld.sh	r10,r8[36]
80006128:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000612a:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000612e:	50 38       	stdsp	sp[0xc],r8
80006130:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80006132:	4c b7       	lddpc	r7,8000625c <nav_filelist_set+0x150>
80006134:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80006136:	4c b6       	lddpc	r6,80006260 <nav_filelist_set+0x154>
80006138:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000613a:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000613c:	4c a5       	lddpc	r5,80006264 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000613e:	58 02       	cp.w	r2,0
80006140:	c0 31       	brne	80006146 <nav_filelist_set+0x3a>
80006142:	58 03       	cp.w	r3,0
80006144:	c0 c0       	breq	8000615c <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80006146:	8e 18       	ld.sh	r8,r7[0x2]
80006148:	e2 08 19 00 	cp.h	r8,r1
8000614c:	c0 51       	brne	80006156 <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000614e:	30 89       	mov	r9,8
80006150:	4c 58       	lddpc	r8,80006264 <nav_filelist_set+0x158>
80006152:	b0 89       	st.b	r8[0x0],r9
            break;
80006154:	c7 38       	rjmp	8000623a <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
80006156:	2f f8       	sub	r8,-1
80006158:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000615a:	c1 d8       	rjmp	80006194 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
8000615c:	8e 18       	ld.sh	r8,r7[0x2]
8000615e:	e0 08 19 00 	cp.h	r8,r0
80006162:	c0 51       	brne	8000616c <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
80006164:	30 99       	mov	r9,9
80006166:	4c 08       	lddpc	r8,80006264 <nav_filelist_set+0x158>
80006168:	b0 89       	st.b	r8[0x0],r9
            break;
8000616a:	c6 88       	rjmp	8000623a <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000616c:	58 08       	cp.w	r8,0
8000616e:	c1 11       	brne	80006190 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80006170:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006174:	e8 08 18 00 	cp.b	r8,r4
80006178:	c0 80       	breq	80006188 <nav_filelist_set+0x7c>
8000617a:	ed 38 00 2d 	ld.ub	r8,r6[45]
8000617e:	e8 08 18 00 	cp.b	r8,r4
80006182:	c0 31       	brne	80006188 <nav_filelist_set+0x7c>
80006184:	30 13       	mov	r3,1
80006186:	c0 78       	rjmp	80006194 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80006188:	30 99       	mov	r9,9
8000618a:	4b 78       	lddpc	r8,80006264 <nav_filelist_set+0x158>
8000618c:	b0 89       	st.b	r8[0x0],r9
               break;
8000618e:	c5 68       	rjmp	8000623a <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80006190:	20 18       	sub	r8,1
80006192:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
80006194:	f0 1f 00 35 	mcall	80006268 <nav_filelist_set+0x15c>
80006198:	c0 71       	brne	800061a6 <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000619a:	0b 89       	ld.ub	r9,r5[0x0]
8000619c:	31 a8       	mov	r8,26
8000619e:	f0 09 18 00 	cp.b	r9,r8
800061a2:	c3 20       	breq	80006206 <nav_filelist_set+0xfa>
800061a4:	c4 b8       	rjmp	8000623a <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
800061a6:	ed 38 00 2c 	ld.ub	r8,r6[44]
800061aa:	e8 08 18 00 	cp.b	r8,r4
800061ae:	5f 1c       	srne	r12
800061b0:	f0 1f 00 2f 	mcall	8000626c <nav_filelist_set+0x160>
800061b4:	c1 c0       	breq	800061ec <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type seached

           if( b_find_last_entry )
800061b6:	58 03       	cp.w	r3,0
800061b8:	cc 31       	brne	8000613e <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
              fs_g_nav.u16_pos_sel_file++;
800061ba:	58 02       	cp.w	r2,0
800061bc:	ed f8 12 12 	ld.shne	r8,r6[0x24]
800061c0:	f7 b8 01 ff 	subne	r8,-1
800061c4:	ed f8 1c 12 	st.hne	r6[0x24],r8
           else
              fs_g_nav.u16_pos_sel_file--;
800061c8:	ed f8 02 12 	ld.sheq	r8,r6[0x24]
800061cc:	f7 b8 00 01 	subeq	r8,1
800061d0:	ed f8 0c 12 	st.heq	r6[0x24],r8

           if (0 == u16_nb)
800061d4:	40 09       	lddsp	r9,sp[0x0]
800061d6:	58 09       	cp.w	r9,0
800061d8:	c0 51       	brne	800061e2 <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
800061da:	f0 1f 00 26 	mcall	80006270 <nav_filelist_set+0x164>
800061de:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
800061e0:	c3 a8       	rjmp	80006254 <nav_filelist_set+0x148>
           }
           u16_nb--;
800061e2:	40 08       	lddsp	r8,sp[0x0]
800061e4:	20 18       	sub	r8,1
800061e6:	5c 88       	casts.h	r8
800061e8:	50 08       	stdsp	sp[0x0],r8
           continue;
800061ea:	ca ab       	rjmp	8000613e <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800061ec:	0b 88       	ld.ub	r8,r5[0x0]
800061ee:	30 a9       	mov	r9,10
800061f0:	f2 08 18 00 	cp.b	r8,r9
800061f4:	5f 09       	sreq	r9
800061f6:	31 aa       	mov	r10,26
800061f8:	f4 08 18 00 	cp.b	r8,r10
800061fc:	5f 08       	sreq	r8
800061fe:	10 49       	or	r9,r8
80006200:	e8 09 18 00 	cp.b	r9,r4
80006204:	c9 d0       	breq	8000613e <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
80006206:	58 03       	cp.w	r3,0
80006208:	c0 50       	breq	80006212 <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
8000620a:	ed 64 00 2c 	st.b	r6[44],r4
8000620e:	30 03       	mov	r3,0
            continue;
80006210:	c9 7b       	rjmp	8000613e <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
80006212:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006216:	30 1a       	mov	r10,1
80006218:	f4 08 18 00 	cp.b	r8,r10
8000621c:	c0 60       	breq	80006228 <nav_filelist_set+0x11c>
8000621e:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006222:	e8 08 18 00 	cp.b	r8,r4
80006226:	c0 50       	breq	80006230 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
80006228:	30 99       	mov	r9,9
8000622a:	48 f8       	lddpc	r8,80006264 <nav_filelist_set+0x158>
8000622c:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
8000622e:	c0 68       	rjmp	8000623a <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80006230:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
80006232:	30 19       	mov	r9,1
80006234:	ed 69 00 2c 	st.b	r6[44],r9
80006238:	c8 3b       	rjmp	8000613e <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000623a:	48 a8       	lddpc	r8,80006260 <nav_filelist_set+0x154>
8000623c:	40 3a       	lddsp	r10,sp[0xc]
8000623e:	58 0a       	cp.w	r10,0
80006240:	5f 19       	srne	r9
80006242:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
80006246:	48 69       	lddpc	r9,8000625c <nav_filelist_set+0x150>
80006248:	40 2a       	lddsp	r10,sp[0x8]
8000624a:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000624c:	40 19       	lddsp	r9,sp[0x4]
8000624e:	f1 59 00 24 	st.h	r8[36],r9
80006252:	30 0c       	mov	r12,0
   return false;
}
80006254:	2f cd       	sub	sp,-16
80006256:	d8 32       	popm	r0-r7,pc
80006258:	80 00       	ld.sh	r0,r0[0x0]
8000625a:	46 b0       	lddsp	r0,sp[0x1ac]
8000625c:	00 00       	add	r0,r0
8000625e:	08 a4       	st.w	r4++,r4
80006260:	00 00       	add	r0,r0
80006262:	08 58       	eor	r8,r4
80006264:	00 00       	add	r0,r0
80006266:	08 a8       	st.w	r4++,r8
80006268:	80 00       	ld.sh	r0,r0[0x0]
8000626a:	42 bc       	lddsp	r12,sp[0xac]
8000626c:	80 00       	ld.sh	r0,r0[0x0]
8000626e:	39 58       	mov	r8,-107
80006270:	80 00       	ld.sh	r0,r0[0x0]
80006272:	39 10       	mov	r0,-111

80006274 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80006274:	d4 21       	pushm	r4-r7,lr
80006276:	18 95       	mov	r5,r12
80006278:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
8000627a:	30 16       	mov	r6,1
8000627c:	30 07       	mov	r7,0
8000627e:	0c 9b       	mov	r11,r6
80006280:	0e 9c       	mov	r12,r7
80006282:	f0 1f 00 07 	mcall	8000629c <nav_filelist_findname+0x28>
80006286:	c0 90       	breq	80006298 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80006288:	08 99       	mov	r9,r4
8000628a:	0e 9a       	mov	r10,r7
8000628c:	0e 9b       	mov	r11,r7
8000628e:	0a 9c       	mov	r12,r5
80006290:	f0 1f 00 04 	mcall	800062a0 <nav_filelist_findname+0x2c>
80006294:	cf 50       	breq	8000627e <nav_filelist_findname+0xa>
80006296:	30 1c       	mov	r12,1
         return true;
   }
}
80006298:	d8 22       	popm	r4-r7,pc
8000629a:	00 00       	add	r0,r0
8000629c:	80 00       	ld.sh	r0,r0[0x0]
8000629e:	61 0c       	ld.w	r12,r0[0x40]
800062a0:	80 00       	ld.sh	r0,r0[0x0]
800062a2:	60 28       	ld.w	r8,r0[0x8]

800062a4 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
800062a4:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
800062a6:	f0 1f 00 04 	mcall	800062b4 <nav_filelist_reset+0x10>
800062aa:	c0 40       	breq	800062b2 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800062ac:	f0 1f 00 03 	mcall	800062b8 <nav_filelist_reset+0x14>
800062b0:	30 1c       	mov	r12,1
   return true;
}
800062b2:	d8 02       	popm	pc
800062b4:	80 00       	ld.sh	r0,r0[0x0]
800062b6:	46 b0       	lddsp	r0,sp[0x1ac]
800062b8:	80 00       	ld.sh	r0,r0[0x0]
800062ba:	35 f8       	mov	r8,95

800062bc <nav_file_create>:
//! @verbatim
//! If you ues this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
800062bc:	eb cd 40 80 	pushm	r7,lr
800062c0:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
800062c2:	f0 1f 00 13 	mcall	8000630c <nav_file_create+0x50>
800062c6:	c2 10       	breq	80006308 <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
800062c8:	30 0b       	mov	r11,0
800062ca:	0e 9c       	mov	r12,r7
800062cc:	f0 1f 00 11 	mcall	80006310 <nav_file_create+0x54>
800062d0:	c0 60       	breq	800062dc <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800062d2:	32 a9       	mov	r9,42
800062d4:	49 08       	lddpc	r8,80006314 <nav_file_create+0x58>
800062d6:	b0 89       	st.b	r8[0x0],r9
800062d8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
800062dc:	0e 9c       	mov	r12,r7
800062de:	f0 1f 00 0f 	mcall	80006318 <nav_file_create+0x5c>
800062e2:	c1 30       	breq	80006308 <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
800062e4:	48 e8       	lddpc	r8,8000631c <nav_file_create+0x60>
800062e6:	30 09       	mov	r9,0
800062e8:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
800062ea:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file
800062ec:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
800062ee:	48 d8       	lddpc	r8,80006320 <nav_file_create+0x64>
800062f0:	f1 09 00 24 	ld.sh	r9,r8[36]
800062f4:	2f f9       	sub	r9,-1
800062f6:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
800062fa:	30 19       	mov	r9,1
800062fc:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
80006300:	f0 1f 00 09 	mcall	80006324 <nav_file_create+0x68>
80006304:	e3 cd 80 80 	ldm	sp++,r7,pc
80006308:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000630c:	80 00       	ld.sh	r0,r0[0x0]
8000630e:	62 a4       	ld.w	r4,r1[0x28]
80006310:	80 00       	ld.sh	r0,r0[0x0]
80006312:	62 74       	ld.w	r4,r1[0x1c]
80006314:	00 00       	add	r0,r0
80006316:	08 a8       	st.w	r4++,r8
80006318:	80 00       	ld.sh	r0,r0[0x0]
8000631a:	54 fc       	stdsp	sp[0x13c],r12
8000631c:	00 00       	add	r0,r0
8000631e:	06 18       	sub	r8,r3
80006320:	00 00       	add	r0,r0
80006322:	08 58       	eor	r8,r4
80006324:	80 00       	ld.sh	r0,r0[0x0]
80006326:	3c 28       	mov	r8,-62

80006328 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
80006328:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
8000632a:	f0 1f 00 1f 	mcall	800063a4 <nav_dir_gotoparent+0x7c>
8000632e:	c3 80       	breq	8000639e <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
80006330:	49 e8       	lddpc	r8,800063a8 <nav_dir_gotoparent+0x80>
80006332:	70 88       	ld.w	r8,r8[0x20]
80006334:	58 08       	cp.w	r8,0
80006336:	c0 51       	brne	80006340 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
80006338:	31 99       	mov	r9,25
8000633a:	49 d8       	lddpc	r8,800063ac <nav_dir_gotoparent+0x84>
8000633c:	b0 89       	st.b	r8[0x0],r9
8000633e:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
80006340:	30 19       	mov	r9,1
80006342:	49 c8       	lddpc	r8,800063b0 <nav_dir_gotoparent+0x88>
80006344:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
80006346:	f0 1f 00 1c 	mcall	800063b4 <nav_dir_gotoparent+0x8c>
8000634a:	c2 a0       	breq	8000639e <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
8000634c:	f0 1f 00 1b 	mcall	800063b8 <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
80006350:	49 68       	lddpc	r8,800063a8 <nav_dir_gotoparent+0x80>
80006352:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80006354:	49 a9       	lddpc	r9,800063bc <nav_dir_gotoparent+0x94>
80006356:	72 19       	ld.w	r9,r9[0x4]
80006358:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000635a:	f0 1f 00 1a 	mcall	800063c0 <nav_dir_gotoparent+0x98>
8000635e:	c2 00       	breq	8000639e <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80006360:	49 28       	lddpc	r8,800063a8 <nav_dir_gotoparent+0x80>
80006362:	f1 39 00 2d 	ld.ub	r9,r8[45]
80006366:	30 08       	mov	r8,0
80006368:	f0 09 18 00 	cp.b	r9,r8
8000636c:	c0 d0       	breq	80006386 <nav_dir_gotoparent+0x5e>
8000636e:	48 f8       	lddpc	r8,800063a8 <nav_dir_gotoparent+0x80>
80006370:	f1 39 00 2c 	ld.ub	r9,r8[44]
80006374:	30 08       	mov	r8,0
80006376:	f0 09 18 00 	cp.b	r9,r8
8000637a:	c0 60       	breq	80006386 <nav_dir_gotoparent+0x5e>
8000637c:	c1 28       	rjmp	800063a0 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000637e:	6c 18       	ld.w	r8,r6[0x4]
80006380:	0e 38       	cp.w	r8,r7
80006382:	c0 51       	brne	8000638c <nav_dir_gotoparent+0x64>
80006384:	c0 e8       	rjmp	800063a0 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006386:	30 15       	mov	r5,1
80006388:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000638a:	48 d6       	lddpc	r6,800063bc <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000638c:	0a 9b       	mov	r11,r5
8000638e:	08 9c       	mov	r12,r4
80006390:	f0 1f 00 0d 	mcall	800063c4 <nav_dir_gotoparent+0x9c>
80006394:	cf 51       	brne	8000637e <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
80006396:	30 89       	mov	r9,8
80006398:	48 58       	lddpc	r8,800063ac <nav_dir_gotoparent+0x84>
8000639a:	b0 89       	st.b	r8[0x0],r9
   return false;
8000639c:	d8 22       	popm	r4-r7,pc
8000639e:	d8 2a       	popm	r4-r7,pc,r12=0
800063a0:	da 2a       	popm	r4-r7,pc,r12=1
800063a2:	00 00       	add	r0,r0
800063a4:	80 00       	ld.sh	r0,r0[0x0]
800063a6:	46 b0       	lddsp	r0,sp[0x1ac]
800063a8:	00 00       	add	r0,r0
800063aa:	08 58       	eor	r8,r4
800063ac:	00 00       	add	r0,r0
800063ae:	08 a8       	st.w	r4++,r8
800063b0:	00 00       	add	r0,r0
800063b2:	08 a4       	st.w	r4++,r4
800063b4:	80 00       	ld.sh	r0,r0[0x0]
800063b6:	42 bc       	lddsp	r12,sp[0xac]
800063b8:	80 00       	ld.sh	r0,r0[0x0]
800063ba:	39 10       	mov	r0,-111
800063bc:	00 00       	add	r0,r0
800063be:	06 18       	sub	r8,r3
800063c0:	80 00       	ld.sh	r0,r0[0x0]
800063c2:	62 a4       	ld.w	r4,r1[0x28]
800063c4:	80 00       	ld.sh	r0,r0[0x0]
800063c6:	61 0c       	ld.w	r12,r0[0x40]

800063c8 <nav_dir_name>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_name( FS_STRING sz_path  , uint8_t u8_size_max  )
{
800063c8:	d4 31       	pushm	r0-r7,lr
800063ca:	20 2d       	sub	sp,8
800063cc:	18 96       	mov	r6,r12
800063ce:	16 95       	mov	r5,r11
   uint32_t save_u32_cluster      ;
   uint32_t save_u32_size         ;
   bool b_mode_nav_single_save;
   bool b_mode_nav_mode_save;

   if ( !fat_check_mount_noopen())
800063d0:	f0 1f 00 37 	mcall	800064ac <nav_dir_name+0xe4>
800063d4:	c6 a0       	breq	800064a8 <nav_dir_name+0xe0>
      return false;

   if (0 != fs_g_nav.u32_cluster_sel_dir)
800063d6:	4b 78       	lddpc	r8,800064b0 <nav_dir_name+0xe8>
800063d8:	70 87       	ld.w	r7,r8[0x20]
800063da:	58 07       	cp.w	r7,0
800063dc:	c3 b0       	breq	80006452 <nav_dir_name+0x8a>
   {
      // Save context
      save_u16_entry_pos_sel_file= fs_g_nav_fast.u16_entry_pos_sel_file;
800063de:	4b 68       	lddpc	r8,800064b4 <nav_dir_name+0xec>
800063e0:	90 11       	ld.sh	r1,r8[0x2]
      save_u32_cluster_sel_dir   = fs_g_nav.u32_cluster_sel_dir        ;
      save_u8_attr               = fs_g_nav_entry.u8_attr              ;
800063e2:	4b 68       	lddpc	r8,800064b8 <nav_dir_name+0xf0>
800063e4:	11 a0       	ld.ub	r0,r8[0x2]
      save_u32_cluster           = fs_g_nav_entry.u32_cluster          ;
800063e6:	70 19       	ld.w	r9,r8[0x4]
800063e8:	50 19       	stdsp	sp[0x4],r9
      save_u32_size              = fs_g_nav_entry.u32_size             ;
800063ea:	70 28       	ld.w	r8,r8[0x8]
800063ec:	50 08       	stdsp	sp[0x0],r8
      b_mode_nav_single_save = fs_g_nav.b_mode_nav_single;
800063ee:	4b 18       	lddpc	r8,800064b0 <nav_dir_name+0xe8>
800063f0:	f1 3a 00 2d 	ld.ub	r10,r8[45]
800063f4:	30 09       	mov	r9,0
800063f6:	f2 0a 18 00 	cp.b	r10,r9
800063fa:	5f 14       	srne	r4
      b_mode_nav_mode_save   = fs_g_nav.b_mode_nav;
800063fc:	f1 3a 00 2c 	ld.ub	r10,r8[44]
80006400:	f2 0a 18 00 	cp.b	r10,r9
80006404:	5f 13       	srne	r3
      fs_g_nav.b_mode_nav_single = true;
80006406:	30 19       	mov	r9,1
80006408:	f1 69 00 2d 	st.b	r8[45],r9
      fs_g_nav.b_mode_nav = FS_FILE;
8000640c:	f1 69 00 2c 	st.b	r8[44],r9
      // Go to parent directory and select the children directory
      if( !nav_dir_gotoparent() )
80006410:	f0 1f 00 2b 	mcall	800064bc <nav_dir_name+0xf4>
80006414:	c0 71       	brne	80006422 <nav_dir_name+0x5a>
      {
         fs_g_nav.b_mode_nav_single = b_mode_nav_single_save;
80006416:	4a 78       	lddpc	r8,800064b0 <nav_dir_name+0xe8>
80006418:	f1 64 00 2d 	st.b	r8[45],r4
         fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
8000641c:	f1 63 00 2c 	st.b	r8[44],r3
         return false;
80006420:	c4 48       	rjmp	800064a8 <nav_dir_name+0xe0>
      }
      fs_g_nav.b_mode_nav_single = b_mode_nav_single_save ;
80006422:	4a 42       	lddpc	r2,800064b0 <nav_dir_name+0xe8>
80006424:	e5 64 00 2d 	st.b	r2[45],r4
      fs_g_nav.b_mode_nav = b_mode_nav_mode_save;
80006428:	e5 63 00 2c 	st.b	r2[44],r3
      // Go to directory name position
      fs_g_nav_fast.u16_entry_pos_sel_file = fs_g_nav.u16_entry_pos_sel_dir;
8000642c:	4a 24       	lddpc	r4,800064b4 <nav_dir_name+0xec>
8000642e:	e5 08 00 1c 	ld.sh	r8,r2[28]
80006432:	a8 18       	st.h	r4[0x2],r8
      status = nav_file_name( sz_path  , u8_size_max , FS_NAME_GET , false  );
80006434:	30 09       	mov	r9,0
80006436:	30 1a       	mov	r10,1
80006438:	0a 9b       	mov	r11,r5
8000643a:	0c 9c       	mov	r12,r6
8000643c:	f0 1f 00 21 	mcall	800064c0 <nav_dir_name+0xf8>
      // Restore previous context
      fs_g_nav_fast.u16_entry_pos_sel_file= save_u16_entry_pos_sel_file;
80006440:	a8 11       	st.h	r4[0x2],r1
      fs_g_nav.u32_cluster_sel_dir        = save_u32_cluster_sel_dir   ;
80006442:	85 87       	st.w	r2[0x20],r7
      fs_g_nav_entry.u8_attr              = save_u8_attr               ;
80006444:	49 d8       	lddpc	r8,800064b8 <nav_dir_name+0xf0>
80006446:	b0 a0       	st.b	r8[0x2],r0
      fs_g_nav_entry.u32_cluster          = save_u32_cluster           ;
80006448:	40 19       	lddsp	r9,sp[0x4]
8000644a:	91 19       	st.w	r8[0x4],r9
      fs_g_nav_entry.u32_size             = save_u32_size              ;
8000644c:	40 09       	lddsp	r9,sp[0x0]
8000644e:	91 29       	st.w	r8[0x8],r9
80006450:	c2 c8       	rjmp	800064a8 <nav_dir_name+0xe0>
   }
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
80006452:	49 d8       	lddpc	r8,800064c4 <nav_dir_name+0xfc>
80006454:	11 89       	ld.ub	r9,r8[0x0]
80006456:	30 08       	mov	r8,0
80006458:	f0 09 18 00 	cp.b	r9,r8
8000645c:	c0 50       	breq	80006466 <nav_dir_name+0x9e>
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
8000645e:	30 38       	mov	r8,3
80006460:	ac 08       	st.h	r6[0x0],r8
80006462:	30 1c       	mov	r12,1
80006464:	c2 28       	rjmp	800064a8 <nav_dir_name+0xe0>
80006466:	2f f6       	sub	r6,-1
80006468:	30 17       	mov	r7,1
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
8000646a:	30 04       	mov	r4,0
8000646c:	30 15       	mov	r5,1
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
8000646e:	30 23       	mov	r3,2
80006470:	c0 48       	rjmp	80006478 <nav_dir_name+0xb0>
   else
   {
      // No parent directory, then it is the root directory
      if( g_b_string_length )
      {
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
80006472:	2f f6       	sub	r6,-1
80006474:	2f f7       	sub	r7,-1
80006476:	5c 57       	castu.b	r7
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
      {
         switch( u8_i )
80006478:	0e 98       	mov	r8,r7
8000647a:	20 18       	sub	r8,1
8000647c:	e8 08 18 00 	cp.b	r8,r4
80006480:	c0 e0       	breq	8000649c <nav_dir_name+0xd4>
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
80006482:	ea 08 18 00 	cp.b	r8,r5
80006486:	f9 b8 00 3a 	moveq	r8,58
8000648a:	f9 b8 01 00 	movne	r8,0
8000648e:	ed 68 ff ff 	st.b	r6[-1],r8
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
80006492:	e6 07 18 00 	cp.b	r7,r3
80006496:	fe 98 ff ee 	brls	80006472 <nav_dir_name+0xaa>
8000649a:	c0 68       	rjmp	800064a6 <nav_dir_name+0xde>
      {
         switch( u8_i )
         {
            case 0:
            u8_character = nav_drive_getname();    // Letter
8000649c:	f0 1f 00 0b 	mcall	800064c8 <nav_dir_name+0x100>
         }
         if( Is_unicode )
         {
            ((FS_STR_UNICODE)sz_path )[0] = u8_character;
         }else{
            sz_path [0] = u8_character;
800064a0:	ed 6c ff ff 	st.b	r6[-1],r12
800064a4:	ce 7b       	rjmp	80006472 <nav_dir_name+0xaa>
         ((FS_STR_UNICODE)sz_path )[0] = 3;  // 3 chars for path "x:"
         status = true;
      }else

      // Create a device name
      for( u8_i = 0 ; u8_i<3 ; u8_i++ )
800064a6:	30 1c       	mov	r12,1
      }
      status = true;

   }
   return status;
}
800064a8:	2f ed       	sub	sp,-8
800064aa:	d8 32       	popm	r0-r7,pc
800064ac:	80 00       	ld.sh	r0,r0[0x0]
800064ae:	46 b0       	lddsp	r0,sp[0x1ac]
800064b0:	00 00       	add	r0,r0
800064b2:	08 58       	eor	r8,r4
800064b4:	00 00       	add	r0,r0
800064b6:	08 a4       	st.w	r4++,r4
800064b8:	00 00       	add	r0,r0
800064ba:	06 18       	sub	r8,r3
800064bc:	80 00       	ld.sh	r0,r0[0x0]
800064be:	63 28       	ld.w	r8,r1[0x48]
800064c0:	80 00       	ld.sh	r0,r0[0x0]
800064c2:	60 28       	ld.w	r8,r0[0x8]
800064c4:	00 00       	add	r0,r0
800064c6:	08 a9       	st.w	r4++,r9
800064c8:	80 00       	ld.sh	r0,r0[0x0]
800064ca:	5f c4       	srvs	r4

800064cc <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
800064cc:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
800064ce:	f0 1f 00 0a 	mcall	800064f4 <nav_dir_cd+0x28>
800064d2:	c0 f0       	breq	800064f0 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
800064d4:	f0 1f 00 09 	mcall	800064f8 <nav_dir_cd+0x2c>
800064d8:	c0 c0       	breq	800064f0 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
800064da:	48 98       	lddpc	r8,800064fc <nav_dir_cd+0x30>
800064dc:	48 99       	lddpc	r9,80006500 <nav_dir_cd+0x34>
800064de:	92 19       	ld.sh	r9,r9[0x2]
800064e0:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800064e4:	48 89       	lddpc	r9,80006504 <nav_dir_cd+0x38>
800064e6:	72 19       	ld.w	r9,r9[0x4]
800064e8:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
800064ea:	f0 1f 00 08 	mcall	80006508 <nav_dir_cd+0x3c>
800064ee:	d8 02       	popm	pc
800064f0:	d8 0a       	popm	pc,r12=0
800064f2:	00 00       	add	r0,r0
800064f4:	80 00       	ld.sh	r0,r0[0x0]
800064f6:	46 8c       	lddsp	r12,sp[0x1a0]
800064f8:	80 00       	ld.sh	r0,r0[0x0]
800064fa:	35 e0       	mov	r0,94
800064fc:	00 00       	add	r0,r0
800064fe:	08 58       	eor	r8,r4
80006500:	00 00       	add	r0,r0
80006502:	08 a4       	st.w	r4++,r4
80006504:	00 00       	add	r0,r0
80006506:	06 18       	sub	r8,r3
80006508:	80 00       	ld.sh	r0,r0[0x0]
8000650a:	62 a4       	ld.w	r4,r1[0x28]

8000650c <nav_file_del>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_del( bool b_only_empty )
{
8000650c:	eb cd 40 f8 	pushm	r3-r7,lr
80006510:	18 94       	mov	r4,r12
   uint8_t u8_folder_level = 0xFF;

   if ( !fat_check_mount_select_noopen())
80006512:	f0 1f 00 20 	mcall	80006590 <nav_file_del+0x84>
80006516:	c1 c1       	brne	8000654e <nav_file_del+0x42>
80006518:	c3 a8       	rjmp	8000658c <nav_file_del+0x80>
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000651a:	0c 9b       	mov	r11,r6
8000651c:	0a 9c       	mov	r12,r5
8000651e:	f0 1f 00 1e 	mcall	80006594 <nav_file_del+0x88>
80006522:	c0 80       	breq	80006532 <nav_file_del+0x26>
         {
            // Directory no empty
            if( b_only_empty )
80006524:	58 04       	cp.w	r4,0
80006526:	c1 90       	breq	80006558 <nav_file_del+0x4c>
            {
               fs_g_status = FS_ERR_DIR_NOT_EMPTY;      // Erase only the empty directory
80006528:	31 d9       	mov	r9,29
8000652a:	49 c8       	lddpc	r8,80006598 <nav_file_del+0x8c>
8000652c:	b0 89       	st.b	r8[0x0],r9
8000652e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
            break; // Exit loop to delete files or directories present
         }
         // HERE, directory empty

         // Go to parent directory and this one select the children directory
         if( !nav_dir_gotoparent() )
80006532:	f0 1f 00 1b 	mcall	8000659c <nav_file_del+0x90>
80006536:	c2 b0       	breq	8000658c <nav_file_del+0x80>
            return false;

         // Delete children directory name and her cluster list
         if ( !fat_delete_file( true ))
80006538:	0c 9c       	mov	r12,r6
8000653a:	f0 1f 00 1a 	mcall	800065a0 <nav_file_del+0x94>
8000653e:	c2 70       	breq	8000658c <nav_file_del+0x80>
            return false;

         if( 0 == u8_folder_level )
80006540:	58 07       	cp.w	r7,0
80006542:	c0 31       	brne	80006548 <nav_file_del+0x3c>
80006544:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
         {
            // All directory tree is deleted
            return true; //********* END OF DEL TREE **************
         }
         u8_folder_level--;
80006548:	20 17       	sub	r7,1
8000654a:	5c 57       	castu.b	r7

      } // end of second while (1)
8000654c:	ce 7b       	rjmp	8000651a <nav_file_del+0xe>
8000654e:	e0 67 00 ff 	mov	r7,255
         u8_folder_level++;
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
80006552:	30 16       	mov	r6,1
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
            return false;
         if( 0xFF == u8_folder_level )
80006554:	3f f3       	mov	r3,-1
   // loop to scan and delete ALL folders and ALL files
   while(1)
   {
      while(1)
      {
         if( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006556:	30 05       	mov	r5,0
         u8_folder_level--;

      } // end of second while (1)

nav_file_del_test_dir_or_file:
      if( nav_file_isdir())
80006558:	f0 1f 00 13 	mcall	800065a4 <nav_file_del+0x98>
8000655c:	c0 70       	breq	8000656a <nav_file_del+0x5e>
      {
         // here, a directory is found and is selected
         if( !nav_dir_cd())
8000655e:	f0 1f 00 13 	mcall	800065a8 <nav_file_del+0x9c>
80006562:	c1 50       	breq	8000658c <nav_file_del+0x80>
            return false;
         u8_folder_level++;
80006564:	2f f7       	sub	r7,-1
80006566:	5c 57       	castu.b	r7
80006568:	cd 9b       	rjmp	8000651a <nav_file_del+0xe>
      }
      else
      {
         // here, a file is found and is selected
         if( !fat_check_nav_access_file( true ) )
8000656a:	0c 9c       	mov	r12,r6
8000656c:	f0 1f 00 10 	mcall	800065ac <nav_file_del+0xa0>
80006570:	c0 e0       	breq	8000658c <nav_file_del+0x80>
            return false;
         // delete file entry name and cluster list
         if ( !fat_delete_file( true ))
80006572:	0c 9c       	mov	r12,r6
80006574:	f0 1f 00 0b 	mcall	800065a0 <nav_file_del+0x94>
80006578:	c0 a0       	breq	8000658c <nav_file_del+0x80>
            return false;
         if( 0xFF == u8_folder_level )
8000657a:	e6 07 18 00 	cp.b	r7,r3
8000657e:	cc e1       	brne	8000651a <nav_file_del+0xe>
            break;   // only one file to delete
      } // if dir OR file
   } // end of first while(1)

   // Reset selection
   nav_filelist_reset();
80006580:	f0 1f 00 0c 	mcall	800065b0 <nav_file_del+0xa4>
   return fat_cache_flush();  // To write all data and check write access before exit function
80006584:	f0 1f 00 0c 	mcall	800065b4 <nav_file_del+0xa8>
80006588:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000658c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
80006590:	80 00       	ld.sh	r0,r0[0x0]
80006592:	46 8c       	lddsp	r12,sp[0x1a0]
80006594:	80 00       	ld.sh	r0,r0[0x0]
80006596:	61 0c       	ld.w	r12,r0[0x40]
80006598:	00 00       	add	r0,r0
8000659a:	08 a8       	st.w	r4++,r8
8000659c:	80 00       	ld.sh	r0,r0[0x0]
8000659e:	63 28       	ld.w	r8,r1[0x48]
800065a0:	80 00       	ld.sh	r0,r0[0x0]
800065a2:	4b fc       	lddpc	r12,8000669c <nav_filelist_last+0x34>
800065a4:	80 00       	ld.sh	r0,r0[0x0]
800065a6:	60 1c       	ld.w	r12,r0[0x4]
800065a8:	80 00       	ld.sh	r0,r0[0x0]
800065aa:	64 cc       	ld.w	r12,r2[0x30]
800065ac:	80 00       	ld.sh	r0,r0[0x0]
800065ae:	3a 70       	mov	r0,-89
800065b0:	80 00       	ld.sh	r0,r0[0x0]
800065b2:	62 a4       	ld.w	r4,r1[0x28]
800065b4:	80 00       	ld.sh	r0,r0[0x0]
800065b6:	3c 28       	mov	r8,-62

800065b8 <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_first( bool b_type )
{
800065b8:	d4 21       	pushm	r4-r7,lr
800065ba:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
800065bc:	f0 1f 00 0b 	mcall	800065e8 <nav_filelist_first+0x30>
800065c0:	c0 71       	brne	800065ce <nav_filelist_first+0x16>
800065c2:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
800065c4:	e9 38 00 2c 	ld.ub	r8,r4[44]
800065c8:	10 37       	cp.w	r7,r8
800065ca:	c0 51       	brne	800065d4 <nav_filelist_first+0x1c>
800065cc:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800065ce:	30 16       	mov	r6,1
800065d0:	30 05       	mov	r5,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
800065d2:	48 74       	lddpc	r4,800065ec <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800065d4:	0c 9b       	mov	r11,r6
800065d6:	0a 9c       	mov	r12,r5
800065d8:	f0 1f 00 06 	mcall	800065f0 <nav_filelist_first+0x38>
800065dc:	cf 41       	brne	800065c4 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
800065de:	30 99       	mov	r9,9
800065e0:	48 58       	lddpc	r8,800065f4 <nav_filelist_first+0x3c>
800065e2:	b0 89       	st.b	r8[0x0],r9
   return false;
}
800065e4:	d8 22       	popm	r4-r7,pc
800065e6:	00 00       	add	r0,r0
800065e8:	80 00       	ld.sh	r0,r0[0x0]
800065ea:	62 a4       	ld.w	r4,r1[0x28]
800065ec:	00 00       	add	r0,r0
800065ee:	08 58       	eor	r8,r4
800065f0:	80 00       	ld.sh	r0,r0[0x0]
800065f2:	61 0c       	ld.w	r12,r0[0x40]
800065f4:	00 00       	add	r0,r0
800065f6:	08 a8       	st.w	r4++,r8

800065f8 <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( bool b_type )
{
800065f8:	d4 31       	pushm	r0-r7,lr
800065fa:	18 90       	mov	r0,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
800065fc:	49 88       	lddpc	r8,8000665c <nav_filelist_nb+0x64>
800065fe:	f1 01 00 24 	ld.sh	r1,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
80006602:	f0 1f 00 18 	mcall	80006660 <nav_filelist_nb+0x68>
80006606:	c0 31       	brne	8000660c <nav_filelist_nb+0x14>
80006608:	30 02       	mov	r2,0
8000660a:	c2 68       	rjmp	80006656 <nav_filelist_nb+0x5e>
8000660c:	30 02       	mov	r2,0
8000660e:	04 97       	mov	r7,r2
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006610:	30 14       	mov	r4,1
80006612:	04 93       	mov	r3,r2
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
80006614:	49 26       	lddpc	r6,8000665c <nav_filelist_nb+0x64>
80006616:	30 15       	mov	r5,1
80006618:	c0 b8       	rjmp	8000662e <nav_filelist_nb+0x36>
8000661a:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000661e:	ea 08 18 00 	cp.b	r8,r5
80006622:	c0 41       	brne	8000662a <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
80006624:	2f f2       	sub	r2,-1
80006626:	5c 82       	casts.h	r2
80006628:	c0 38       	rjmp	8000662e <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
8000662a:	2f f7       	sub	r7,-1
8000662c:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000662e:	08 9b       	mov	r11,r4
80006630:	06 9c       	mov	r12,r3
80006632:	f0 1f 00 0d 	mcall	80006664 <nav_filelist_nb+0x6c>
80006636:	cf 21       	brne	8000661a <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
80006638:	f0 1f 00 0a 	mcall	80006660 <nav_filelist_nb+0x68>
   if ( u16_save_position != FS_NO_SEL )
8000663c:	3f f8       	mov	r8,-1
8000663e:	f0 01 19 00 	cp.h	r1,r8
80006642:	c0 60       	breq	8000664e <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
80006644:	30 1b       	mov	r11,1
80006646:	f9 d1 c0 10 	bfextu	r12,r1,0x0,0x10
8000664a:	f0 1f 00 07 	mcall	80006664 <nav_filelist_nb+0x6c>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000664e:	58 00       	cp.w	r0,0
80006650:	c0 31       	brne	80006656 <nav_filelist_nb+0x5e>
80006652:	0e 92       	mov	r2,r7
80006654:	5c 82       	casts.h	r2
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
80006656:	04 9c       	mov	r12,r2
80006658:	d8 32       	popm	r0-r7,pc
8000665a:	00 00       	add	r0,r0
8000665c:	00 00       	add	r0,r0
8000665e:	08 58       	eor	r8,r4
80006660:	80 00       	ld.sh	r0,r0[0x0]
80006662:	62 a4       	ld.w	r4,r1[0x28]
80006664:	80 00       	ld.sh	r0,r0[0x0]
80006666:	61 0c       	ld.w	r12,r0[0x40]

80006668 <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_last( bool b_type )
{
80006668:	eb cd 40 c0 	pushm	r6-r7,lr
8000666c:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
8000666e:	f0 1f 00 0f 	mcall	800066a8 <nav_filelist_last+0x40>
80006672:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
80006676:	c0 61       	brne	80006682 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
80006678:	30 99       	mov	r9,9
8000667a:	48 d8       	lddpc	r8,800066ac <nav_filelist_last+0x44>
8000667c:	b0 89       	st.b	r8[0x0],r9
8000667e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006682:	0c 9c       	mov	r12,r6
80006684:	f0 1f 00 0b 	mcall	800066b0 <nav_filelist_last+0x48>
80006688:	c0 d0       	breq	800066a2 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000668a:	30 18       	mov	r8,1
8000668c:	f0 07 19 00 	cp.h	r7,r8
80006690:	c0 31       	brne	80006696 <nav_filelist_last+0x2e>
80006692:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
80006696:	0e 9c       	mov	r12,r7
80006698:	20 2c       	sub	r12,2
8000669a:	30 1b       	mov	r11,1
8000669c:	5c 7c       	castu.h	r12
8000669e:	f0 1f 00 06 	mcall	800066b4 <nav_filelist_last+0x4c>
}
800066a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800066a6:	00 00       	add	r0,r0
800066a8:	80 00       	ld.sh	r0,r0[0x0]
800066aa:	65 f8       	ld.w	r8,r2[0x7c]
800066ac:	00 00       	add	r0,r0
800066ae:	08 a8       	st.w	r4++,r8
800066b0:	80 00       	ld.sh	r0,r0[0x0]
800066b2:	65 b8       	ld.w	r8,r2[0x6c]
800066b4:	80 00       	ld.sh	r0,r0[0x0]
800066b6:	61 0c       	ld.w	r12,r0[0x40]

800066b8 <nav_file_rename>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_file_rename( const FS_STRING sz_name  )
{
800066b8:	eb cd 40 fc 	pushm	r2-r7,lr
800066bc:	18 97       	mov	r7,r12
   bool b_save_entry_type;
   uint8_t u8_attr;
   uint32_t u32_cluster;
   uint32_t u32_size;

   if ( !fat_check_mount_select_noopen())
800066be:	f0 1f 00 18 	mcall	8000671c <nav_file_rename+0x64>
800066c2:	c2 a0       	breq	80006716 <nav_file_rename+0x5e>
      return false;

   if( !fat_check_nav_access_file( true ) )
800066c4:	30 1c       	mov	r12,1
800066c6:	f0 1f 00 17 	mcall	80006720 <nav_file_rename+0x68>
800066ca:	c2 60       	breq	80006716 <nav_file_rename+0x5e>
      return false;

   // Note: in case of error, create the new name before delete the current name

   // Save information about current name poisition
   u16_save_entry_pos = fs_g_nav_fast.u16_entry_pos_sel_file;
800066cc:	49 68       	lddpc	r8,80006724 <nav_file_rename+0x6c>
800066ce:	90 15       	ld.sh	r5,r8[0x2]
   b_save_entry_type  = fs_g_nav.b_mode_nav;
800066d0:	49 68       	lddpc	r8,80006728 <nav_file_rename+0x70>
800066d2:	f1 32 00 2c 	ld.ub	r2,r8[44]
   // Save information about file
   u8_attr           = fs_g_nav_entry.u8_attr;
800066d6:	49 68       	lddpc	r8,8000672c <nav_file_rename+0x74>
800066d8:	11 a6       	ld.ub	r6,r8[0x2]
   u32_cluster       = fs_g_nav_entry.u32_cluster;
800066da:	70 14       	ld.w	r4,r8[0x4]
   u32_size          = fs_g_nav_entry.u32_size;
800066dc:	70 23       	ld.w	r3,r8[0x8]

   // Create a name
   if ( !nav_file_create( sz_name  ))
800066de:	0e 9c       	mov	r12,r7
800066e0:	f0 1f 00 14 	mcall	80006730 <nav_file_rename+0x78>
800066e4:	c1 90       	breq	80006716 <nav_file_rename+0x5e>
      return false; // error
   // Restore information about file or directory on the new name entry
   if ( !fat_read_dir())
800066e6:	f0 1f 00 14 	mcall	80006734 <nav_file_rename+0x7c>
800066ea:	c1 60       	breq	80006716 <nav_file_rename+0x5e>
      return false;
   fs_g_nav_entry.u8_attr = u8_attr;
800066ec:	49 08       	lddpc	r8,8000672c <nav_file_rename+0x74>
800066ee:	b0 a6       	st.b	r8[0x2],r6
   fs_g_nav_entry.u32_cluster = u32_cluster;
800066f0:	91 14       	st.w	r8[0x4],r4
   fs_g_nav_entry.u32_size = u32_size;
800066f2:	91 23       	st.w	r8[0x8],r3
   fat_write_entry_file();
800066f4:	f0 1f 00 11 	mcall	80006738 <nav_file_rename+0x80>

   // Delete old entry name
   fs_g_nav_fast.u16_entry_pos_sel_file = u16_save_entry_pos; // go to old entry name
800066f8:	48 b8       	lddpc	r8,80006724 <nav_file_rename+0x6c>
800066fa:	b0 15       	st.h	r8[0x2],r5
   if ( !fat_delete_file(false) )
800066fc:	30 0c       	mov	r12,0
800066fe:	f0 1f 00 10 	mcall	8000673c <nav_file_rename+0x84>
80006702:	c0 a0       	breq	80006716 <nav_file_rename+0x5e>
      return false;
   if ( !fat_cache_flush() )
80006704:	f0 1f 00 0f 	mcall	80006740 <nav_file_rename+0x88>
80006708:	c0 70       	breq	80006716 <nav_file_rename+0x5e>
      return false;

   // Go to at the position of the new name entry (it is the last file or directory )
   return nav_filelist_last( b_save_entry_type );
8000670a:	58 02       	cp.w	r2,0
8000670c:	5f 1c       	srne	r12
8000670e:	f0 1f 00 0e 	mcall	80006744 <nav_file_rename+0x8c>
80006712:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80006716:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
8000671a:	00 00       	add	r0,r0
8000671c:	80 00       	ld.sh	r0,r0[0x0]
8000671e:	46 8c       	lddsp	r12,sp[0x1a0]
80006720:	80 00       	ld.sh	r0,r0[0x0]
80006722:	3a 70       	mov	r0,-89
80006724:	00 00       	add	r0,r0
80006726:	08 a4       	st.w	r4++,r4
80006728:	00 00       	add	r0,r0
8000672a:	08 58       	eor	r8,r4
8000672c:	00 00       	add	r0,r0
8000672e:	06 18       	sub	r8,r3
80006730:	80 00       	ld.sh	r0,r0[0x0]
80006732:	62 bc       	ld.w	r12,r1[0x2c]
80006734:	80 00       	ld.sh	r0,r0[0x0]
80006736:	42 bc       	lddsp	r12,sp[0xac]
80006738:	80 00       	ld.sh	r0,r0[0x0]
8000673a:	39 dc       	mov	r12,-99
8000673c:	80 00       	ld.sh	r0,r0[0x0]
8000673e:	4b fc       	lddpc	r12,80006838 <nav_partition_mount+0xc>
80006740:	80 00       	ld.sh	r0,r0[0x0]
80006742:	3c 28       	mov	r8,-62
80006744:	80 00       	ld.sh	r0,r0[0x0]
80006746:	66 68       	ld.w	r8,r3[0x18]

80006748 <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_dir_make( const FS_STRING sz_name  )
{
80006748:	eb cd 40 80 	pushm	r7,lr
8000674c:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
8000674e:	f0 1f 00 18 	mcall	800067ac <nav_dir_make+0x64>
80006752:	c2 b0       	breq	800067a8 <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006754:	0e 9c       	mov	r12,r7
80006756:	f0 1f 00 17 	mcall	800067b0 <nav_dir_make+0x68>
8000675a:	c2 70       	breq	800067a8 <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
8000675c:	49 68       	lddpc	r8,800067b4 <nav_dir_make+0x6c>
8000675e:	3f f9       	mov	r9,-1
80006760:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
80006762:	30 19       	mov	r9,1
80006764:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
80006766:	f0 1f 00 15 	mcall	800067b8 <nav_dir_make+0x70>
8000676a:	c0 71       	brne	80006778 <nav_dir_make+0x30>
   {
      fat_delete_file( false );
8000676c:	f0 1f 00 14 	mcall	800067bc <nav_dir_make+0x74>
      fat_cache_flush();
80006770:	f0 1f 00 14 	mcall	800067c0 <nav_dir_make+0x78>
80006774:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
80006778:	49 38       	lddpc	r8,800067c4 <nav_dir_make+0x7c>
8000677a:	48 f9       	lddpc	r9,800067b4 <nav_dir_make+0x6c>
8000677c:	72 09       	ld.w	r9,r9[0x0]
8000677e:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
80006780:	30 09       	mov	r9,0
80006782:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
80006784:	31 09       	mov	r9,16
80006786:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
80006788:	f0 1f 00 10 	mcall	800067c8 <nav_dir_make+0x80>
8000678c:	c0 e0       	breq	800067a8 <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
8000678e:	f0 1f 00 10 	mcall	800067cc <nav_dir_make+0x84>
80006792:	c0 b0       	breq	800067a8 <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
80006794:	f0 1f 00 0f 	mcall	800067d0 <nav_dir_make+0x88>
   if( !fat_cache_flush())
80006798:	f0 1f 00 0a 	mcall	800067c0 <nav_dir_make+0x78>
8000679c:	c0 60       	breq	800067a8 <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
8000679e:	30 0c       	mov	r12,0
800067a0:	f0 1f 00 0d 	mcall	800067d4 <nav_dir_make+0x8c>
800067a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800067a8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800067ac:	80 00       	ld.sh	r0,r0[0x0]
800067ae:	46 b0       	lddsp	r0,sp[0x1ac]
800067b0:	80 00       	ld.sh	r0,r0[0x0]
800067b2:	62 bc       	ld.w	r12,r1[0x2c]
800067b4:	00 00       	add	r0,r0
800067b6:	09 00       	ld.w	r0,r4++
800067b8:	80 00       	ld.sh	r0,r0[0x0]
800067ba:	4e 74       	lddpc	r4,80006954 <nav_gotoindex+0x2c>
800067bc:	80 00       	ld.sh	r0,r0[0x0]
800067be:	4b fc       	lddpc	r12,800068b8 <nav_drive_format+0x1c>
800067c0:	80 00       	ld.sh	r0,r0[0x0]
800067c2:	3c 28       	mov	r8,-62
800067c4:	00 00       	add	r0,r0
800067c6:	06 18       	sub	r8,r3
800067c8:	80 00       	ld.sh	r0,r0[0x0]
800067ca:	49 c8       	lddpc	r8,80006838 <nav_partition_mount+0xc>
800067cc:	80 00       	ld.sh	r0,r0[0x0]
800067ce:	42 bc       	lddsp	r12,sp[0xac]
800067d0:	80 00       	ld.sh	r0,r0[0x0]
800067d2:	39 dc       	mov	r12,-99
800067d4:	80 00       	ld.sh	r0,r0[0x0]
800067d6:	66 68       	ld.w	r8,r3[0x18]

800067d8 <nav_partition_space>:
//! @verbatim
//! You shall mounted the partition before call this routine
//! @endverbatim
//!
uint32_t   nav_partition_space( void )
{
800067d8:	d4 01       	pushm	lr
   fat_check_device();
800067da:	f0 1f 00 08 	mcall	800067f8 <nav_partition_space+0x20>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
800067de:	48 88       	lddpc	r8,800067fc <nav_partition_space+0x24>
800067e0:	11 89       	ld.ub	r9,r8[0x0]
800067e2:	30 08       	mov	r8,0
800067e4:	f0 09 18 00 	cp.b	r9,r8
800067e8:	c0 21       	brne	800067ec <nav_partition_space+0x14>
800067ea:	d8 0a       	popm	pc,r12=0
      return 0;
   return (fs_g_nav.u32_CountofCluster * fs_g_nav.u8_BPB_SecPerClus);
800067ec:	48 58       	lddpc	r8,80006800 <nav_partition_space+0x28>
800067ee:	11 9c       	ld.ub	r12,r8[0x1]
800067f0:	70 38       	ld.w	r8,r8[0xc]
800067f2:	b1 3c       	mul	r12,r8
}
800067f4:	d8 02       	popm	pc
800067f6:	00 00       	add	r0,r0
800067f8:	80 00       	ld.sh	r0,r0[0x0]
800067fa:	45 24       	lddsp	r4,sp[0x148]
800067fc:	00 00       	add	r0,r0
800067fe:	08 a4       	st.w	r4++,r4
80006800:	00 00       	add	r0,r0
80006802:	08 58       	eor	r8,r4

80006804 <nav_partition_freespace>:
//! @verbatim
//! You shall mounted the partition before call this routine
//! @endverbatim
//!
uint32_t   nav_partition_freespace( void )
{
80006804:	d4 01       	pushm	lr
   fat_check_device();
80006806:	f0 1f 00 07 	mcall	80006820 <nav_partition_freespace+0x1c>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
8000680a:	48 78       	lddpc	r8,80006824 <nav_partition_freespace+0x20>
8000680c:	11 89       	ld.ub	r9,r8[0x0]
8000680e:	30 08       	mov	r8,0
80006810:	f0 09 18 00 	cp.b	r9,r8
80006814:	c0 21       	brne	80006818 <nav_partition_freespace+0x14>
80006816:	d8 0a       	popm	pc,r12=0
      return 0;
   return fat_getfreespace();
80006818:	f0 1f 00 04 	mcall	80006828 <nav_partition_freespace+0x24>
}
8000681c:	d8 02       	popm	pc
8000681e:	00 00       	add	r0,r0
80006820:	80 00       	ld.sh	r0,r0[0x0]
80006822:	45 24       	lddsp	r4,sp[0x148]
80006824:	00 00       	add	r0,r0
80006826:	08 a4       	st.w	r4++,r4
80006828:	80 00       	ld.sh	r0,r0[0x0]
8000682a:	56 34       	stdsp	sp[0x18c],r4

8000682c <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
8000682c:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
8000682e:	f0 1f 00 0a 	mcall	80006854 <nav_partition_mount+0x28>
80006832:	c0 f0       	breq	80006850 <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80006834:	48 98       	lddpc	r8,80006858 <nav_partition_mount+0x2c>
80006836:	11 89       	ld.ub	r9,r8[0x0]
80006838:	30 08       	mov	r8,0
8000683a:	f0 09 18 00 	cp.b	r9,r8
8000683e:	c0 70       	breq	8000684c <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
80006840:	30 09       	mov	r9,0
80006842:	48 78       	lddpc	r8,8000685c <nav_partition_mount+0x30>
80006844:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80006846:	f0 1f 00 07 	mcall	80006860 <nav_partition_mount+0x34>
8000684a:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
8000684c:	f0 1f 00 06 	mcall	80006864 <nav_partition_mount+0x38>
}
80006850:	d8 02       	popm	pc
80006852:	00 00       	add	r0,r0
80006854:	80 00       	ld.sh	r0,r0[0x0]
80006856:	45 dc       	lddsp	r12,sp[0x174]
80006858:	00 00       	add	r0,r0
8000685a:	08 a4       	st.w	r4++,r4
8000685c:	00 00       	add	r0,r0
8000685e:	08 58       	eor	r8,r4
80006860:	80 00       	ld.sh	r0,r0[0x0]
80006862:	35 f8       	mov	r8,95
80006864:	80 00       	ld.sh	r0,r0[0x0]
80006866:	58 4c       	cp.w	r12,4

80006868 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80006868:	d4 01       	pushm	lr
   return nav_partition_mount();
8000686a:	f0 1f 00 02 	mcall	80006870 <nav_dir_root+0x8>
}
8000686e:	d8 02       	popm	pc
80006870:	80 00       	ld.sh	r0,r0[0x0]
80006872:	68 2c       	ld.w	r12,r4[0x8]

80006874 <nav_partition_type>:
//!
//! @return partition type: FS_TYPE_FAT_12, FS_TYPE_FAT_16, FS_TYPE_FAT_32
//! @return FS_TYPE_FAT_UNM, in case of error or unknow format
//!
uint8_t    nav_partition_type( void )
{
80006874:	d4 01       	pushm	lr
   fat_check_device();
80006876:	f0 1f 00 07 	mcall	80006890 <nav_partition_type+0x1c>
   if( FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
8000687a:	48 78       	lddpc	r8,80006894 <nav_partition_type+0x20>
8000687c:	11 89       	ld.ub	r9,r8[0x0]
8000687e:	30 08       	mov	r8,0
80006880:	f0 09 18 00 	cp.b	r9,r8
80006884:	c0 31       	brne	8000688a <nav_partition_type+0x16>
   {
      nav_partition_mount();
80006886:	f0 1f 00 05 	mcall	80006898 <nav_partition_type+0x24>
   }
   return fs_g_nav_fast.u8_type_fat;
}
8000688a:	48 38       	lddpc	r8,80006894 <nav_partition_type+0x20>
8000688c:	11 8c       	ld.ub	r12,r8[0x0]
8000688e:	d8 02       	popm	pc
80006890:	80 00       	ld.sh	r0,r0[0x0]
80006892:	45 24       	lddsp	r4,sp[0x148]
80006894:	00 00       	add	r0,r0
80006896:	08 a4       	st.w	r4++,r4
80006898:	80 00       	ld.sh	r0,r0[0x0]
8000689a:	68 2c       	ld.w	r12,r4[0x8]

8000689c <nav_drive_format>:
//! WARNING: This routine can't format a multi-partiton, if the disk contains a multi-partition
//! then this one is erased and replaced by a single partition on ALL disk space.
//! @endverbatim
//!
bool  nav_drive_format( uint8_t u8_fat_type )
{
8000689c:	eb cd 40 80 	pushm	r7,lr
800068a0:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
800068a2:	f0 1f 00 09 	mcall	800068c4 <nav_drive_format+0x28>
800068a6:	c0 c0       	breq	800068be <nav_drive_format+0x22>
      return false;
   if ( !fat_check_nav_access_disk() )
800068a8:	f0 1f 00 08 	mcall	800068c8 <nav_drive_format+0x2c>
800068ac:	c0 90       	breq	800068be <nav_drive_format+0x22>
      return false;
   if ( !fat_format( u8_fat_type ) )
800068ae:	0e 9c       	mov	r12,r7
800068b0:	f0 1f 00 07 	mcall	800068cc <nav_drive_format+0x30>
800068b4:	c0 50       	breq	800068be <nav_drive_format+0x22>
      return false;
   return fat_mount();
800068b6:	f0 1f 00 07 	mcall	800068d0 <nav_drive_format+0x34>
800068ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800068be:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800068c2:	00 00       	add	r0,r0
800068c4:	80 00       	ld.sh	r0,r0[0x0]
800068c6:	45 dc       	lddsp	r12,sp[0x174]
800068c8:	80 00       	ld.sh	r0,r0[0x0]
800068ca:	3a 2c       	mov	r12,-94
800068cc:	80 00       	ld.sh	r0,r0[0x0]
800068ce:	57 c4       	stdsp	sp[0x1f0],r4
800068d0:	80 00       	ld.sh	r0,r0[0x0]
800068d2:	58 4c       	cp.w	r12,4

800068d4 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
800068d4:	eb cd 40 80 	pushm	r7,lr
800068d8:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
800068da:	f0 1f 00 0f 	mcall	80006914 <nav_drive_set+0x40>
800068de:	c1 90       	breq	80006910 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
800068e0:	f0 1f 00 0e 	mcall	80006918 <nav_drive_set+0x44>
800068e4:	ee 0c 18 00 	cp.b	r12,r7
800068e8:	e0 8b 00 07 	brhi	800068f6 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
800068ec:	30 69       	mov	r9,6
800068ee:	48 c8       	lddpc	r8,8000691c <nav_drive_set+0x48>
800068f0:	b0 89       	st.b	r8[0x0],r9
800068f2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
800068f6:	48 b8       	lddpc	r8,80006920 <nav_drive_set+0x4c>
800068f8:	11 88       	ld.ub	r8,r8[0x0]
800068fa:	ee 08 18 00 	cp.b	r8,r7
800068fe:	c0 31       	brne	80006904 <nav_drive_set+0x30>
80006900:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006904:	48 78       	lddpc	r8,80006920 <nav_drive_set+0x4c>
80006906:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006908:	30 09       	mov	r9,0
8000690a:	48 78       	lddpc	r8,80006924 <nav_drive_set+0x50>
8000690c:	b0 89       	st.b	r8[0x0],r9
8000690e:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80006910:	e3 cd 80 80 	ldm	sp++,r7,pc
80006914:	80 00       	ld.sh	r0,r0[0x0]
80006916:	45 dc       	lddsp	r12,sp[0x174]
80006918:	80 00       	ld.sh	r0,r0[0x0]
8000691a:	74 34       	ld.w	r4,r10[0xc]
8000691c:	00 00       	add	r0,r0
8000691e:	08 a8       	st.w	r4++,r8
80006920:	00 00       	add	r0,r0
80006922:	08 58       	eor	r8,r4
80006924:	00 00       	add	r0,r0
80006926:	08 a4       	st.w	r4++,r4

80006928 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80006928:	d4 21       	pushm	r4-r7,lr
8000692a:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000692c:	19 8c       	ld.ub	r12,r12[0x0]
8000692e:	f0 1f 00 10 	mcall	8000696c <nav_gotoindex+0x44>
80006932:	c1 c0       	breq	8000696a <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80006934:	f0 1f 00 0f 	mcall	80006970 <nav_gotoindex+0x48>
80006938:	c1 90       	breq	8000696a <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000693a:	6e 19       	ld.w	r9,r7[0x4]
8000693c:	48 e8       	lddpc	r8,80006974 <nav_gotoindex+0x4c>
8000693e:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
80006940:	f0 1f 00 0e 	mcall	80006978 <nav_gotoindex+0x50>
80006944:	c0 a1       	brne	80006958 <nav_gotoindex+0x30>
80006946:	c1 28       	rjmp	8000696a <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006948:	0a 9b       	mov	r11,r5
8000694a:	08 9c       	mov	r12,r4
8000694c:	f0 1f 00 0c 	mcall	8000697c <nav_gotoindex+0x54>
80006950:	c0 71       	brne	8000695e <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
80006952:	f0 1f 00 0a 	mcall	80006978 <nav_gotoindex+0x50>
80006956:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80006958:	48 a6       	lddpc	r6,80006980 <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000695a:	30 15       	mov	r5,1
8000695c:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000695e:	8c 19       	ld.sh	r9,r6[0x2]
80006960:	8e 48       	ld.sh	r8,r7[0x8]
80006962:	f0 09 19 00 	cp.h	r9,r8
80006966:	cf 11       	brne	80006948 <nav_gotoindex+0x20>
80006968:	da 2a       	popm	r4-r7,pc,r12=1
8000696a:	d8 2a       	popm	r4-r7,pc,r12=0
8000696c:	80 00       	ld.sh	r0,r0[0x0]
8000696e:	68 d4       	ld.w	r4,r4[0x34]
80006970:	80 00       	ld.sh	r0,r0[0x0]
80006972:	68 2c       	ld.w	r12,r4[0x8]
80006974:	00 00       	add	r0,r0
80006976:	08 58       	eor	r8,r4
80006978:	80 00       	ld.sh	r0,r0[0x0]
8000697a:	62 a4       	ld.w	r4,r1[0x28]
8000697c:	80 00       	ld.sh	r0,r0[0x0]
8000697e:	61 0c       	ld.w	r12,r0[0x40]
80006980:	00 00       	add	r0,r0
80006982:	08 a4       	st.w	r4++,r4

80006984 <nav_setcwd>:
//! With syntact "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntact "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
80006984:	d4 31       	pushm	r0-r7,lr
80006986:	20 6d       	sub	sp,24
80006988:	18 97       	mov	r7,r12
8000698a:	16 91       	mov	r1,r11
8000698c:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
8000698e:	f0 1f 00 61 	mcall	80006b10 <nav_setcwd+0x18c>
80006992:	e0 80 00 bd 	breq	80006b0c <nav_setcwd+0x188>
      return false;

   index = nav_getindex();             // Save current position
80006996:	1a 96       	mov	r6,sp
80006998:	1a 9c       	mov	r12,sp
8000699a:	f0 1f 00 5f 	mcall	80006b14 <nav_setcwd+0x190>
8000699e:	fa c8 ff f4 	sub	r8,sp,-12
800069a2:	fa ea 00 00 	ld.d	r10,sp[0]
800069a6:	f0 eb 00 00 	st.d	r8[0],r10
800069aa:	40 29       	lddsp	r9,sp[0x8]
800069ac:	91 29       	st.w	r8[0x8],r9

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
800069ae:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
800069b0:	35 c9       	mov	r9,92
800069b2:	f2 08 18 00 	cp.b	r8,r9
800069b6:	5f 0a       	sreq	r10
800069b8:	32 f9       	mov	r9,47
800069ba:	f2 08 18 00 	cp.b	r8,r9
800069be:	5f 09       	sreq	r9
800069c0:	f5 e9 10 09 	or	r9,r10,r9
800069c4:	c0 70       	breq	800069d2 <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
800069c6:	f0 1f 00 55 	mcall	80006b18 <nav_setcwd+0x194>
800069ca:	e0 80 00 9c 	breq	80006b02 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
800069ce:	2f f7       	sub	r7,-1
800069d0:	c5 e8       	rjmp	80006a8c <nav_setcwd+0x108>
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
800069d2:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
800069d4:	33 aa       	mov	r10,58
800069d6:	f4 09 18 00 	cp.b	r9,r10
800069da:	c2 01       	brne	80006a1a <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
800069dc:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
800069de:	35 cb       	mov	r11,92
800069e0:	f6 0a 18 00 	cp.b	r10,r11
800069e4:	5f 0b       	sreq	r11
800069e6:	32 fc       	mov	r12,47
800069e8:	f8 0a 18 00 	cp.b	r10,r12
800069ec:	5f 0a       	sreq	r10
800069ee:	f7 ea 10 0a 	or	r10,r11,r10
800069f2:	c1 40       	breq	80006a1a <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
800069f4:	4c a9       	lddpc	r9,80006b1c <nav_setcwd+0x198>
800069f6:	72 09       	ld.w	r9,r9[0x0]
800069f8:	f2 08 07 09 	ld.ub	r9,r9[r8]
800069fc:	e2 19 00 02 	andl	r9,0x2,COH
80006a00:	f7 b8 01 20 	subne	r8,32
80006a04:	24 18       	sub	r8,65
80006a06:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80006a0a:	f0 1f 00 46 	mcall	80006b20 <nav_setcwd+0x19c>
80006a0e:	c7 a0       	breq	80006b02 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
80006a10:	f0 1f 00 45 	mcall	80006b24 <nav_setcwd+0x1a0>
80006a14:	c7 70       	breq	80006b02 <nav_setcwd+0x17e>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80006a16:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006a18:	c3 a8       	rjmp	80006a8c <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006a1a:	32 ea       	mov	r10,46
80006a1c:	f4 08 18 00 	cp.b	r8,r10
80006a20:	c1 a1       	brne	80006a54 <nav_setcwd+0xd0>
80006a22:	35 c8       	mov	r8,92
80006a24:	f0 09 18 00 	cp.b	r9,r8
80006a28:	5f 0a       	sreq	r10
80006a2a:	32 f8       	mov	r8,47
80006a2c:	f0 09 18 00 	cp.b	r9,r8
80006a30:	5f 08       	sreq	r8
80006a32:	f5 e8 10 08 	or	r8,r10,r8
80006a36:	c0 f0       	breq	80006a54 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80006a38:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80006a3a:	c2 98       	rjmp	80006a8c <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
80006a3c:	f0 1f 00 3b 	mcall	80006b28 <nav_setcwd+0x1a4>
80006a40:	c6 10       	breq	80006b02 <nav_setcwd+0x17e>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
80006a42:	0d 88       	ld.ub	r8,r6[0x0]
80006a44:	e8 08 18 00 	cp.b	r8,r4
80006a48:	c0 31       	brne	80006a4e <nav_setcwd+0xca>
80006a4a:	0c 97       	mov	r7,r6
80006a4c:	c0 88       	rjmp	80006a5c <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
80006a4e:	ec c7 ff ff 	sub	r7,r6,-1
80006a52:	c0 58       	rjmp	80006a5c <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006a54:	32 e5       	mov	r5,46
80006a56:	35 c3       	mov	r3,92
80006a58:	32 f2       	mov	r2,47
80006a5a:	30 04       	mov	r4,0
80006a5c:	0f 88       	ld.ub	r8,r7[0x0]
80006a5e:	ea 08 18 00 	cp.b	r8,r5
80006a62:	c1 51       	brne	80006a8c <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
80006a64:	0f 98       	ld.ub	r8,r7[0x1]
80006a66:	ea 08 18 00 	cp.b	r8,r5
80006a6a:	c1 11       	brne	80006a8c <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
80006a6c:	ee c6 ff fe 	sub	r6,r7,-2
80006a70:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006a72:	e6 08 18 00 	cp.b	r8,r3
80006a76:	5f 0a       	sreq	r10
80006a78:	e4 08 18 00 	cp.b	r8,r2
80006a7c:	5f 09       	sreq	r9
80006a7e:	f5 e9 10 09 	or	r9,r10,r9
80006a82:	e8 09 18 00 	cp.b	r9,r4
80006a86:	cd b1       	brne	80006a3c <nav_setcwd+0xb8>
80006a88:	58 08       	cp.w	r8,0
80006a8a:	cd 90       	breq	80006a3c <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80006a8c:	f0 1f 00 28 	mcall	80006b2c <nav_setcwd+0x1a8>
80006a90:	c3 90       	breq	80006b02 <nav_setcwd+0x17e>
80006a92:	30 03       	mov	r3,0
80006a94:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006a96:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006a98:	35 c5       	mov	r5,92
80006a9a:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006a9c:	0f 88       	ld.ub	r8,r7[0x0]
80006a9e:	ec 08 18 00 	cp.b	r8,r6
80006aa2:	c0 31       	brne	80006aa8 <nav_setcwd+0x124>
80006aa4:	30 1c       	mov	r12,1
80006aa6:	c3 38       	rjmp	80006b0c <nav_setcwd+0x188>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006aa8:	02 9b       	mov	r11,r1
80006aaa:	0e 9c       	mov	r12,r7
80006aac:	f0 1f 00 21 	mcall	80006b30 <nav_setcwd+0x1ac>
80006ab0:	c0 51       	brne	80006aba <nav_setcwd+0x136>
      {
         // The file or directory is not found
         if( !b_create )
80006ab2:	58 00       	cp.w	r0,0
80006ab4:	c2 70       	breq	80006b02 <nav_setcwd+0x17e>
80006ab6:	0e 92       	mov	r2,r7
80006ab8:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006aba:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006abc:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
80006abe:	58 08       	cp.w	r8,0
80006ac0:	c0 81       	brne	80006ad0 <nav_setcwd+0x14c>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80006ac2:	58 03       	cp.w	r3,0
80006ac4:	ce c0       	breq	80006a9c <nav_setcwd+0x118>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006ac6:	04 9c       	mov	r12,r2
80006ac8:	f0 1f 00 1b 	mcall	80006b34 <nav_setcwd+0x1b0>
80006acc:	ce 81       	brne	80006a9c <nav_setcwd+0x118>
80006ace:	c1 a8       	rjmp	80006b02 <nav_setcwd+0x17e>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006ad0:	ea 08 18 00 	cp.b	r8,r5
80006ad4:	5f 09       	sreq	r9
80006ad6:	e8 08 18 00 	cp.b	r8,r4
80006ada:	5f 08       	sreq	r8
80006adc:	f3 e8 10 08 	or	r8,r9,r8
80006ae0:	ec 08 18 00 	cp.b	r8,r6
80006ae4:	ce b0       	breq	80006aba <nav_setcwd+0x136>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006ae6:	58 03       	cp.w	r3,0
80006ae8:	c0 50       	breq	80006af2 <nav_setcwd+0x16e>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006aea:	04 9c       	mov	r12,r2
80006aec:	f0 1f 00 13 	mcall	80006b38 <nav_setcwd+0x1b4>
80006af0:	c0 90       	breq	80006b02 <nav_setcwd+0x17e>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80006af2:	f0 1f 00 13 	mcall	80006b3c <nav_setcwd+0x1b8>
80006af6:	c0 60       	breq	80006b02 <nav_setcwd+0x17e>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006af8:	f0 1f 00 12 	mcall	80006b40 <nav_setcwd+0x1bc>
80006afc:	c0 30       	breq	80006b02 <nav_setcwd+0x17e>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80006afe:	2f f7       	sub	r7,-1
80006b00:	cc eb       	rjmp	80006a9c <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80006b02:	fa cc ff f4 	sub	r12,sp,-12
80006b06:	f0 1f 00 10 	mcall	80006b44 <nav_setcwd+0x1c0>
80006b0a:	30 0c       	mov	r12,0
   return false;
}
80006b0c:	2f ad       	sub	sp,-24
80006b0e:	d8 32       	popm	r0-r7,pc
80006b10:	80 00       	ld.sh	r0,r0[0x0]
80006b12:	45 dc       	lddsp	r12,sp[0x174]
80006b14:	80 00       	ld.sh	r0,r0[0x0]
80006b16:	5f e0       	srqs	r0
80006b18:	80 00       	ld.sh	r0,r0[0x0]
80006b1a:	68 68       	ld.w	r8,r4[0x18]
80006b1c:	00 00       	add	r0,r0
80006b1e:	00 14       	sub	r4,r0
80006b20:	80 00       	ld.sh	r0,r0[0x0]
80006b22:	68 d4       	ld.w	r4,r4[0x34]
80006b24:	80 00       	ld.sh	r0,r0[0x0]
80006b26:	68 2c       	ld.w	r12,r4[0x8]
80006b28:	80 00       	ld.sh	r0,r0[0x0]
80006b2a:	63 28       	ld.w	r8,r1[0x48]
80006b2c:	80 00       	ld.sh	r0,r0[0x0]
80006b2e:	62 a4       	ld.w	r4,r1[0x28]
80006b30:	80 00       	ld.sh	r0,r0[0x0]
80006b32:	62 74       	ld.w	r4,r1[0x1c]
80006b34:	80 00       	ld.sh	r0,r0[0x0]
80006b36:	62 bc       	ld.w	r12,r1[0x2c]
80006b38:	80 00       	ld.sh	r0,r0[0x0]
80006b3a:	67 48       	ld.w	r8,r3[0x50]
80006b3c:	80 00       	ld.sh	r0,r0[0x0]
80006b3e:	35 e0       	mov	r0,94
80006b40:	80 00       	ld.sh	r0,r0[0x0]
80006b42:	64 cc       	ld.w	r12,r2[0x30]
80006b44:	80 00       	ld.sh	r0,r0[0x0]
80006b46:	69 28       	ld.w	r8,r4[0x48]

80006b48 <nav_drive_nb>:
//! @verbatim
//! This value may be dynamic because it depends of memory drivers (e.g. Mass Storage disk on USB host mode)
//! @endverbatim
//!
uint8_t    nav_drive_nb( void )
{
80006b48:	d4 01       	pushm	lr
   return get_nb_lun(); // Number of devices = Number of lun
80006b4a:	f0 1f 00 02 	mcall	80006b50 <nav_drive_nb+0x8>
}
80006b4e:	d8 02       	popm	pc
80006b50:	80 00       	ld.sh	r0,r0[0x0]
80006b52:	74 34       	ld.w	r4,r10[0xc]

80006b54 <nav_copy>:
//! @verbatim
//! Use this routine to select quickly the same file in another navigator
//! @endverbatim
//!
bool  nav_copy( uint8_t u8_idnav )
{
80006b54:	d4 01       	pushm	lr
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected == u8_idnav )
80006b56:	48 88       	lddpc	r8,80006b74 <nav_copy+0x20>
80006b58:	11 88       	ld.ub	r8,r8[0x0]
80006b5a:	f8 08 18 00 	cp.b	r8,r12
80006b5e:	c0 90       	breq	80006b70 <nav_copy+0x1c>
      return false;                    // It is the source and destination is the same navigator
   if( 0 == u8_idnav )
80006b60:	58 0c       	cp.w	r12,0
80006b62:	c0 41       	brne	80006b6a <nav_copy+0x16>
      u8_idnav = fs_g_u8_nav_selected; // the default navigator is invert with the current navigator
   if( 0 == u8_idnav)
80006b64:	58 08       	cp.w	r8,0
80006b66:	c0 50       	breq	80006b70 <nav_copy+0x1c>
80006b68:	10 9c       	mov	r12,r8
      return false;                    // It is the source and destination is the same navigator
   fat_copy_nav( u8_idnav );
80006b6a:	f0 1f 00 04 	mcall	80006b78 <nav_copy+0x24>
80006b6e:	da 0a       	popm	pc,r12=1
   return true;
80006b70:	d8 0a       	popm	pc,r12=0
80006b72:	00 00       	add	r0,r0
80006b74:	00 00       	add	r0,r0
80006b76:	09 24       	ld.uh	r4,r4++
80006b78:	80 00       	ld.sh	r0,r0[0x0]
80006b7a:	3a e8       	mov	r8,-82

80006b7c <nav_file_copy>:
//! @verbatim
//! If you use the COPY navigator after this routine then the copy information is lost (see FS_NAV_ID_COPYFILE in conf_explorer.h).
//! @endverbatim
//!
bool  nav_file_copy( void )
{
80006b7c:	d4 01       	pushm	lr
   if( nav_file_isdir() )
80006b7e:	f0 1f 00 06 	mcall	80006b94 <nav_file_copy+0x18>
80006b82:	c0 50       	breq	80006b8c <nav_file_copy+0x10>
   {
      fs_g_status = FS_ERR_COPY_DIR; // Impossible to copy a directory
80006b84:	32 49       	mov	r9,36
80006b86:	48 58       	lddpc	r8,80006b98 <nav_file_copy+0x1c>
80006b88:	b0 89       	st.b	r8[0x0],r9
80006b8a:	d8 0a       	popm	pc,r12=0
      return false;
   }
   // In "copy file" navigator select the file
   nav_copy( FS_NAV_ID_COPYFILE );
80006b8c:	30 1c       	mov	r12,1
80006b8e:	f0 1f 00 04 	mcall	80006b9c <nav_file_copy+0x20>
80006b92:	da 0a       	popm	pc,r12=1
80006b94:	80 00       	ld.sh	r0,r0[0x0]
80006b96:	60 1c       	ld.w	r12,r0[0x4]
80006b98:	00 00       	add	r0,r0
80006b9a:	08 a8       	st.w	r4++,r8
80006b9c:	80 00       	ld.sh	r0,r0[0x0]
80006b9e:	6b 54       	ld.w	r4,r5[0x54]

80006ba0 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
80006ba0:	eb cd 40 80 	pushm	r7,lr
80006ba4:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80006ba6:	30 18       	mov	r8,1
80006ba8:	f0 0c 18 00 	cp.b	r12,r8
80006bac:	e0 88 00 07 	brls	80006bba <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
80006bb0:	32 79       	mov	r9,39
80006bb2:	48 b8       	lddpc	r8,80006bdc <nav_select+0x3c>
80006bb4:	b0 89       	st.b	r8[0x0],r9
80006bb6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80006bba:	48 a8       	lddpc	r8,80006be0 <nav_select+0x40>
80006bbc:	11 8c       	ld.ub	r12,r8[0x0]
80006bbe:	ee 0c 18 00 	cp.b	r12,r7
80006bc2:	c0 31       	brne	80006bc8 <nav_select+0x28>
80006bc4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80006bc8:	f0 1f 00 07 	mcall	80006be4 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80006bcc:	0e 9c       	mov	r12,r7
80006bce:	f0 1f 00 06 	mcall	80006be4 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80006bd2:	48 48       	lddpc	r8,80006be0 <nav_select+0x40>
80006bd4:	b0 87       	st.b	r8[0x0],r7
80006bd6:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006bda:	00 00       	add	r0,r0
80006bdc:	00 00       	add	r0,r0
80006bde:	08 a8       	st.w	r4++,r8
80006be0:	00 00       	add	r0,r0
80006be2:	09 24       	ld.uh	r4,r4++
80006be4:	80 00       	ld.sh	r0,r0[0x0]
80006be6:	3b 4c       	mov	r12,-76

80006be8 <nav_file_paste_state>:
//!            COPY_BUSY,     copy running
//!            COPY_FAIL,     copy fail
//!            COPY_FINISH,   copy finish
//!
uint8_t    nav_file_paste_state( bool b_stop )
{
80006be8:	eb cd 40 f8 	pushm	r3-r7,lr
80006bec:	18 97       	mov	r7,r12
   Ctrl_status status_stream;
   uint8_t status_copy;
   uint8_t nav_id_save;
   _MEM_TYPE_SLOW_ uint16_t u16_nb_sector_trans;

   nav_id_save = nav_get();
80006bee:	f0 1f 00 66 	mcall	80006d84 <nav_file_paste_state+0x19c>
80006bf2:	18 96       	mov	r6,r12

   // Check, if the copy is running
   if( ID_STREAM_ERR == g_id_trans_memtomem )
80006bf4:	4e 58       	lddpc	r8,80006d88 <nav_file_paste_state+0x1a0>
80006bf6:	11 8c       	ld.ub	r12,r8[0x0]
80006bf8:	3f f8       	mov	r8,-1
80006bfa:	f0 0c 18 00 	cp.b	r12,r8
80006bfe:	c0 31       	brne	80006c04 <nav_file_paste_state+0x1c>
80006c00:	30 17       	mov	r7,1
80006c02:	c9 e8       	rjmp	80006d3e <nav_file_paste_state+0x156>
      return COPY_FAIL;

   if( b_stop )
80006c04:	58 07       	cp.w	r7,0
80006c06:	e0 81 00 b6 	brne	80006d72 <nav_file_paste_state+0x18a>
   {
      status_copy = COPY_FAIL;
   }
   else
   {
      if( (ID_STREAM_ERR-1) != g_id_trans_memtomem )
80006c0a:	3f e8       	mov	r8,-2
80006c0c:	f0 0c 18 00 	cp.b	r12,r8
80006c10:	c0 f0       	breq	80006c2e <nav_file_paste_state+0x46>
      {
         // It isn't the beginning of copy action, then check current stream
         status_stream = stream_state( g_id_trans_memtomem );
80006c12:	f0 1f 00 5f 	mcall	80006d8c <nav_file_paste_state+0x1a4>
80006c16:	58 3c       	cp.w	r12,3
80006c18:	e0 88 00 04 	brls	80006c20 <nav_file_paste_state+0x38>
80006c1c:	30 17       	mov	r7,1
80006c1e:	c6 88       	rjmp	80006cee <nav_file_paste_state+0x106>
80006c20:	4d c8       	lddpc	r8,80006d90 <nav_file_paste_state+0x1a8>
80006c22:	f0 0c 07 07 	ld.ub	r7,r8[r12]
      }else{
         status_copy = COPY_FINISH;
      }

      // Compute the new segment to copy
      if( COPY_FINISH == status_copy )
80006c26:	30 28       	mov	r8,2
80006c28:	f0 07 18 00 	cp.b	r7,r8
80006c2c:	c5 f1       	brne	80006cea <nav_file_paste_state+0x102>
      {
         stream_stop( g_id_trans_memtomem );
80006c2e:	4d 78       	lddpc	r8,80006d88 <nav_file_paste_state+0x1a0>
80006c30:	11 8c       	ld.ub	r12,r8[0x0]
80006c32:	f0 1f 00 59 	mcall	80006d94 <nav_file_paste_state+0x1ac>

         if( 0 != g_segment_src.u16_size )
80006c36:	4d 98       	lddpc	r8,80006d98 <nav_file_paste_state+0x1b0>
80006c38:	90 49       	ld.sh	r9,r8[0x8]
80006c3a:	30 08       	mov	r8,0
80006c3c:	f0 09 19 00 	cp.h	r9,r8
80006c40:	e0 81 00 97 	brne	80006d6e <nav_file_paste_state+0x186>
            status_copy = COPY_BUSY;            // start the next continue stream
         }
         else
         {
            // check eof source file
            nav_select( FS_NAV_ID_COPYFILE );
80006c44:	30 1c       	mov	r12,1
80006c46:	f0 1f 00 56 	mcall	80006d9c <nav_file_paste_state+0x1b4>
            if( 0 == file_eof() )
80006c4a:	f0 1f 00 56 	mcall	80006da0 <nav_file_paste_state+0x1b8>
80006c4e:	c0 30       	breq	80006c54 <nav_file_paste_state+0x6c>
80006c50:	30 27       	mov	r7,2
80006c52:	c0 88       	rjmp	80006c62 <nav_file_paste_state+0x7a>
            {
               status_copy = COPY_BUSY;
               g_segment_src.u16_size = 0xFFFF; // Get the maximum segment supported by navigation (uint16_t)
80006c54:	4d 1c       	lddpc	r12,80006d98 <nav_file_paste_state+0x1b0>
80006c56:	3f f8       	mov	r8,-1
80006c58:	b8 48       	st.h	r12[0x8],r8
               if( !file_read( &g_segment_src ))
80006c5a:	f0 1f 00 53 	mcall	80006da4 <nav_file_paste_state+0x1bc>
80006c5e:	c7 31       	brne	80006d44 <nav_file_paste_state+0x15c>
80006c60:	30 17       	mov	r7,1
               {
                  status_copy = COPY_FAIL;
               }
            }
            nav_select( nav_id_save );
80006c62:	0c 9c       	mov	r12,r6
80006c64:	f0 1f 00 4e 	mcall	80006d9c <nav_file_paste_state+0x1b4>
80006c68:	c4 38       	rjmp	80006cee <nav_file_paste_state+0x106>
            {
               // Compute a minimal segment
                if( g_segment_src.u16_size > g_segment_dest.u16_size )
               {
                  // Reposition source file
                  nav_select( FS_NAV_ID_COPYFILE );
80006c6a:	30 1c       	mov	r12,1
80006c6c:	f0 1f 00 4c 	mcall	80006d9c <nav_file_paste_state+0x1b4>
                   if( !file_seek( (uint32_t)(g_segment_src.u16_size - g_segment_dest.u16_size)*FS_512B , FS_SEEK_CUR_RE ))
80006c70:	4c a4       	lddpc	r4,80006d98 <nav_file_paste_state+0x1b0>
80006c72:	88 cc       	ld.uh	r12,r4[0x8]
80006c74:	4c d5       	lddpc	r5,80006da8 <nav_file_paste_state+0x1c0>
80006c76:	8a c8       	ld.uh	r8,r5[0x8]
80006c78:	10 1c       	sub	r12,r8
80006c7a:	30 2b       	mov	r11,2
80006c7c:	a9 7c       	lsl	r12,0x9
80006c7e:	f0 1f 00 4c 	mcall	80006dac <nav_file_paste_state+0x1c4>
80006c82:	ec 1c 00 01 	eorl	r12,0x1
80006c86:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
                  {
                     status_copy = COPY_FAIL;
                  }
                  nav_select( nav_id_save );
80006c8a:	06 9c       	mov	r12,r3
80006c8c:	f0 1f 00 44 	mcall	80006d9c <nav_file_paste_state+0x1b4>
                   g_segment_src.u16_size = g_segment_dest.u16_size; // Update source to start a correct transfer
80006c90:	8a 48       	ld.sh	r8,r5[0x8]
80006c92:	a8 48       	st.h	r4[0x8],r8
               }
            }
         }
         if( COPY_BUSY == status_copy )
80006c94:	58 07       	cp.w	r7,0
80006c96:	c2 c1       	brne	80006cee <nav_file_paste_state+0x106>
         {
            // Split transfer by step of SIZE_OF_SPLIT_COPY
            if( g_segment_src.u16_size < SIZE_OF_SPLIT_COPY )
80006c98:	4c 08       	lddpc	r8,80006d98 <nav_file_paste_state+0x1b0>
80006c9a:	90 45       	ld.sh	r5,r8[0x8]
80006c9c:	e0 68 07 ff 	mov	r8,2047
80006ca0:	e0 69 08 00 	mov	r9,2048
80006ca4:	ea 08 19 00 	cp.h	r8,r5
80006ca8:	f2 05 17 30 	movlo	r5,r9
               u16_nb_sector_trans = g_segment_src.u16_size;
            else
               u16_nb_sector_trans = SIZE_OF_SPLIT_COPY;

            g_id_trans_memtomem = stream_mem_to_mem( g_segment_src.u8_lun , g_segment_src.u32_addr , g_segment_dest.u8_lun , g_segment_dest.u32_addr , u16_nb_sector_trans );
80006cac:	4b fa       	lddpc	r10,80006da8 <nav_file_paste_state+0x1c0>
80006cae:	4b bc       	lddpc	r12,80006d98 <nav_file_paste_state+0x1b0>
80006cb0:	f1 d5 c0 10 	bfextu	r8,r5,0x0,0x10
80006cb4:	74 19       	ld.w	r9,r10[0x4]
80006cb6:	15 8a       	ld.ub	r10,r10[0x0]
80006cb8:	78 1b       	ld.w	r11,r12[0x4]
80006cba:	19 8c       	ld.ub	r12,r12[0x0]
80006cbc:	f0 1f 00 3d 	mcall	80006db0 <nav_file_paste_state+0x1c8>
80006cc0:	4b 28       	lddpc	r8,80006d88 <nav_file_paste_state+0x1a0>
80006cc2:	b0 8c       	st.b	r8[0x0],r12
            if( ID_STREAM_ERR == g_id_trans_memtomem )
80006cc4:	3f f8       	mov	r8,-1
80006cc6:	f8 08 18 00 	cp.b	r8,r12
80006cca:	f9 b7 00 01 	moveq	r7,1
                  status_copy = COPY_FAIL;
            g_segment_src.u32_addr +=u16_nb_sector_trans;
80006cce:	f5 d5 c0 10 	bfextu	r10,r5,0x0,0x10
80006cd2:	4b 28       	lddpc	r8,80006d98 <nav_file_paste_state+0x1b0>
80006cd4:	70 19       	ld.w	r9,r8[0x4]
80006cd6:	f4 09 00 09 	add	r9,r10,r9
80006cda:	91 19       	st.w	r8[0x4],r9
            g_segment_dest.u32_addr+=u16_nb_sector_trans;
80006cdc:	4b 39       	lddpc	r9,80006da8 <nav_file_paste_state+0x1c0>
80006cde:	72 1b       	ld.w	r11,r9[0x4]
80006ce0:	16 0a       	add	r10,r11
80006ce2:	93 1a       	st.w	r9[0x4],r10
            g_segment_src.u16_size -=u16_nb_sector_trans;
80006ce4:	90 49       	ld.sh	r9,r8[0x8]
80006ce6:	0a 19       	sub	r9,r5
80006ce8:	b0 49       	st.h	r8[0x8],r9
         }
      }
   }

   // Check end of copy
   if( COPY_BUSY != status_copy )
80006cea:	58 07       	cp.w	r7,0
80006cec:	c2 90       	breq	80006d3e <nav_file_paste_state+0x156>
   {
      uint32_t u32_size_exact;

      // Stop copy
      stream_stop( g_id_trans_memtomem );
80006cee:	4a 75       	lddpc	r5,80006d88 <nav_file_paste_state+0x1a0>
80006cf0:	0b 8c       	ld.ub	r12,r5[0x0]
80006cf2:	f0 1f 00 29 	mcall	80006d94 <nav_file_paste_state+0x1ac>
      g_id_trans_memtomem = ID_STREAM_ERR;
80006cf6:	3f f8       	mov	r8,-1
80006cf8:	aa 88       	st.b	r5[0x0],r8

      // Get exact size and close the source file
      nav_select( FS_NAV_ID_COPYFILE );
80006cfa:	30 1c       	mov	r12,1
80006cfc:	f0 1f 00 28 	mcall	80006d9c <nav_file_paste_state+0x1b4>
      u32_size_exact = nav_file_lgt();
80006d00:	f0 1f 00 2d 	mcall	80006db4 <nav_file_paste_state+0x1cc>
80006d04:	18 95       	mov	r5,r12
      file_close();
80006d06:	f0 1f 00 2d 	mcall	80006db8 <nav_file_paste_state+0x1d0>
      nav_select( nav_id_save );
80006d0a:	0c 9c       	mov	r12,r6
80006d0c:	f0 1f 00 24 	mcall	80006d9c <nav_file_paste_state+0x1b4>

      // If no error then set the exact size on the destination file
      if( COPY_FINISH == status_copy )
80006d10:	30 28       	mov	r8,2
80006d12:	f0 07 18 00 	cp.b	r7,r8
80006d16:	c0 a1       	brne	80006d2a <nav_file_paste_state+0x142>
      {
         if( !file_seek( u32_size_exact , FS_SEEK_SET ))
80006d18:	30 0b       	mov	r11,0
80006d1a:	0a 9c       	mov	r12,r5
80006d1c:	f0 1f 00 24 	mcall	80006dac <nav_file_paste_state+0x1c4>
80006d20:	c2 b0       	breq	80006d76 <nav_file_paste_state+0x18e>
         {
            status_copy = COPY_FAIL;
         }else{
            if( !file_set_eof() )
80006d22:	f0 1f 00 27 	mcall	80006dbc <nav_file_paste_state+0x1d4>
80006d26:	c2 80       	breq	80006d76 <nav_file_paste_state+0x18e>
80006d28:	c2 a8       	rjmp	80006d7c <nav_file_paste_state+0x194>
            {
               status_copy = COPY_FAIL;
            }
         }
      }
      file_close();
80006d2a:	f0 1f 00 24 	mcall	80006db8 <nav_file_paste_state+0x1d0>
      // If error then delete the destination file
      if( COPY_FAIL == status_copy )
80006d2e:	30 18       	mov	r8,1
80006d30:	f0 07 18 00 	cp.b	r7,r8
80006d34:	c0 51       	brne	80006d3e <nav_file_paste_state+0x156>
      {
         nav_file_del( true );
80006d36:	30 1c       	mov	r12,1
80006d38:	f0 1f 00 22 	mcall	80006dc0 <nav_file_paste_state+0x1d8>
80006d3c:	30 17       	mov	r7,1
      }
   }
   return status_copy;
}
80006d3e:	0e 9c       	mov	r12,r7
80006d40:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
               if( !file_read( &g_segment_src ))
               {
                  status_copy = COPY_FAIL;
               }
            }
            nav_select( nav_id_save );
80006d44:	0c 93       	mov	r3,r6
80006d46:	0c 9c       	mov	r12,r6
80006d48:	f0 1f 00 15 	mcall	80006d9c <nav_file_paste_state+0x1b4>

            // Check destination file
            if( COPY_BUSY == status_copy )
            {
                g_segment_dest.u16_size = g_segment_src.u16_size; // Ask the segment no more larger than source segment
80006d4c:	49 7c       	lddpc	r12,80006da8 <nav_file_paste_state+0x1c0>
80006d4e:	49 38       	lddpc	r8,80006d98 <nav_file_paste_state+0x1b0>
80006d50:	90 48       	ld.sh	r8,r8[0x8]
80006d52:	b8 48       	st.h	r12[0x8],r8
                if( !file_write( &g_segment_dest ))
80006d54:	f0 1f 00 1c 	mcall	80006dc4 <nav_file_paste_state+0x1dc>
80006d58:	c0 31       	brne	80006d5e <nav_file_paste_state+0x176>
80006d5a:	30 17       	mov	r7,1
80006d5c:	cc 9b       	rjmp	80006cee <nav_file_paste_state+0x106>

            // Start new segment copy
            if( COPY_BUSY == status_copy )
            {
               // Compute a minimal segment
                if( g_segment_src.u16_size > g_segment_dest.u16_size )
80006d5e:	48 f8       	lddpc	r8,80006d98 <nav_file_paste_state+0x1b0>
80006d60:	90 49       	ld.sh	r9,r8[0x8]
80006d62:	49 28       	lddpc	r8,80006da8 <nav_file_paste_state+0x1c0>
80006d64:	90 48       	ld.sh	r8,r8[0x8]
80006d66:	f0 09 19 00 	cp.h	r9,r8
80006d6a:	fe 9b ff 80 	brhi	80006c6a <nav_file_paste_state+0x82>
80006d6e:	30 07       	mov	r7,0
80006d70:	c9 4b       	rjmp	80006c98 <nav_file_paste_state+0xb0>
80006d72:	30 17       	mov	r7,1
80006d74:	cb db       	rjmp	80006cee <nav_file_paste_state+0x106>
            {
               status_copy = COPY_FAIL;
            }
         }
      }
      file_close();
80006d76:	f0 1f 00 11 	mcall	80006db8 <nav_file_paste_state+0x1d0>
80006d7a:	cd eb       	rjmp	80006d36 <nav_file_paste_state+0x14e>
80006d7c:	f0 1f 00 0f 	mcall	80006db8 <nav_file_paste_state+0x1d0>
80006d80:	cd fb       	rjmp	80006d3e <nav_file_paste_state+0x156>
80006d82:	00 00       	add	r0,r0
80006d84:	80 00       	ld.sh	r0,r0[0x0]
80006d86:	5f ac       	srle	r12
80006d88:	00 00       	add	r0,r0
80006d8a:	00 10       	sub	r0,r0
80006d8c:	80 00       	ld.sh	r0,r0[0x0]
80006d8e:	74 dc       	ld.w	r12,r10[0x34]
80006d90:	80 00       	ld.sh	r0,r0[0x0]
80006d92:	8c 18       	ld.sh	r8,r6[0x2]
80006d94:	80 00       	ld.sh	r0,r0[0x0]
80006d96:	74 de       	ld.w	lr,r10[0x34]
80006d98:	00 00       	add	r0,r0
80006d9a:	09 18       	ld.sh	r8,r4++
80006d9c:	80 00       	ld.sh	r0,r0[0x0]
80006d9e:	6b a0       	ld.w	r0,r5[0x68]
80006da0:	80 00       	ld.sh	r0,r0[0x0]
80006da2:	5b 64       	cp.w	r4,-10
80006da4:	80 00       	ld.sh	r0,r0[0x0]
80006da6:	5e 18       	retne	r8
80006da8:	00 00       	add	r0,r0
80006daa:	09 0c       	ld.w	r12,r4++
80006dac:	80 00       	ld.sh	r0,r0[0x0]
80006dae:	5b 88       	cp.w	r8,-8
80006db0:	80 00       	ld.sh	r0,r0[0x0]
80006db2:	75 80       	ld.w	r0,r10[0x60]
80006db4:	80 00       	ld.sh	r0,r0[0x0]
80006db6:	60 00       	ld.w	r0,r0[0x0]
80006db8:	80 00       	ld.sh	r0,r0[0x0]
80006dba:	5c 3c       	neg	r12
80006dbc:	80 00       	ld.sh	r0,r0[0x0]
80006dbe:	5d 68       	*unknown*
80006dc0:	80 00       	ld.sh	r0,r0[0x0]
80006dc2:	65 0c       	ld.w	r12,r2[0x40]
80006dc4:	80 00       	ld.sh	r0,r0[0x0]
80006dc6:	5c 78       	castu.h	r8

80006dc8 <nav_file_paste_start>:
//! @verbatim
//! After this routine, you shall called nav_file_paste_state() to run and way the copy
//! @endverbatim
//!
bool  nav_file_paste_start( const FS_STRING sz_name  )
{
80006dc8:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t nav_id_save;
   bool status;

   if( ID_STREAM_ERR != g_id_trans_memtomem )
80006dcc:	49 88       	lddpc	r8,80006e2c <nav_file_paste_start+0x64>
80006dce:	11 89       	ld.ub	r9,r8[0x0]
80006dd0:	3f f8       	mov	r8,-1
80006dd2:	f0 09 18 00 	cp.b	r9,r8
80006dd6:	c0 60       	breq	80006de2 <nav_file_paste_start+0x1a>
   {

      fs_g_status = FS_ERR_COPY_RUNNING;  // A copy action is always running
80006dd8:	32 59       	mov	r9,37
80006dda:	49 68       	lddpc	r8,80006e30 <nav_file_paste_start+0x68>
80006ddc:	b0 89       	st.b	r8[0x0],r9
80006dde:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
   }

   // Create the file to paste
   if( !nav_file_create( sz_name  ) )
80006de2:	f0 1f 00 15 	mcall	80006e34 <nav_file_paste_start+0x6c>
80006de6:	c2 00       	breq	80006e26 <nav_file_paste_start+0x5e>
      return false;
   // Open the file in write mode with size 0
   if( !file_open( FOPEN_MODE_W_PLUS ))
80006de8:	30 fc       	mov	r12,15
80006dea:	f0 1f 00 14 	mcall	80006e38 <nav_file_paste_start+0x70>
80006dee:	c1 c0       	breq	80006e26 <nav_file_paste_start+0x5e>
      return false;

   // Open the file to copy
   nav_id_save = nav_get();
80006df0:	f0 1f 00 13 	mcall	80006e3c <nav_file_paste_start+0x74>
80006df4:	18 96       	mov	r6,r12
   nav_select( FS_NAV_ID_COPYFILE );
80006df6:	30 1c       	mov	r12,1
80006df8:	f0 1f 00 12 	mcall	80006e40 <nav_file_paste_start+0x78>
   status = file_open(FOPEN_MODE_R);
80006dfc:	30 9c       	mov	r12,9
80006dfe:	f0 1f 00 0f 	mcall	80006e38 <nav_file_paste_start+0x70>
80006e02:	18 97       	mov	r7,r12
   nav_select( nav_id_save );
80006e04:	0c 9c       	mov	r12,r6
80006e06:	f0 1f 00 0f 	mcall	80006e40 <nav_file_paste_start+0x78>

   // If error then close "paste file"
   if( !status )
80006e0a:	58 07       	cp.w	r7,0
80006e0c:	c0 51       	brne	80006e16 <nav_file_paste_start+0x4e>
   {
      file_close();
80006e0e:	f0 1f 00 0e 	mcall	80006e44 <nav_file_paste_start+0x7c>
80006e12:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
   }else{
      // Signal start copy
      g_id_trans_memtomem = ID_STREAM_ERR-1;
80006e16:	3f e9       	mov	r9,-2
80006e18:	48 58       	lddpc	r8,80006e2c <nav_file_paste_start+0x64>
80006e1a:	b0 89       	st.b	r8[0x0],r9
      g_segment_src.u16_size = 0;
80006e1c:	30 09       	mov	r9,0
80006e1e:	48 b8       	lddpc	r8,80006e48 <nav_file_paste_start+0x80>
80006e20:	b0 49       	st.h	r8[0x8],r9
80006e22:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
80006e26:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006e2a:	00 00       	add	r0,r0
80006e2c:	00 00       	add	r0,r0
80006e2e:	00 10       	sub	r0,r0
80006e30:	00 00       	add	r0,r0
80006e32:	08 a8       	st.w	r4++,r8
80006e34:	80 00       	ld.sh	r0,r0[0x0]
80006e36:	62 bc       	ld.w	r12,r1[0x2c]
80006e38:	80 00       	ld.sh	r0,r0[0x0]
80006e3a:	5f 0c       	sreq	r12
80006e3c:	80 00       	ld.sh	r0,r0[0x0]
80006e3e:	5f ac       	srle	r12
80006e40:	80 00       	ld.sh	r0,r0[0x0]
80006e42:	6b a0       	ld.w	r0,r5[0x68]
80006e44:	80 00       	ld.sh	r0,r0[0x0]
80006e46:	5c 3c       	neg	r12
80006e48:	00 00       	add	r0,r0
80006e4a:	09 18       	ld.sh	r8,r4++

80006e4c <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006e4c:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80006e50:	30 07       	mov	r7,0
80006e52:	49 18       	lddpc	r8,80006e94 <nav_reset+0x48>
80006e54:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006e56:	49 18       	lddpc	r8,80006e98 <nav_reset+0x4c>
80006e58:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006e5a:	f0 1f 00 11 	mcall	80006e9c <nav_reset+0x50>
   fat_cache_clusterlist_reset();
80006e5e:	f0 1f 00 11 	mcall	80006ea0 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006e62:	30 0c       	mov	r12,0
80006e64:	f0 1f 00 10 	mcall	80006ea4 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006e68:	49 03       	lddpc	r3,80006ea8 <nav_reset+0x5c>
80006e6a:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006e6c:	49 05       	lddpc	r5,80006eac <nav_reset+0x60>
80006e6e:	3f f4       	mov	r4,-1
80006e70:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006e72:	49 06       	lddpc	r6,80006eb0 <nav_reset+0x64>
80006e74:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006e76:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006e7a:	30 1c       	mov	r12,1
80006e7c:	f0 1f 00 0a 	mcall	80006ea4 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006e80:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006e82:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006e84:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006e86:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006e8a:	48 b8       	lddpc	r8,80006eb4 <nav_reset+0x68>
80006e8c:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80006e8e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006e92:	00 00       	add	r0,r0
80006e94:	00 00       	add	r0,r0
80006e96:	08 a9       	st.w	r4++,r9
80006e98:	00 00       	add	r0,r0
80006e9a:	06 2a       	rsub	r10,r3
80006e9c:	80 00       	ld.sh	r0,r0[0x0]
80006e9e:	39 b4       	mov	r4,-101
80006ea0:	80 00       	ld.sh	r0,r0[0x0]
80006ea2:	33 94       	mov	r4,57
80006ea4:	80 00       	ld.sh	r0,r0[0x0]
80006ea6:	6b a0       	ld.w	r0,r5[0x68]
80006ea8:	00 00       	add	r0,r0
80006eaa:	08 a4       	st.w	r4++,r4
80006eac:	00 00       	add	r0,r0
80006eae:	08 58       	eor	r8,r4
80006eb0:	00 00       	add	r0,r0
80006eb2:	06 18       	sub	r8,r3
80006eb4:	00 00       	add	r0,r0
80006eb6:	09 24       	ld.uh	r4,r4++

80006eb8 <print_char>:
  usart_write_line(usart, str);
}


void print_char(volatile avr32_usart_t *usart, int c)
{
80006eb8:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input character with the given USART.
  usart_putchar(usart, c);
80006eba:	f0 1f 00 02 	mcall	80006ec0 <print_char+0x8>
}
80006ebe:	d8 02       	popm	pc
80006ec0:	80 00       	ld.sh	r0,r0[0x0]
80006ec2:	31 6c       	mov	r12,22

80006ec4 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80006ec4:	d4 01       	pushm	lr
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80006ec6:	f0 1f 00 02 	mcall	80006ecc <print+0x8>
}
80006eca:	d8 02       	popm	pc
80006ecc:	80 00       	ld.sh	r0,r0[0x0]
80006ece:	31 bc       	mov	r12,27

80006ed0 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80006ed0:	eb cd 40 e0 	pushm	r5-r7,lr
80006ed4:	20 3d       	sub	sp,12
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80006ed6:	30 08       	mov	r8,0
80006ed8:	fb 68 00 0a 	st.b	sp[10],r8
80006edc:	30 a9       	mov	r9,10
  do
  {
    tmp[--i] = '0' + n % 10;
80006ede:	1a 95       	mov	r5,sp
80006ee0:	e0 6e cc cd 	mov	lr,52429
80006ee4:	ea 1e cc cc 	orh	lr,0xcccc
80006ee8:	20 19       	sub	r9,1
80006eea:	f6 0e 06 46 	mulu.d	r6,r11,lr
80006eee:	0e 98       	mov	r8,r7
80006ef0:	a3 98       	lsr	r8,0x3
80006ef2:	f0 08 00 2a 	add	r10,r8,r8<<0x2
80006ef6:	f6 0a 01 1b 	sub	r11,r11,r10<<0x1
80006efa:	2d 0b       	sub	r11,-48
80006efc:	ea 09 0b 0b 	st.b	r5[r9],r11
    n /= 10;
80006f00:	10 9b       	mov	r11,r8
  } while (n);
80006f02:	58 08       	cp.w	r8,0
80006f04:	cf 21       	brne	80006ee8 <print_ulong+0x18>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80006f06:	1a 9b       	mov	r11,sp
80006f08:	12 0b       	add	r11,r9
80006f0a:	f0 1f 00 03 	mcall	80006f14 <print_ulong+0x44>
}
80006f0e:	2f dd       	sub	sp,-12
80006f10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	6e c4       	ld.w	r4,r7[0x30]

80006f18 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80006f18:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80006f1a:	18 9b       	mov	r11,r12
80006f1c:	fe 7c 18 00 	mov	r12,-59392
80006f20:	f0 1f 00 02 	mcall	80006f28 <print_dbg_ulong+0x10>
}
80006f24:	d8 02       	popm	pc
80006f26:	00 00       	add	r0,r0
80006f28:	80 00       	ld.sh	r0,r0[0x0]
80006f2a:	6e d0       	ld.w	r0,r7[0x34]

80006f2c <print_dbg>:
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
}


void print_dbg(const char *str)
{
80006f2c:	d4 01       	pushm	lr
  // Redirection to the debug USART.
  print(DBG_USART, str);
80006f2e:	18 9b       	mov	r11,r12
80006f30:	fe 7c 18 00 	mov	r12,-59392
80006f34:	f0 1f 00 02 	mcall	80006f3c <print_dbg+0x10>
}
80006f38:	d8 02       	popm	pc
80006f3a:	00 00       	add	r0,r0
80006f3c:	80 00       	ld.sh	r0,r0[0x0]
80006f3e:	6e c4       	ld.w	r4,r7[0x30]

80006f40 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80006f40:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80006f44:	fe c0 e7 44 	sub	r0,pc,-6332

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80006f48:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80006f4c:	d5 53       	csrf	0x15
  cp      r0, r1
80006f4e:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80006f50:	31 81       	mov	r1,24
  lda.w   r2, _data_lma
80006f52:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80006f54:	c0 72       	brcc	80006f62 <idata_load_loop_end>
  st.d    r0++, r4
80006f56:	fe c2 da fe 	sub	r2,pc,-9474

80006f5a <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80006f5a:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80006f5c:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80006f5e:	02 30       	cp.w	r0,r1
  cp      r0, r1
80006f60:	cf d3       	brcs	80006f5a <idata_load_loop>

80006f62 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80006f62:	31 80       	mov	r0,24
  mov     r2, 0
80006f64:	e0 61 09 28 	mov	r1,2344
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80006f68:	02 30       	cp.w	r0,r1
  cp      r0, r1
80006f6a:	c0 62       	brcc	80006f76 <udata_clear_loop_end>
  brlo    udata_clear_loop
80006f6c:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80006f6e:	30 03       	mov	r3,0

80006f70 <udata_clear_loop>:
80006f70:	a1 22       	st.d	r0++,r2
80006f72:	02 30       	cp.w	r0,r1
80006f74:	cf e3       	brcs	80006f70 <udata_clear_loop>

80006f76 <udata_clear_loop_end>:
80006f76:	fe cf f9 aa 	sub	pc,pc,-1622
80006f7a:	d7 03       	nop

80006f7c <at45dbx_chipselect_df>:
 *
 * \param memidx  Memory ID of DF to select or unselect.
 * \param bSelect Boolean indicating whether the DF memory has to be selected.
 */
static void at45dbx_chipselect_df(U8 memidx, bool bSelect)
{
80006f7c:	d4 01       	pushm	lr
  if (bSelect)
80006f7e:	58 0b       	cp.w	r11,0
80006f80:	c0 70       	breq	80006f8e <at45dbx_chipselect_df+0x12>
  {
    // Select SPI chip.
    spi_selectChip(AT45DBX_SPI, AT45DBX_SPI_FIRST_NPCS + memidx);
80006f82:	18 9b       	mov	r11,r12
80006f84:	fe 7c 28 00 	mov	r12,-55296
80006f88:	f0 1f 00 05 	mcall	80006f9c <at45dbx_chipselect_df+0x20>
80006f8c:	d8 02       	popm	pc
  }
  else
  {
    // Unselect SPI chip.
    spi_unselectChip(AT45DBX_SPI, AT45DBX_SPI_FIRST_NPCS + memidx);
80006f8e:	18 9b       	mov	r11,r12
80006f90:	fe 7c 28 00 	mov	r12,-55296
80006f94:	f0 1f 00 03 	mcall	80006fa0 <at45dbx_chipselect_df+0x24>
80006f98:	d8 02       	popm	pc
80006f9a:	00 00       	add	r0,r0
80006f9c:	80 00       	ld.sh	r0,r0[0x0]
80006f9e:	2f 90       	sub	r0,-7
80006fa0:	80 00       	ld.sh	r0,r0[0x0]
80006fa2:	2f dc       	sub	r12,-3

80006fa4 <at45dbx_write_close>:
  return true;
}


void at45dbx_write_close(void)
{
80006fa4:	eb cd 40 e0 	pushm	r5-r7,lr
  // While end of logical sector not reached, zero-fill remaining memory bytes.
  while (Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_SECTOR))
80006fa8:	48 f8       	lddpc	r8,80006fe4 <at45dbx_write_close+0x40>
80006faa:	70 0c       	ld.w	r12,r8[0x0]
80006fac:	f1 dc c0 09 	bfextu	r8,r12,0x0,0x9
80006fb0:	c0 f0       	breq	80006fce <at45dbx_write_close+0x2a>
  {
    spi_write(AT45DBX_SPI, 0x00);
80006fb2:	30 06       	mov	r6,0
80006fb4:	fe 75 28 00 	mov	r5,-55296
    gl_ptr_mem++;
80006fb8:	48 b7       	lddpc	r7,80006fe4 <at45dbx_write_close+0x40>
void at45dbx_write_close(void)
{
  // While end of logical sector not reached, zero-fill remaining memory bytes.
  while (Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_SECTOR))
  {
    spi_write(AT45DBX_SPI, 0x00);
80006fba:	0c 9b       	mov	r11,r6
80006fbc:	0a 9c       	mov	r12,r5
80006fbe:	f0 1f 00 0b 	mcall	80006fe8 <at45dbx_write_close+0x44>
    gl_ptr_mem++;
80006fc2:	6e 0c       	ld.w	r12,r7[0x0]
80006fc4:	2f fc       	sub	r12,-1
80006fc6:	8f 0c       	st.w	r7[0x0],r12


void at45dbx_write_close(void)
{
  // While end of logical sector not reached, zero-fill remaining memory bytes.
  while (Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_SECTOR))
80006fc8:	f1 dc c0 09 	bfextu	r8,r12,0x0,0x9
80006fcc:	cf 71       	brne	80006fba <at45dbx_write_close+0x16>
    spi_write(AT45DBX_SPI, 0x00);
    gl_ptr_mem++;
  }

  // Unselect the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
80006fce:	30 0b       	mov	r11,0
80006fd0:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80006fd4:	f0 1f 00 06 	mcall	80006fec <at45dbx_write_close+0x48>

  // Memory busy.
  at45dbx_busy = true;
80006fd8:	30 19       	mov	r9,1
80006fda:	48 68       	lddpc	r8,80006ff0 <at45dbx_write_close+0x4c>
80006fdc:	b0 89       	st.b	r8[0x0],r9
}
80006fde:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006fe2:	00 00       	add	r0,r0
80006fe4:	00 00       	add	r0,r0
80006fe6:	01 20       	ld.uh	r0,r0++
80006fe8:	80 00       	ld.sh	r0,r0[0x0]
80006fea:	30 c2       	mov	r2,12
80006fec:	80 00       	ld.sh	r0,r0[0x0]
80006fee:	6f 7c       	ld.w	r12,r7[0x5c]
80006ff0:	00 00       	add	r0,r0
80006ff2:	01 24       	ld.uh	r4,r0++

80006ff4 <at45dbx_read_close>:
  return true;
}


void at45dbx_read_close(void)
{
80006ff4:	d4 01       	pushm	lr
  // Unselect the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
80006ff6:	48 68       	lddpc	r8,8000700c <at45dbx_read_close+0x18>
80006ff8:	70 0c       	ld.w	r12,r8[0x0]
80006ffa:	30 0b       	mov	r11,0
80006ffc:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80007000:	f0 1f 00 04 	mcall	80007010 <at45dbx_read_close+0x1c>

  // Memory ready.
  at45dbx_busy = false;
80007004:	30 09       	mov	r9,0
80007006:	48 48       	lddpc	r8,80007014 <at45dbx_read_close+0x20>
80007008:	b0 89       	st.b	r8[0x0],r9
}
8000700a:	d8 02       	popm	pc
8000700c:	00 00       	add	r0,r0
8000700e:	01 20       	ld.uh	r0,r0++
80007010:	80 00       	ld.sh	r0,r0[0x0]
80007012:	6f 7c       	ld.w	r12,r7[0x5c]
80007014:	00 00       	add	r0,r0
80007016:	01 24       	ld.uh	r4,r0++

80007018 <at45dbx_wait_ready>:


/*! \brief Waits until the DF is ready.
 */
static void at45dbx_wait_ready(void)
{
80007018:	eb cd 40 e0 	pushm	r5-r7,lr
8000701c:	20 1d       	sub	sp,4
  U16 status;

  // Select the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, true);
8000701e:	49 58       	lddpc	r8,80007070 <at45dbx_wait_ready+0x58>
80007020:	70 0c       	ld.w	r12,r8[0x0]
80007022:	30 1b       	mov	r11,1
80007024:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80007028:	f0 1f 00 13 	mcall	80007074 <at45dbx_wait_ready+0x5c>

  // Send the Status Register Read command.
  spi_write(AT45DBX_SPI, AT45DBX_CMDC_RD_STATUS_REG);
8000702c:	e0 6b 00 d7 	mov	r11,215
80007030:	fe 7c 28 00 	mov	r12,-55296
80007034:	f0 1f 00 11 	mcall	80007078 <at45dbx_wait_ready+0x60>

  // Read the status register until the DF is ready.
  do
  {
    // Send a dummy byte to read the status register.
    spi_write_dummy();
80007038:	e0 66 00 ff 	mov	r6,255
8000703c:	fe 77 28 00 	mov	r7,-55296
    spi_read(AT45DBX_SPI, &status);
80007040:	fa c5 ff fe 	sub	r5,sp,-2

  // Read the status register until the DF is ready.
  do
  {
    // Send a dummy byte to read the status register.
    spi_write_dummy();
80007044:	0c 9b       	mov	r11,r6
80007046:	0e 9c       	mov	r12,r7
80007048:	f0 1f 00 0c 	mcall	80007078 <at45dbx_wait_ready+0x60>
    spi_read(AT45DBX_SPI, &status);
8000704c:	0a 9b       	mov	r11,r5
8000704e:	0e 9c       	mov	r12,r7
80007050:	f0 1f 00 0b 	mcall	8000707c <at45dbx_wait_ready+0x64>
  } while ((status & AT45DBX_MSK_BUSY) == AT45DBX_BUSY);
80007054:	9a 98       	ld.uh	r8,sp[0x2]
80007056:	e2 18 00 80 	andl	r8,0x80,COH
8000705a:	cf 50       	breq	80007044 <at45dbx_wait_ready+0x2c>

  // Unselect the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
8000705c:	48 58       	lddpc	r8,80007070 <at45dbx_wait_ready+0x58>
8000705e:	70 0c       	ld.w	r12,r8[0x0]
80007060:	30 0b       	mov	r11,0
80007062:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80007066:	f0 1f 00 04 	mcall	80007074 <at45dbx_wait_ready+0x5c>
}
8000706a:	2f fd       	sub	sp,-4
8000706c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007070:	00 00       	add	r0,r0
80007072:	01 20       	ld.uh	r0,r0++
80007074:	80 00       	ld.sh	r0,r0[0x0]
80007076:	6f 7c       	ld.w	r12,r7[0x5c]
80007078:	80 00       	ld.sh	r0,r0[0x0]
8000707a:	30 c2       	mov	r2,12
8000707c:	80 00       	ld.sh	r0,r0[0x0]
8000707e:	30 de       	mov	lr,13

80007080 <at45dbx_write_open>:
  at45dbx_busy = false;
}


bool at45dbx_write_open(U32 sector)
{
80007080:	eb cd 40 e0 	pushm	r5-r7,lr
80007084:	20 1d       	sub	sp,4
  U32 addr;

  // Set the global memory pointer to a byte address.
  gl_ptr_mem = sector << AT45DBX_SECTOR_BITS; // gl_ptr_mem = sector * AT45DBX_SECTOR_SIZE.
80007086:	a9 7c       	lsl	r12,0x9
80007088:	4b 08       	lddpc	r8,80007148 <at45dbx_write_open+0xc8>
8000708a:	91 0c       	st.w	r8[0x0],r12

  // If the DF memory is busy, wait until it's ready.
  if (at45dbx_busy) at45dbx_wait_ready();
8000708c:	4b 08       	lddpc	r8,8000714c <at45dbx_write_open+0xcc>
8000708e:	11 89       	ld.ub	r9,r8[0x0]
80007090:	30 08       	mov	r8,0
80007092:	f0 09 18 00 	cp.b	r9,r8
80007096:	c0 30       	breq	8000709c <at45dbx_write_open+0x1c>
80007098:	f0 1f 00 2e 	mcall	80007150 <at45dbx_write_open+0xd0>
  at45dbx_busy = false;
8000709c:	30 09       	mov	r9,0
8000709e:	4a c8       	lddpc	r8,8000714c <at45dbx_write_open+0xcc>
800070a0:	b0 89       	st.b	r8[0x0],r9

#if AT45DBX_PAGE_SIZE > AT45DBX_SECTOR_SIZE
  // Select the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, true);
800070a2:	4a a6       	lddpc	r6,80007148 <at45dbx_write_open+0xc8>
800070a4:	6c 0c       	ld.w	r12,r6[0x0]
800070a6:	30 1b       	mov	r11,1
800070a8:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
800070ac:	f0 1f 00 2a 	mcall	80007154 <at45dbx_write_open+0xd4>

  // Transfer the content of the current page to buffer 1.

  // Send the Main Memory Page to Buffer 1 Transfer command.
  spi_write(AT45DBX_SPI, AT45DBX_CMDB_XFR_PAGE_TO_BUF1);
800070b0:	35 3b       	mov	r11,83
800070b2:	fe 7c 28 00 	mov	r12,-55296
800070b6:	f0 1f 00 29 	mcall	80007158 <at45dbx_write_open+0xd8>
  //  - (24 - (AT45DBX_PAGE_ADDR_BITS + AT45DBX_BYTE_ADDR_BITS)) reserved bits;
  //  - then AT45DBX_PAGE_ADDR_BITS bits specifying the page in main memory to be read;
  //  - then AT45DBX_BYTE_ADDR_BITS don't care bits.
  // NOTE: The bits of gl_ptr_mem above the AT45DBX_MEM_SIZE bits are useless for the local
  // DF addressing. They are used for DF discrimination when there are several DFs.
  addr = Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_PAGE) << AT45DBX_BYTE_ADDR_BITS;
800070ba:	6c 0b       	ld.w	r11,r6[0x0]
800070bc:	f7 db c1 4d 	bfextu	r11,r11,0xa,0xd
800070c0:	ab 7b       	lsl	r11,0xb
800070c2:	50 0b       	stdsp	sp[0x0],r11
  spi_write(AT45DBX_SPI, LSB2W(addr));
800070c4:	b1 8b       	lsr	r11,0x10
800070c6:	fe 7c 28 00 	mov	r12,-55296
800070ca:	f0 1f 00 24 	mcall	80007158 <at45dbx_write_open+0xd8>
  spi_write(AT45DBX_SPI, LSB1W(addr));
800070ce:	fa c5 ff fe 	sub	r5,sp,-2
800070d2:	0b 8b       	ld.ub	r11,r5[0x0]
800070d4:	fe 7c 28 00 	mov	r12,-55296
800070d8:	f0 1f 00 20 	mcall	80007158 <at45dbx_write_open+0xd8>
  spi_write(AT45DBX_SPI, LSB0W(addr));
800070dc:	fa c7 ff fc 	sub	r7,sp,-4
800070e0:	0f 7b       	ld.ub	r11,--r7
800070e2:	fe 7c 28 00 	mov	r12,-55296
800070e6:	f0 1f 00 1d 	mcall	80007158 <at45dbx_write_open+0xd8>

  // Unselect the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
800070ea:	6c 0c       	ld.w	r12,r6[0x0]
800070ec:	30 0b       	mov	r11,0
800070ee:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
800070f2:	f0 1f 00 19 	mcall	80007154 <at45dbx_write_open+0xd4>

  // Wait for end of page transfer.
  at45dbx_wait_ready();
800070f6:	f0 1f 00 17 	mcall	80007150 <at45dbx_write_open+0xd0>
#endif

  // Select the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, true);
800070fa:	6c 0c       	ld.w	r12,r6[0x0]
800070fc:	30 1b       	mov	r11,1
800070fe:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
80007102:	f0 1f 00 15 	mcall	80007154 <at45dbx_write_open+0xd4>

  // Initiate a page write at a given sector.

  // Send the Main Memory Page Program through Buffer 1 command.
  spi_write(AT45DBX_SPI, AT45DBX_CMDB_PR_PAGE_TH_BUF1);
80007106:	e0 6b 00 82 	mov	r11,130
8000710a:	fe 7c 28 00 	mov	r12,-55296
8000710e:	f0 1f 00 13 	mcall	80007158 <at45dbx_write_open+0xd8>
  //  - (24 - (AT45DBX_PAGE_ADDR_BITS + AT45DBX_BYTE_ADDR_BITS)) reserved bits;
  //  - then AT45DBX_PAGE_ADDR_BITS bits specifying the page in main memory to be written;
  //  - then AT45DBX_BYTE_ADDR_BITS bits specifying the starting byte address within that page.
  // NOTE: The bits of gl_ptr_mem above the AT45DBX_MEM_SIZE bits are useless for the local
  // DF addressing. They are used for DF discrimination when there are several DFs.
  addr = (Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_PAGE) << AT45DBX_BYTE_ADDR_BITS) |
80007112:	6c 08       	ld.w	r8,r6[0x0]
80007114:	f7 d8 c1 4d 	bfextu	r11,r8,0xa,0xd
80007118:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
8000711c:	f1 eb 10 bb 	or	r11,r8,r11<<0xb
80007120:	50 0b       	stdsp	sp[0x0],r11
         Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_BYTE);
  spi_write(AT45DBX_SPI, LSB2W(addr));
80007122:	b1 8b       	lsr	r11,0x10
80007124:	fe 7c 28 00 	mov	r12,-55296
80007128:	f0 1f 00 0c 	mcall	80007158 <at45dbx_write_open+0xd8>
  spi_write(AT45DBX_SPI, LSB1W(addr));
8000712c:	0b 8b       	ld.ub	r11,r5[0x0]
8000712e:	fe 7c 28 00 	mov	r12,-55296
80007132:	f0 1f 00 0a 	mcall	80007158 <at45dbx_write_open+0xd8>
  spi_write(AT45DBX_SPI, LSB0W(addr));
80007136:	0f 8b       	ld.ub	r11,r7[0x0]
80007138:	fe 7c 28 00 	mov	r12,-55296
8000713c:	f0 1f 00 07 	mcall	80007158 <at45dbx_write_open+0xd8>

  return true;
}
80007140:	2f fd       	sub	sp,-4
80007142:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80007146:	00 00       	add	r0,r0
80007148:	00 00       	add	r0,r0
8000714a:	01 20       	ld.uh	r0,r0++
8000714c:	00 00       	add	r0,r0
8000714e:	01 24       	ld.uh	r4,r0++
80007150:	80 00       	ld.sh	r0,r0[0x0]
80007152:	70 18       	ld.w	r8,r8[0x4]
80007154:	80 00       	ld.sh	r0,r0[0x0]
80007156:	6f 7c       	ld.w	r12,r7[0x5c]
80007158:	80 00       	ld.sh	r0,r0[0x0]
8000715a:	30 c2       	mov	r2,12

8000715c <at45dbx_write_sector_from_ram>:
  return true;
}


bool at45dbx_write_sector_from_ram(const void *ram)
{
8000715c:	eb cd 40 e0 	pushm	r5-r7,lr
80007160:	18 97       	mov	r7,r12
  const U8 *_ram = ram;
  U16 i;

  // Memory busy.
  if (at45dbx_busy)
80007162:	49 48       	lddpc	r8,800071b0 <at45dbx_write_sector_from_ram+0x54>
80007164:	11 89       	ld.ub	r9,r8[0x0]
80007166:	30 08       	mov	r8,0
80007168:	f0 09 18 00 	cp.b	r9,r8
8000716c:	c0 60       	breq	80007178 <at45dbx_write_sector_from_ram+0x1c>
    // Being here, we know that we previously launched a page programming.
    // => We have to access the next page.

    // Eventually select the next DF and open the next page.
    // NOTE: at45dbx_write_open input parameter is a sector.
    at45dbx_write_open(gl_ptr_mem >> AT45DBX_SECTOR_BITS); // gl_ptr_mem / AT45DBX_SECTOR_SIZE.
8000716e:	49 28       	lddpc	r8,800071b4 <at45dbx_write_sector_from_ram+0x58>
80007170:	70 0c       	ld.w	r12,r8[0x0]
80007172:	a9 9c       	lsr	r12,0x9
80007174:	f0 1f 00 11 	mcall	800071b8 <at45dbx_write_sector_from_ram+0x5c>

  return true;
}


bool at45dbx_write_sector_from_ram(const void *ram)
80007178:	ee c6 fe 00 	sub	r6,r7,-512

  // Write the next sector.
  for (i = AT45DBX_SECTOR_SIZE; i; i--)
  {
    // Write the next data byte.
    spi_write(AT45DBX_SPI, *_ram++);
8000717c:	fe 75 28 00 	mov	r5,-55296
80007180:	0f 3b       	ld.ub	r11,r7++
80007182:	0a 9c       	mov	r12,r5
80007184:	f0 1f 00 0e 	mcall	800071bc <at45dbx_write_sector_from_ram+0x60>
    // NOTE: at45dbx_write_open input parameter is a sector.
    at45dbx_write_open(gl_ptr_mem >> AT45DBX_SECTOR_BITS); // gl_ptr_mem / AT45DBX_SECTOR_SIZE.
  }

  // Write the next sector.
  for (i = AT45DBX_SECTOR_SIZE; i; i--)
80007188:	0c 37       	cp.w	r7,r6
8000718a:	cf b1       	brne	80007180 <at45dbx_write_sector_from_ram+0x24>
    // Write the next data byte.
    spi_write(AT45DBX_SPI, *_ram++);
  }

  // Update the memory pointer.
  gl_ptr_mem += AT45DBX_SECTOR_SIZE;
8000718c:	48 a8       	lddpc	r8,800071b4 <at45dbx_write_sector_from_ram+0x58>
8000718e:	70 0c       	ld.w	r12,r8[0x0]
80007190:	f8 cc fe 00 	sub	r12,r12,-512
80007194:	91 0c       	st.w	r8[0x0],r12

#if AT45DBX_PAGE_SIZE > AT45DBX_SECTOR_SIZE
  // If end of page reached,
  if (!Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_BYTE))
80007196:	f1 dc c0 0a 	bfextu	r8,r12,0x0,0xa
8000719a:	c0 91       	brne	800071ac <at45dbx_write_sector_from_ram+0x50>
#endif
  {
    // unselect the DF memory gl_ptr_mem points to in order to program the page.
    at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
8000719c:	30 0b       	mov	r11,0
8000719e:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
800071a2:	f0 1f 00 08 	mcall	800071c0 <at45dbx_write_sector_from_ram+0x64>

    // Memory busy.
    at45dbx_busy = true;
800071a6:	30 19       	mov	r9,1
800071a8:	48 28       	lddpc	r8,800071b0 <at45dbx_write_sector_from_ram+0x54>
800071aa:	b0 89       	st.b	r8[0x0],r9
  }

  return true;
}
800071ac:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800071b0:	00 00       	add	r0,r0
800071b2:	01 24       	ld.uh	r4,r0++
800071b4:	00 00       	add	r0,r0
800071b6:	01 20       	ld.uh	r0,r0++
800071b8:	80 00       	ld.sh	r0,r0[0x0]
800071ba:	70 80       	ld.w	r0,r8[0x20]
800071bc:	80 00       	ld.sh	r0,r0[0x0]
800071be:	30 c2       	mov	r2,12
800071c0:	80 00       	ld.sh	r0,r0[0x0]
800071c2:	6f 7c       	ld.w	r12,r7[0x5c]

800071c4 <at45dbx_read_open>:
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
}


bool at45dbx_read_open(U32 sector)
{
800071c4:	eb cd 40 80 	pushm	r7,lr
800071c8:	20 1d       	sub	sp,4
  U32 addr;

  // Set the global memory pointer to a byte address.
  gl_ptr_mem = sector << AT45DBX_SECTOR_BITS; // gl_ptr_mem = sector * AT45DBX_SECTOR_SIZE.
800071ca:	a9 7c       	lsl	r12,0x9
800071cc:	4a 78       	lddpc	r8,80007268 <at45dbx_read_open+0xa4>
800071ce:	91 0c       	st.w	r8[0x0],r12

  // If the DF memory is busy, wait until it's ready.
  if (at45dbx_busy) at45dbx_wait_ready();
800071d0:	4a 78       	lddpc	r8,8000726c <at45dbx_read_open+0xa8>
800071d2:	11 89       	ld.ub	r9,r8[0x0]
800071d4:	30 08       	mov	r8,0
800071d6:	f0 09 18 00 	cp.b	r9,r8
800071da:	c0 30       	breq	800071e0 <at45dbx_read_open+0x1c>
800071dc:	f0 1f 00 25 	mcall	80007270 <at45dbx_read_open+0xac>
  at45dbx_busy = false;
800071e0:	30 09       	mov	r9,0
800071e2:	4a 38       	lddpc	r8,8000726c <at45dbx_read_open+0xa8>
800071e4:	b0 89       	st.b	r8[0x0],r9

  // Select the DF memory gl_ptr_mem points to.
  at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, true);
800071e6:	4a 17       	lddpc	r7,80007268 <at45dbx_read_open+0xa4>
800071e8:	6e 0c       	ld.w	r12,r7[0x0]
800071ea:	30 1b       	mov	r11,1
800071ec:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
800071f0:	f0 1f 00 21 	mcall	80007274 <at45dbx_read_open+0xb0>

  // Initiate a page read at a given sector.

  // Send the Main Memory Page Read command.
  spi_write(AT45DBX_SPI, AT45DBX_CMDA_RD_PAGE);
800071f4:	e0 6b 00 d2 	mov	r11,210
800071f8:	fe 7c 28 00 	mov	r12,-55296
800071fc:	f0 1f 00 1f 	mcall	80007278 <at45dbx_read_open+0xb4>
  //  - (24 - (AT45DBX_PAGE_ADDR_BITS + AT45DBX_BYTE_ADDR_BITS)) reserved bits;
  //  - then AT45DBX_PAGE_ADDR_BITS bits specifying the page in main memory to be read;
  //  - then AT45DBX_BYTE_ADDR_BITS bits specifying the starting byte address within that page.
  // NOTE: The bits of gl_ptr_mem above the AT45DBX_MEM_SIZE bits are useless for the local
  // DF addressing. They are used for DF discrimination when there are several DFs.
  addr = (Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_PAGE) << AT45DBX_BYTE_ADDR_BITS) |
80007200:	6e 08       	ld.w	r8,r7[0x0]
80007202:	f7 d8 c1 4d 	bfextu	r11,r8,0xa,0xd
80007206:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
8000720a:	f1 eb 10 bb 	or	r11,r8,r11<<0xb
8000720e:	fa c7 ff fc 	sub	r7,sp,-4
80007212:	0e db       	st.w	--r7,r11
         Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_BYTE);
  spi_write(AT45DBX_SPI, LSB2W(addr));
80007214:	b1 8b       	lsr	r11,0x10
80007216:	fe 7c 28 00 	mov	r12,-55296
8000721a:	f0 1f 00 18 	mcall	80007278 <at45dbx_read_open+0xb4>
  spi_write(AT45DBX_SPI, LSB1W(addr));
8000721e:	0f ab       	ld.ub	r11,r7[0x2]
80007220:	fe 7c 28 00 	mov	r12,-55296
80007224:	f0 1f 00 15 	mcall	80007278 <at45dbx_read_open+0xb4>
  spi_write(AT45DBX_SPI, LSB0W(addr));
80007228:	0f bb       	ld.ub	r11,r7[0x3]
8000722a:	fe 7c 28 00 	mov	r12,-55296
8000722e:	f0 1f 00 13 	mcall	80007278 <at45dbx_read_open+0xb4>

  // Send 32 don't care clock cycles to initialize the read operation.
  spi_write_dummy();
80007232:	e0 6b 00 ff 	mov	r11,255
80007236:	fe 7c 28 00 	mov	r12,-55296
8000723a:	f0 1f 00 10 	mcall	80007278 <at45dbx_read_open+0xb4>
  spi_write_dummy();
8000723e:	e0 6b 00 ff 	mov	r11,255
80007242:	fe 7c 28 00 	mov	r12,-55296
80007246:	f0 1f 00 0d 	mcall	80007278 <at45dbx_read_open+0xb4>
  spi_write_dummy();
8000724a:	e0 6b 00 ff 	mov	r11,255
8000724e:	fe 7c 28 00 	mov	r12,-55296
80007252:	f0 1f 00 0a 	mcall	80007278 <at45dbx_read_open+0xb4>
  spi_write_dummy();
80007256:	e0 6b 00 ff 	mov	r11,255
8000725a:	fe 7c 28 00 	mov	r12,-55296
8000725e:	f0 1f 00 07 	mcall	80007278 <at45dbx_read_open+0xb4>

  return true;
}
80007262:	2f fd       	sub	sp,-4
80007264:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80007268:	00 00       	add	r0,r0
8000726a:	01 20       	ld.uh	r0,r0++
8000726c:	00 00       	add	r0,r0
8000726e:	01 24       	ld.uh	r4,r0++
80007270:	80 00       	ld.sh	r0,r0[0x0]
80007272:	70 18       	ld.w	r8,r8[0x4]
80007274:	80 00       	ld.sh	r0,r0[0x0]
80007276:	6f 7c       	ld.w	r12,r7[0x5c]
80007278:	80 00       	ld.sh	r0,r0[0x0]
8000727a:	30 c2       	mov	r2,12

8000727c <at45dbx_read_sector_2_ram>:
 */
//! @{


bool at45dbx_read_sector_2_ram(void *ram)
{
8000727c:	eb cd 40 f8 	pushm	r3-r7,lr
80007280:	20 1d       	sub	sp,4
80007282:	18 97       	mov	r7,r12
  U8 *_ram = ram;
  U16 i;
  U16 data;

  // Memory busy.
  if (at45dbx_busy)
80007284:	49 b8       	lddpc	r8,800072f0 <at45dbx_read_sector_2_ram+0x74>
80007286:	11 89       	ld.ub	r9,r8[0x0]
80007288:	30 08       	mov	r8,0
8000728a:	f0 09 18 00 	cp.b	r9,r8
8000728e:	c0 90       	breq	800072a0 <at45dbx_read_sector_2_ram+0x24>
  {
    // Being here, we know that we previously finished a page read.
    // => We have to access the next page.

    // Memory ready.
    at45dbx_busy = false;
80007290:	10 99       	mov	r9,r8
80007292:	49 88       	lddpc	r8,800072f0 <at45dbx_read_sector_2_ram+0x74>
80007294:	b0 89       	st.b	r8[0x0],r9

    // Eventually select the next DF and open the next page.
    // NOTE: at45dbx_read_open input parameter is a sector.
    at45dbx_read_open(gl_ptr_mem >> AT45DBX_SECTOR_BITS); // gl_ptr_mem / AT45DBX_SECTOR_SIZE.
80007296:	49 88       	lddpc	r8,800072f4 <at45dbx_read_sector_2_ram+0x78>
80007298:	70 0c       	ld.w	r12,r8[0x0]
8000729a:	a9 9c       	lsr	r12,0x9
8000729c:	f0 1f 00 17 	mcall	800072f8 <at45dbx_read_sector_2_ram+0x7c>
/*! \name Single-Sector Access Functions
 */
//! @{


bool at45dbx_read_sector_2_ram(void *ram)
800072a0:	ee c5 fe 00 	sub	r5,r7,-512

  // Read the next sector.
  for (i = AT45DBX_SECTOR_SIZE; i; i--)
  {
    // Send a dummy byte to read the next data byte.
    spi_write_dummy();
800072a4:	e0 64 00 ff 	mov	r4,255
800072a8:	fe 76 28 00 	mov	r6,-55296
    spi_read(AT45DBX_SPI, &data);
800072ac:	fa c3 ff fe 	sub	r3,sp,-2

  // Read the next sector.
  for (i = AT45DBX_SECTOR_SIZE; i; i--)
  {
    // Send a dummy byte to read the next data byte.
    spi_write_dummy();
800072b0:	08 9b       	mov	r11,r4
800072b2:	0c 9c       	mov	r12,r6
800072b4:	f0 1f 00 12 	mcall	800072fc <at45dbx_read_sector_2_ram+0x80>
    spi_read(AT45DBX_SPI, &data);
800072b8:	06 9b       	mov	r11,r3
800072ba:	0c 9c       	mov	r12,r6
800072bc:	f0 1f 00 11 	mcall	80007300 <at45dbx_read_sector_2_ram+0x84>
    *_ram++ = data;
800072c0:	9a 18       	ld.sh	r8,sp[0x2]
800072c2:	0e c8       	st.b	r7++,r8
    // NOTE: at45dbx_read_open input parameter is a sector.
    at45dbx_read_open(gl_ptr_mem >> AT45DBX_SECTOR_BITS); // gl_ptr_mem / AT45DBX_SECTOR_SIZE.
  }

  // Read the next sector.
  for (i = AT45DBX_SECTOR_SIZE; i; i--)
800072c4:	0a 37       	cp.w	r7,r5
800072c6:	cf 51       	brne	800072b0 <at45dbx_read_sector_2_ram+0x34>
    spi_read(AT45DBX_SPI, &data);
    *_ram++ = data;
  }

  // Update the memory pointer.
  gl_ptr_mem += AT45DBX_SECTOR_SIZE;
800072c8:	48 b8       	lddpc	r8,800072f4 <at45dbx_read_sector_2_ram+0x78>
800072ca:	70 0c       	ld.w	r12,r8[0x0]
800072cc:	f8 cc fe 00 	sub	r12,r12,-512
800072d0:	91 0c       	st.w	r8[0x0],r12

#if AT45DBX_PAGE_SIZE > AT45DBX_SECTOR_SIZE
  // If end of page reached,
  if (!Rd_bitfield(gl_ptr_mem, AT45DBX_MSK_PTR_BYTE))
800072d2:	f1 dc c0 0a 	bfextu	r8,r12,0x0,0xa
800072d6:	c0 91       	brne	800072e8 <at45dbx_read_sector_2_ram+0x6c>
#endif
  {
    // unselect the DF memory gl_ptr_mem points to.
    at45dbx_chipselect_df(gl_ptr_mem >> AT45DBX_MEM_SIZE, false);
800072d8:	30 0b       	mov	r11,0
800072da:	f9 dc c2 e8 	bfextu	r12,r12,0x17,0x8
800072de:	f0 1f 00 0a 	mcall	80007304 <at45dbx_read_sector_2_ram+0x88>

    // Memory busy.
    at45dbx_busy = true;
800072e2:	30 19       	mov	r9,1
800072e4:	48 38       	lddpc	r8,800072f0 <at45dbx_read_sector_2_ram+0x74>
800072e6:	b0 89       	st.b	r8[0x0],r9
  }

  return true;
}
800072e8:	2f fd       	sub	sp,-4
800072ea:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
800072ee:	00 00       	add	r0,r0
800072f0:	00 00       	add	r0,r0
800072f2:	01 24       	ld.uh	r4,r0++
800072f4:	00 00       	add	r0,r0
800072f6:	01 20       	ld.uh	r0,r0++
800072f8:	80 00       	ld.sh	r0,r0[0x0]
800072fa:	71 c4       	ld.w	r4,r8[0x70]
800072fc:	80 00       	ld.sh	r0,r0[0x0]
800072fe:	30 c2       	mov	r2,12
80007300:	80 00       	ld.sh	r0,r0[0x0]
80007302:	30 de       	mov	lr,13
80007304:	80 00       	ld.sh	r0,r0[0x0]
80007306:	6f 7c       	ld.w	r12,r7[0x5c]

80007308 <at45dbx_mem_check>:
  }
}


bool at45dbx_mem_check(void)
{
80007308:	eb cd 40 80 	pushm	r7,lr
8000730c:	20 1d       	sub	sp,4
  U8 df;
  U16 status = 0;
8000730e:	fa c7 ff fc 	sub	r7,sp,-4
80007312:	30 08       	mov	r8,0
80007314:	0e e8       	st.h	--r7,r8

  // DF memory check.
  for (df = 0; df < AT45DBX_MEM_CNT; df++)
  {
    // Select the DF memory to check.
    at45dbx_chipselect_df(df, true);
80007316:	30 1b       	mov	r11,1
80007318:	30 0c       	mov	r12,0
8000731a:	f0 1f 00 11 	mcall	8000735c <at45dbx_mem_check+0x54>

    // Send the Status Register Read command.
    spi_write(AT45DBX_SPI, AT45DBX_CMDC_RD_STATUS_REG);
8000731e:	e0 6b 00 d7 	mov	r11,215
80007322:	fe 7c 28 00 	mov	r12,-55296
80007326:	f0 1f 00 0f 	mcall	80007360 <at45dbx_mem_check+0x58>

    // Send a dummy byte to read the status register.
    spi_write_dummy();
8000732a:	e0 6b 00 ff 	mov	r11,255
8000732e:	fe 7c 28 00 	mov	r12,-55296
80007332:	f0 1f 00 0c 	mcall	80007360 <at45dbx_mem_check+0x58>
    spi_read(AT45DBX_SPI, &status);
80007336:	0e 9b       	mov	r11,r7
80007338:	fe 7c 28 00 	mov	r12,-55296
8000733c:	f0 1f 00 0a 	mcall	80007364 <at45dbx_mem_check+0x5c>

    // Unselect the checked DF memory.
    at45dbx_chipselect_df(df, false);
80007340:	30 0b       	mov	r11,0
80007342:	16 9c       	mov	r12,r11
80007344:	f0 1f 00 06 	mcall	8000735c <at45dbx_mem_check+0x54>
80007348:	9a 98       	ld.uh	r8,sp[0x2]
8000734a:	e2 18 00 3c 	andl	r8,0x3c,COH
8000734e:	e0 48 00 3b 	cp.w	r8,59
    // Unexpected device density value.
    if ((status & AT45DBX_MSK_DENSITY) < AT45DBX_DENSITY) return false;
  }

  return true;
}
80007352:	5f 9c       	srgt	r12
80007354:	2f fd       	sub	sp,-4
80007356:	e3 cd 80 80 	ldm	sp++,r7,pc
8000735a:	00 00       	add	r0,r0
8000735c:	80 00       	ld.sh	r0,r0[0x0]
8000735e:	6f 7c       	ld.w	r12,r7[0x5c]
80007360:	80 00       	ld.sh	r0,r0[0x0]
80007362:	30 c2       	mov	r2,12
80007364:	80 00       	ld.sh	r0,r0[0x0]
80007366:	30 de       	mov	lr,13

80007368 <at45dbx_init>:
 */
//! @{


bool at45dbx_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80007368:	eb cd 40 f8 	pushm	r3-r7,lr
8000736c:	fa c4 ff e8 	sub	r4,sp,-24
80007370:	18 95       	mov	r5,r12
  // Setup SPI registers according to spiOptions.
  for (spiOptions.reg = AT45DBX_SPI_FIRST_NPCS;
80007372:	30 08       	mov	r8,0
80007374:	a8 88       	st.b	r4[0x0],r8
       spiOptions.reg < AT45DBX_SPI_FIRST_NPCS + AT45DBX_MEM_CNT;
       spiOptions.reg++)
  {
    if (spi_setupChipReg(AT45DBX_SPI, &spiOptions, pba_hz) != SPI_OK) return false;
80007376:	fe 73 28 00 	mov	r3,-55296


bool at45dbx_init(spi_options_t spiOptions, unsigned int pba_hz)
{
  // Setup SPI registers according to spiOptions.
  for (spiOptions.reg = AT45DBX_SPI_FIRST_NPCS;
8000737a:	3f f7       	mov	r7,-1
       spiOptions.reg < AT45DBX_SPI_FIRST_NPCS + AT45DBX_MEM_CNT;
       spiOptions.reg++)
8000737c:	10 96       	mov	r6,r8
  {
    if (spi_setupChipReg(AT45DBX_SPI, &spiOptions, pba_hz) != SPI_OK) return false;
8000737e:	0a 9a       	mov	r10,r5
80007380:	08 9b       	mov	r11,r4
80007382:	06 9c       	mov	r12,r3
80007384:	f0 1f 00 08 	mcall	800073a4 <at45dbx_init+0x3c>
80007388:	c0 30       	breq	8000738e <at45dbx_init+0x26>
8000738a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0


bool at45dbx_init(spi_options_t spiOptions, unsigned int pba_hz)
{
  // Setup SPI registers according to spiOptions.
  for (spiOptions.reg = AT45DBX_SPI_FIRST_NPCS;
8000738e:	09 88       	ld.ub	r8,r4[0x0]
80007390:	ee 08 18 00 	cp.b	r8,r7
80007394:	c0 31       	brne	8000739a <at45dbx_init+0x32>
       spiOptions.reg < AT45DBX_SPI_FIRST_NPCS + AT45DBX_MEM_CNT;
       spiOptions.reg++)
80007396:	a8 86       	st.b	r4[0x0],r6
80007398:	cf 3b       	rjmp	8000737e <at45dbx_init+0x16>
  {
    if (spi_setupChipReg(AT45DBX_SPI, &spiOptions, pba_hz) != SPI_OK) return false;
  }

  // Memory ready.
  at45dbx_busy = false;
8000739a:	30 09       	mov	r9,0
8000739c:	48 38       	lddpc	r8,800073a8 <at45dbx_init+0x40>
8000739e:	b0 89       	st.b	r8[0x0],r9
800073a0:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
800073a4:	80 00       	ld.sh	r0,r0[0x0]
800073a6:	30 04       	mov	r4,0
800073a8:	00 00       	add	r0,r0
800073aa:	01 24       	ld.uh	r4,r0++

800073ac <at45dbx_read_capacity>:
}


Ctrl_status at45dbx_read_capacity(U32 *u32_nb_sector)
{
  *u32_nb_sector = (AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)) - 1;
800073ac:	e0 68 3f ff 	mov	r8,16383
800073b0:	99 08       	st.w	r12[0x0],r8

  return CTRL_GOOD;
}
800073b2:	5e fd       	retal	0

800073b4 <at45dbx_wr_protect>:


bool at45dbx_wr_protect(void)
{
  return false;
}
800073b4:	5e fd       	retal	0

800073b6 <at45dbx_removal>:


bool at45dbx_removal(void)
{
  return false;
}
800073b6:	5e fd       	retal	0

800073b8 <at45dbx_ram_2_df>:
  return CTRL_GOOD;
}


Ctrl_status at45dbx_ram_2_df(U32 addr, const void *ram)
{
800073b8:	eb cd 40 80 	pushm	r7,lr
800073bc:	16 97       	mov	r7,r11
  if (addr + 1 > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)) return CTRL_FAIL;
800073be:	f8 c8 ff ff 	sub	r8,r12,-1
800073c2:	e0 48 40 00 	cp.w	r8,16384
800073c6:	e0 88 00 04 	brls	800073ce <at45dbx_ram_2_df+0x16>
800073ca:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1

  at45dbx_write_open(addr);
800073ce:	f0 1f 00 05 	mcall	800073e0 <at45dbx_ram_2_df+0x28>
  at45dbx_write_sector_from_ram(ram);
800073d2:	0e 9c       	mov	r12,r7
800073d4:	f0 1f 00 04 	mcall	800073e4 <at45dbx_ram_2_df+0x2c>
  at45dbx_write_close();
800073d8:	f0 1f 00 04 	mcall	800073e8 <at45dbx_ram_2_df+0x30>
800073dc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800073e0:	80 00       	ld.sh	r0,r0[0x0]
800073e2:	70 80       	ld.w	r0,r8[0x20]
800073e4:	80 00       	ld.sh	r0,r0[0x0]
800073e6:	71 5c       	ld.w	r12,r8[0x54]
800073e8:	80 00       	ld.sh	r0,r0[0x0]
800073ea:	6f a4       	ld.w	r4,r7[0x68]

800073ec <at45dbx_df_2_ram>:
 */
//! @{


Ctrl_status at45dbx_df_2_ram(U32 addr, void *ram)
{
800073ec:	eb cd 40 80 	pushm	r7,lr
800073f0:	16 97       	mov	r7,r11
  if (addr + 1 > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)) return CTRL_FAIL;
800073f2:	f8 c8 ff ff 	sub	r8,r12,-1
800073f6:	e0 48 40 00 	cp.w	r8,16384
800073fa:	e0 88 00 04 	brls	80007402 <at45dbx_df_2_ram+0x16>
800073fe:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1

  at45dbx_read_open(addr);
80007402:	f0 1f 00 05 	mcall	80007414 <at45dbx_df_2_ram+0x28>
  at45dbx_read_sector_2_ram(ram);
80007406:	0e 9c       	mov	r12,r7
80007408:	f0 1f 00 04 	mcall	80007418 <at45dbx_df_2_ram+0x2c>
  at45dbx_read_close();
8000740c:	f0 1f 00 04 	mcall	8000741c <at45dbx_df_2_ram+0x30>
80007410:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80007414:	80 00       	ld.sh	r0,r0[0x0]
80007416:	71 c4       	ld.w	r4,r8[0x70]
80007418:	80 00       	ld.sh	r0,r0[0x0]
8000741a:	72 7c       	ld.w	r12,r9[0x1c]
8000741c:	80 00       	ld.sh	r0,r0[0x0]
8000741e:	6f f4       	ld.w	r4,r7[0x7c]

80007420 <at45dbx_test_unit_ready>:
 */
//! @{


Ctrl_status at45dbx_test_unit_ready(void)
{
80007420:	d4 01       	pushm	lr
  return (at45dbx_mem_check() == true) ? CTRL_GOOD : CTRL_NO_PRESENT;
80007422:	f0 1f 00 04 	mcall	80007430 <at45dbx_test_unit_ready+0x10>
}
80007426:	f9 bc 01 00 	movne	r12,0
8000742a:	f9 bc 00 02 	moveq	r12,2
8000742e:	d8 02       	popm	pc
80007430:	80 00       	ld.sh	r0,r0[0x0]
80007432:	73 08       	ld.w	r8,r9[0x40]

80007434 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80007434:	30 2c       	mov	r12,2
80007436:	5e fc       	retal	r12

80007438 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80007438:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000743a:	30 18       	mov	r8,1
8000743c:	f0 0c 18 00 	cp.b	r12,r8
80007440:	e0 88 00 03 	brls	80007446 <mem_test_unit_ready+0xe>
80007444:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80007446:	f8 08 15 03 	lsl	r8,r12,0x3
8000744a:	f0 0c 01 0c 	sub	r12,r8,r12
8000744e:	48 38       	lddpc	r8,80007458 <mem_test_unit_ready+0x20>
80007450:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
80007454:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80007456:	d8 02       	popm	pc
80007458:	80 00       	ld.sh	r0,r0[0x0]
8000745a:	8c 1c       	ld.sh	r12,r6[0x2]

8000745c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
8000745c:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000745e:	30 18       	mov	r8,1
80007460:	f0 0c 18 00 	cp.b	r12,r8
80007464:	e0 88 00 03 	brls	8000746a <mem_read_capacity+0xe>
80007468:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
8000746a:	f8 08 15 03 	lsl	r8,r12,0x3
8000746e:	f0 0c 01 0c 	sub	r12,r8,r12
80007472:	2f fc       	sub	r12,-1
80007474:	48 38       	lddpc	r8,80007480 <mem_read_capacity+0x24>
80007476:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
8000747a:	16 9c       	mov	r12,r11
8000747c:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
8000747e:	d8 02       	popm	pc
80007480:	80 00       	ld.sh	r0,r0[0x0]
80007482:	8c 1c       	ld.sh	r12,r6[0x2]

80007484 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80007484:	30 18       	mov	r8,1
80007486:	f0 0c 18 00 	cp.b	r12,r8
#endif

  Ctrl_access_unlock();

  return sector_size;
}
8000748a:	5f 8c       	srls	r12
8000748c:	5e fc       	retal	r12
8000748e:	d7 03       	nop

80007490 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80007490:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80007492:	30 18       	mov	r8,1
80007494:	f0 0c 18 00 	cp.b	r12,r8
80007498:	e0 88 00 03 	brls	8000749e <mem_wr_protect+0xe>
8000749c:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
8000749e:	f8 08 15 03 	lsl	r8,r12,0x3
800074a2:	f0 0c 01 0c 	sub	r12,r8,r12
800074a6:	48 48       	lddpc	r8,800074b4 <mem_wr_protect+0x24>
800074a8:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800074ac:	78 2c       	ld.w	r12,r12[0x8]
800074ae:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
800074b0:	d8 02       	popm	pc
800074b2:	00 00       	add	r0,r0
800074b4:	80 00       	ld.sh	r0,r0[0x0]
800074b6:	8c 1c       	ld.sh	r12,r6[0x2]

800074b8 <mem_name>:
}


const char *mem_name(U8 lun)
{
  return
800074b8:	30 18       	mov	r8,1
800074ba:	f0 0c 18 00 	cp.b	r12,r8
800074be:	e0 88 00 03 	brls	800074c4 <mem_name+0xc>
800074c2:	5e fd       	retal	0
800074c4:	f8 08 15 03 	lsl	r8,r12,0x3
800074c8:	f0 0c 01 0c 	sub	r12,r8,r12
800074cc:	48 38       	lddpc	r8,800074d8 <mem_name+0x20>
800074ce:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800074d2:	78 6c       	ld.w	r12,r12[0x18]
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
800074d4:	5e fc       	retal	r12
800074d6:	00 00       	add	r0,r0
800074d8:	80 00       	ld.sh	r0,r0[0x0]
800074da:	8c 1c       	ld.sh	r12,r6[0x2]

800074dc <stream_state>:


Ctrl_status stream_state(U8 id)
{
  return CTRL_GOOD;
}
800074dc:	5e fd       	retal	0

800074de <stream_stop>:


U16 stream_stop(U8 id)
{
  return 0;
}
800074de:	5e fd       	retal	0

800074e0 <ram_2_memory>:
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
800074e0:	eb cd 40 e0 	pushm	r5-r7,lr
800074e4:	18 97       	mov	r7,r12
800074e6:	16 95       	mov	r5,r11
800074e8:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
800074ea:	31 0c       	mov	r12,16
800074ec:	f0 1f 00 0e 	mcall	80007524 <ram_2_memory+0x44>
  status =
800074f0:	30 18       	mov	r8,1
800074f2:	f0 07 18 00 	cp.b	r7,r8
800074f6:	e0 88 00 04 	brls	800074fe <ram_2_memory+0x1e>
800074fa:	30 17       	mov	r7,1
800074fc:	c0 d8       	rjmp	80007516 <ram_2_memory+0x36>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
800074fe:	ee 08 15 03 	lsl	r8,r7,0x3
80007502:	f0 07 01 07 	sub	r7,r8,r7
80007506:	48 98       	lddpc	r8,80007528 <ram_2_memory+0x48>
80007508:	f0 07 00 27 	add	r7,r8,r7<<0x2
8000750c:	6e 58       	ld.w	r8,r7[0x14]
8000750e:	0c 9b       	mov	r11,r6
80007510:	0a 9c       	mov	r12,r5
80007512:	5d 18       	icall	r8
80007514:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
80007516:	31 0c       	mov	r12,16
80007518:	f0 1f 00 05 	mcall	8000752c <ram_2_memory+0x4c>

  Ctrl_access_unlock();

  return status;
}
8000751c:	0e 9c       	mov	r12,r7
8000751e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007522:	00 00       	add	r0,r0
80007524:	80 00       	ld.sh	r0,r0[0x0]
80007526:	2c d0       	sub	r0,-51
80007528:	80 00       	ld.sh	r0,r0[0x0]
8000752a:	8c 1c       	ld.sh	r12,r6[0x2]
8000752c:	80 00       	ld.sh	r0,r0[0x0]
8000752e:	2d 20       	sub	r0,-46

80007530 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80007530:	eb cd 40 e0 	pushm	r5-r7,lr
80007534:	18 97       	mov	r7,r12
80007536:	16 95       	mov	r5,r11
80007538:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
8000753a:	32 0c       	mov	r12,32
8000753c:	f0 1f 00 0e 	mcall	80007574 <memory_2_ram+0x44>
  status =
80007540:	30 18       	mov	r8,1
80007542:	f0 07 18 00 	cp.b	r7,r8
80007546:	e0 88 00 04 	brls	8000754e <memory_2_ram+0x1e>
8000754a:	30 17       	mov	r7,1
8000754c:	c0 d8       	rjmp	80007566 <memory_2_ram+0x36>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
8000754e:	ee 08 15 03 	lsl	r8,r7,0x3
80007552:	f0 07 01 07 	sub	r7,r8,r7
80007556:	48 98       	lddpc	r8,80007578 <memory_2_ram+0x48>
80007558:	f0 07 00 27 	add	r7,r8,r7<<0x2
8000755c:	6e 48       	ld.w	r8,r7[0x10]
8000755e:	0c 9b       	mov	r11,r6
80007560:	0a 9c       	mov	r12,r5
80007562:	5d 18       	icall	r8
80007564:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
80007566:	32 0c       	mov	r12,32
80007568:	f0 1f 00 05 	mcall	8000757c <memory_2_ram+0x4c>

  Ctrl_access_unlock();

  return status;
}
8000756c:	0e 9c       	mov	r12,r7
8000756e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007572:	00 00       	add	r0,r0
80007574:	80 00       	ld.sh	r0,r0[0x0]
80007576:	2c d0       	sub	r0,-51
80007578:	80 00       	ld.sh	r0,r0[0x0]
8000757a:	8c 1c       	ld.sh	r12,r6[0x2]
8000757c:	80 00       	ld.sh	r0,r0[0x0]
8000757e:	2d 20       	sub	r0,-46

80007580 <stream_mem_to_mem>:
  #if ACCESS_MEM_TO_MEM == true

#include "fat.h"

Ctrl_status stream_mem_to_mem(U8 src_lun, U32 src_addr, U8 dest_lun, U32 dest_addr, U16 nb_sector)
{
80007580:	eb cd 40 fc 	pushm	r2-r7,lr
80007584:	18 93       	mov	r3,r12
80007586:	16 96       	mov	r6,r11
80007588:	14 92       	mov	r2,r10
8000758a:	12 95       	mov	r5,r9
8000758c:	10 97       	mov	r7,r8
  static U8 sector_buf[FS_512B];
  Ctrl_status status = CTRL_GOOD;

  while (nb_sector--)
  {
    if ((status = memory_2_ram(src_lun, src_addr++, sector_buf)) != CTRL_GOOD) break;
8000758e:	48 d4       	lddpc	r4,800075c0 <stream_mem_to_mem+0x40>
  #pragma data_alignment = 4
#endif
  static U8 sector_buf[FS_512B];
  Ctrl_status status = CTRL_GOOD;

  while (nb_sector--)
80007590:	c1 28       	rjmp	800075b4 <stream_mem_to_mem+0x34>
  {
    if ((status = memory_2_ram(src_lun, src_addr++, sector_buf)) != CTRL_GOOD) break;
80007592:	08 9a       	mov	r10,r4
80007594:	0c 9b       	mov	r11,r6
80007596:	06 9c       	mov	r12,r3
80007598:	f0 1f 00 0b 	mcall	800075c4 <stream_mem_to_mem+0x44>
8000759c:	c0 f1       	brne	800075ba <stream_mem_to_mem+0x3a>
    if ((status = ram_2_memory(dest_lun, dest_addr++, sector_buf)) != CTRL_GOOD) break;
8000759e:	08 9a       	mov	r10,r4
800075a0:	0a 9b       	mov	r11,r5
800075a2:	04 9c       	mov	r12,r2
800075a4:	f0 1f 00 09 	mcall	800075c8 <stream_mem_to_mem+0x48>
800075a8:	20 17       	sub	r7,1
800075aa:	5c 87       	casts.h	r7
800075ac:	58 0c       	cp.w	r12,0
800075ae:	c0 61       	brne	800075ba <stream_mem_to_mem+0x3a>
  static U8 sector_buf[FS_512B];
  Ctrl_status status = CTRL_GOOD;

  while (nb_sector--)
  {
    if ((status = memory_2_ram(src_lun, src_addr++, sector_buf)) != CTRL_GOOD) break;
800075b0:	2f f6       	sub	r6,-1
    if ((status = ram_2_memory(dest_lun, dest_addr++, sector_buf)) != CTRL_GOOD) break;
800075b2:	2f f5       	sub	r5,-1
  #pragma data_alignment = 4
#endif
  static U8 sector_buf[FS_512B];
  Ctrl_status status = CTRL_GOOD;

  while (nb_sector--)
800075b4:	58 07       	cp.w	r7,0
800075b6:	ce e1       	brne	80007592 <stream_mem_to_mem+0x12>
800075b8:	30 0c       	mov	r12,0
    if ((status = memory_2_ram(src_lun, src_addr++, sector_buf)) != CTRL_GOOD) break;
    if ((status = ram_2_memory(dest_lun, dest_addr++, sector_buf)) != CTRL_GOOD) break;
  }

  return status;
}
800075ba:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800075be:	00 00       	add	r0,r0
800075c0:	00 00       	add	r0,r0
800075c2:	01 28       	ld.uh	r8,r0++
800075c4:	80 00       	ld.sh	r0,r0[0x0]
800075c6:	75 30       	ld.w	r0,r10[0x4c]
800075c8:	80 00       	ld.sh	r0,r0[0x0]
800075ca:	74 e0       	ld.w	r0,r10[0x38]

800075cc <main>:
}

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
800075cc:	d4 31       	pushm	r0-r7,lr
800075ce:	20 ed       	sub	sp,56
  // to use preprocessor computation from pre-defined target frequencies.
#else
  // Configure Osc0 in crystal mode (i.e. use of an external crystal source, with
  // frequency FOSC0) with an appropriate startup time then switch the main clock
  // source to Osc0.
  pcl_switch_to_osc(PCL_OSC0, FOSC0, OSC0_STARTUP);
800075d0:	30 3a       	mov	r10,3
800075d2:	e0 6b 1b 00 	mov	r11,6912
800075d6:	ea 1b 00 b7 	orh	r11,0xb7
800075da:	30 0c       	mov	r12,0
800075dc:	f0 1f 03 32 	mcall	800082a4 <main+0xcd8>
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };

  // Set up GPIO for SHL_USART, size of the GPIO map is 2 here.
  gpio_enable_module(SHL_USART_GPIO_MAP,
800075e0:	30 2b       	mov	r11,2
800075e2:	fe fc 0c c6 	ld.w	r12,pc[3270]
800075e6:	f0 1f 03 32 	mcall	800082ac <main+0xce0>
                     sizeof(SHL_USART_GPIO_MAP) / sizeof(SHL_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(SHL_USART, &SHL_USART_OPTIONS, pba_hz);
800075ea:	e0 6a 1b 00 	mov	r10,6912
800075ee:	ea 1a 00 b7 	orh	r10,0xb7
800075f2:	fe fb 0c be 	ld.w	r11,pc[3262]
800075f6:	fe 7c 18 00 	mov	r12,-59392
800075fa:	f0 1f 03 2f 	mcall	800082b4 <main+0xce8>
    .spck_delay   = 0,
    .trans_delay  = 0,
    .stay_act     = 1,
    .spi_mode     = 0,
    .modfdis      = 1
  };
800075fe:	fe f8 0c ba 	ld.w	r8,pc[3258]
80007602:	fa c7 ff ec 	sub	r7,sp,-20
80007606:	f0 ea 00 00 	ld.d	r10,r8[0]
8000760a:	ee eb 00 00 	st.d	r7[0],r10
8000760e:	f0 e8 00 08 	ld.d	r8,r8[8]
80007612:	ee e9 00 08 	st.d	r7[8],r8

  // Assign I/Os to SPI.
  gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80007616:	30 4b       	mov	r11,4
80007618:	fe fc 0c a4 	ld.w	r12,pc[3236]
8000761c:	f0 1f 03 24 	mcall	800082ac <main+0xce0>
                     sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));

  // Initialize as master.
  spi_initMaster(AT45DBX_SPI, &spiOptions);
80007620:	0e 9b       	mov	r11,r7
80007622:	fe 7c 28 00 	mov	r12,-55296
80007626:	f0 1f 03 27 	mcall	800082c0 <main+0xcf4>

  // Set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(AT45DBX_SPI, 0, 0, 0);
8000762a:	30 09       	mov	r9,0
8000762c:	12 9a       	mov	r10,r9
8000762e:	12 9b       	mov	r11,r9
80007630:	fe 7c 28 00 	mov	r12,-55296
80007634:	f0 1f 03 24 	mcall	800082c4 <main+0xcf8>

  // Enable SPI.
  spi_enable(AT45DBX_SPI);
80007638:	fe 7c 28 00 	mov	r12,-55296
8000763c:	f0 1f 03 23 	mcall	800082c8 <main+0xcfc>

  // Initialize data flash with SPI clock at EXAMPLE_TARGET_PBACLK_FREQ_HZ.
  at45dbx_init(spiOptions, EXAMPLE_TARGET_PBACLK_FREQ_HZ);
80007640:	20 4d       	sub	sp,16
80007642:	ee e8 00 00 	ld.d	r8,r7[0]
80007646:	fa e9 00 00 	st.d	sp[0],r8
8000764a:	ee e8 00 08 	ld.d	r8,r7[8]
8000764e:	fa e9 00 08 	st.d	sp[8],r8
80007652:	e0 6c 1b 00 	mov	r12,6912
80007656:	ea 1c 00 b7 	orh	r12,0xb7
8000765a:	f0 1f 03 1d 	mcall	800082cc <main+0xd00>
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
8000765e:	fe f8 0c 72 	ld.w	r8,pc[3186]
80007662:	f0 ea 00 00 	ld.d	r10,r8[0]
80007666:	ee eb 00 00 	st.d	r7[0],r10
8000766a:	f0 e8 00 08 	ld.d	r8,r8[8]
8000766e:	ee e9 00 08 	st.d	r7[8],r8

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80007672:	30 4b       	mov	r11,4
80007674:	fe fc 0c 60 	ld.w	r12,pc[3168]
80007678:	f0 1f 03 0d 	mcall	800082ac <main+0xce0>
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

	// Initialize as master.
	spi_initMaster(SD_MMC_SPI, &spiOptions);
8000767c:	0e 9b       	mov	r11,r7
8000767e:	fe 7c 28 00 	mov	r12,-55296
80007682:	f0 1f 03 10 	mcall	800082c0 <main+0xcf4>

	// Set SPI selection mode: variable_ps, pcs_decode, delay.
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007686:	30 09       	mov	r9,0
80007688:	12 9a       	mov	r10,r9
8000768a:	12 9b       	mov	r11,r9
8000768c:	fe 7c 28 00 	mov	r12,-55296
80007690:	f0 1f 03 0d 	mcall	800082c4 <main+0xcf8>

	// Enable SPI module.
	spi_enable(SD_MMC_SPI);
80007694:	fe 7c 28 00 	mov	r12,-55296
80007698:	f0 1f 03 0c 	mcall	800082c8 <main+0xcfc>

	// Initialize SD/MMC driver with SPI clock (PBA).
	sd_mmc_spi_init(spiOptions, PBA_HZ);
8000769c:	20 4d       	sub	sp,16
8000769e:	ee e8 00 00 	ld.d	r8,r7[0]
800076a2:	fa e9 00 00 	st.d	sp[0],r8
800076a6:	ee e8 00 08 	ld.d	r8,r7[8]
800076aa:	fa e9 00 08 	st.d	sp[8],r8
800076ae:	e0 6c 1b 00 	mov	r12,6912
800076b2:	ea 1c 00 b7 	orh	r12,0xb7
800076b6:	f0 1f 03 09 	mcall	800082d8 <main+0xd0c>
800076ba:	2f 8d       	sub	sp,-32

  // Initialize AT45DBX resources: GPIO, SPI and AT45DBX.
    at45dbx_resources_init();
    sd_mmc_resources_init();

while (!sd_mmc_spi_mem_check());
800076bc:	f0 1f 03 08 	mcall	800082dc <main+0xd10>
800076c0:	cf e0       	breq	800076bc <main+0xf0>
print_dbg("\r\nCard detected!");
800076c2:	fe fc 0c 1e 	ld.w	r12,pc[3102]
800076c6:	f0 1f 03 08 	mcall	800082e4 <main+0xd18>

// Read Card capacity
sd_mmc_spi_get_capacity();
800076ca:	f0 1f 03 08 	mcall	800082e8 <main+0xd1c>
print_dbg("Capacity = ");
800076ce:	fe fc 0c 1e 	ld.w	r12,pc[3102]
800076d2:	f0 1f 03 05 	mcall	800082e4 <main+0xd18>
print_dbg_ulong(capacity >> 20);
800076d6:	fe f8 0c 1a 	ld.w	r8,pc[3098]
800076da:	f0 e8 00 00 	ld.d	r8,r8[0]
800076de:	f0 0c 16 14 	lsr	r12,r8,0x14
800076e2:	f9 e9 10 cc 	or	r12,r12,r9<<0xc
800076e6:	f0 1f 03 04 	mcall	800082f4 <main+0xd28>
print_dbg(" MBytes");
800076ea:	fe fc 0c 0e 	ld.w	r12,pc[3086]
800076ee:	f0 1f 02 fe 	mcall	800082e4 <main+0xd18>


  // Display memory status
  print(SHL_USART, MSG_WELCOME "\r\nMemory ");
800076f2:	fe fb 0c 0a 	ld.w	r11,pc[3082]
800076f6:	fe 7c 18 00 	mov	r12,-59392
800076fa:	f0 1f 03 02 	mcall	80008300 <main+0xd34>


  if (mem_test_unit_ready(LUN_ID_AT45DBX_MEM) == CTRL_GOOD)
800076fe:	30 0c       	mov	r12,0
80007700:	f0 1f 03 01 	mcall	80008304 <main+0xd38>
80007704:	c1 91       	brne	80007736 <main+0x16a>


{
	// Get and display the capacity
	mem_read_capacity(LUN_ID_AT45DBX_MEM, &VarTemp);
80007706:	fa cb ff d8 	sub	r11,sp,-40
8000770a:	f0 1f 03 00 	mcall	80008308 <main+0xd3c>
	print(SHL_USART, "Internal OK:\t");
8000770e:	fe fb 0b fe 	ld.w	r11,pc[3070]
80007712:	fe 7c 18 00 	mov	r12,-59392
80007716:	f0 1f 02 fb 	mcall	80008300 <main+0xd34>
	print_ulong(SHL_USART, (VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
8000771a:	40 ab       	lddsp	r11,sp[0x28]
8000771c:	2f fb       	sub	r11,-1
8000771e:	ab 9b       	lsr	r11,0xb
80007720:	fe 7c 18 00 	mov	r12,-59392
80007724:	f0 1f 02 fb 	mcall	80008310 <main+0xd44>
	print(SHL_USART, " MB\r\n");
80007728:	fe fb 0b ec 	ld.w	r11,pc[3052]
8000772c:	fe 7c 18 00 	mov	r12,-59392
80007730:	f0 1f 02 f4 	mcall	80008300 <main+0xd34>
80007734:	c0 78       	rjmp	80007742 <main+0x176>
}
 else
 {
	 // Display an error message
	 print(SHL_USART, "Not initialized: Check if internal memory is ready...\r\n");
80007736:	fe fb 0b e2 	ld.w	r11,pc[3042]
8000773a:	fe 7c 18 00 	mov	r12,-59392
8000773e:	f0 1f 02 f1 	mcall	80008300 <main+0xd34>
 }

  // Test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
 // if (mem_test_unit_ready(LUN_ID_AT45DBX_MEM) == CTRL_GOOD)
  if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD)
80007742:	30 1c       	mov	r12,1
80007744:	f0 1f 02 f0 	mcall	80008304 <main+0xd38>
80007748:	c1 a1       	brne	8000777c <main+0x1b0>
   
  {
    // Get and display the capacity
   // mem_read_capacity(LUN_ID_AT45DBX_MEM, &VarTemp);
	 mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &VarTemp);
8000774a:	fa cb ff d8 	sub	r11,sp,-40
8000774e:	30 1c       	mov	r12,1
80007750:	f0 1f 02 ee 	mcall	80008308 <main+0xd3c>
    print(SHL_USART, "OK:\t");
80007754:	fe fb 0b c8 	ld.w	r11,pc[3016]
80007758:	fe 7c 18 00 	mov	r12,-59392
8000775c:	f0 1f 02 e9 	mcall	80008300 <main+0xd34>
    print_ulong(SHL_USART, (VarTemp + 1) >> (20 - FS_SHIFT_B_TO_SECTOR));
80007760:	40 ab       	lddsp	r11,sp[0x28]
80007762:	2f fb       	sub	r11,-1
80007764:	ab 9b       	lsr	r11,0xb
80007766:	fe 7c 18 00 	mov	r12,-59392
8000776a:	f0 1f 02 ea 	mcall	80008310 <main+0xd44>
    print(SHL_USART, " MB\r\n");
8000776e:	fe fb 0b a6 	ld.w	r11,pc[2982]
80007772:	fe 7c 18 00 	mov	r12,-59392
80007776:	f0 1f 02 e3 	mcall	80008300 <main+0xd34>
8000777a:	c0 78       	rjmp	80007788 <main+0x1bc>
  }
  else
  {
    // Display an error message
    print(SHL_USART, "Not initialized: Check if SD is ready...\r\n");
8000777c:	fe fb 0b a4 	ld.w	r11,pc[2980]
80007780:	fe 7c 18 00 	mov	r12,-59392
80007784:	f0 1f 02 df 	mcall	80008300 <main+0xd34>
  }

  // Display the prompt
  print(SHL_USART, MSG_PROMPT);
80007788:	fe fb 0b 9c 	ld.w	r11,pc[2972]
8000778c:	fe 7c 18 00 	mov	r12,-59392
80007790:	f0 1f 02 dc 	mcall	80008300 <main+0xd34>

  // reset vars
  cmd = false;
80007794:	30 08       	mov	r8,0
80007796:	fe f9 0b 92 	ld.w	r9,pc[2962]
8000779a:	b2 88       	st.b	r9[0x0],r8
  cmd_type = CMD_NONE;
8000779c:	fe f9 0b 90 	ld.w	r9,pc[2960]
800077a0:	b2 88       	st.b	r9[0x0],r8
  first_ls = true;
800077a2:	30 19       	mov	r9,1
800077a4:	fe f8 0b 8c 	ld.w	r8,pc[2956]
800077a8:	b0 89       	st.b	r8[0x0],r9
  // reset all navigators
  nav_reset();
800077aa:	f0 1f 02 e3 	mcall	80008334 <main+0xd68>

  // always loop
  while (true)
  {
    // While a usable user command on RS232 isn't received, build it
    if (!cmd)
800077ae:	fe f7 0b 7a 	ld.w	r7,pc[2938]
    {
    case CR:
      // Add CRLF.
      print(SHL_USART, CRLF);
      // Add NUL char.
      cmd_str[i_str] = '\0';
800077b2:	fe f3 0b 86 	ld.w	r3,pc[2950]
static void fat_example_parse_cmd(void)
{
  uint8_t i, j;

  // Get command type.
  for (i = 0; cmd_str[i] != ' ' && i < i_str; i++);
800077b6:	32 02       	mov	r2,32
    if (cmd_str[i] == '"')
    {
      i++;
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
      {
        par_str2[j] = cmd_str[i];
800077b8:	fe fe 0b 84 	ld.w	lr,pc[2948]
800077bc:	50 1e       	stdsp	sp[0x4],lr
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
800077be:	50 03       	stdsp	sp[0x0],r3

  // always loop
  while (true)
  {
    // While a usable user command on RS232 isn't received, build it
    if (!cmd)
800077c0:	0f 89       	ld.ub	r9,r7[0x0]
800077c2:	30 08       	mov	r8,0
800077c4:	f0 09 18 00 	cp.b	r9,r8
800077c8:	e0 81 02 3b 	brne	80007c3e <main+0x672>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_reset_status(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_RSTSTA_MASK;
800077cc:	fe 7c 18 00 	mov	r12,-59392
800077d0:	e0 68 01 00 	mov	r8,256
800077d4:	99 08       	st.w	r12[0x0],r8
{
  int c;

  // If something new in the USART
  usart_reset_status(SHL_USART);
  if (usart_read_char(SHL_USART, &c) == USART_SUCCESS)
800077d6:	fa cb ff dc 	sub	r11,sp,-36
800077da:	f0 1f 02 da 	mcall	80008340 <main+0xd74>
800077de:	cf 11       	brne	800077c0 <main+0x1f4>
  {
    switch (c)
800077e0:	40 9b       	lddsp	r11,sp[0x24]
800077e2:	58 8b       	cp.w	r11,8
800077e4:	e0 80 02 0a 	breq	80007bf8 <main+0x62c>
800077e8:	58 db       	cp.w	r11,13
800077ea:	c0 60       	breq	800077f6 <main+0x22a>
800077ec:	58 3b       	cp.w	r11,3
800077ee:	e0 81 02 1a 	brne	80007c22 <main+0x656>
800077f2:	e0 8f 01 f7 	bral	80007be0 <main+0x614>
    {
    case CR:
      // Add CRLF.
      print(SHL_USART, CRLF);
800077f6:	fe fb 0b 4e 	ld.w	r11,pc[2894]
800077fa:	fe 7c 18 00 	mov	r12,-59392
800077fe:	f0 1f 02 c1 	mcall	80008300 <main+0xd34>
      // Add NUL char.
      cmd_str[i_str] = '\0';
80007802:	fe f8 0b 46 	ld.w	r8,pc[2886]
80007806:	11 88       	ld.ub	r8,r8[0x0]
80007808:	30 09       	mov	r9,0
8000780a:	e6 08 0b 09 	st.b	r3[r8],r9
static void fat_example_parse_cmd(void)
{
  uint8_t i, j;

  // Get command type.
  for (i = 0; cmd_str[i] != ' ' && i < i_str; i++);
8000780e:	07 88       	ld.ub	r8,r3[0x0]
80007810:	e4 08 18 00 	cp.b	r8,r2
80007814:	e0 80 01 39 	breq	80007a86 <main+0x4ba>
80007818:	fe f8 0b 30 	ld.w	r8,pc[2864]
8000781c:	11 89       	ld.ub	r9,r8[0x0]
8000781e:	58 09       	cp.w	r9,0
80007820:	e0 80 01 33 	breq	80007a86 <main+0x4ba>
80007824:	30 06       	mov	r6,0
80007826:	2f f6       	sub	r6,-1
80007828:	5c 56       	castu.b	r6
8000782a:	0c 95       	mov	r5,r6
8000782c:	e6 06 07 08 	ld.ub	r8,r3[r6]
80007830:	e4 08 18 00 	cp.b	r8,r2
80007834:	c0 40       	breq	8000783c <main+0x270>
80007836:	f2 06 18 00 	cp.b	r6,r9
8000783a:	cf 63       	brcs	80007826 <main+0x25a>

  if (i)
8000783c:	58 06       	cp.w	r6,0
8000783e:	e0 80 01 25 	breq	80007a88 <main+0x4bc>
  {
    cmd = true;
80007842:	30 18       	mov	r8,1
80007844:	ae 88       	st.b	r7[0x0],r8
    // Save last byte
    j = cmd_str[i];
80007846:	e6 05 07 04 	ld.ub	r4,r3[r5]
    // Reset vars
    cmd_str[i] = '\0';
8000784a:	30 08       	mov	r8,0
8000784c:	e6 05 0b 08 	st.b	r3[r5],r8
    par_str1[0] = '\0';
80007850:	fe f9 0a fc 	ld.w	r9,pc[2812]
80007854:	b2 88       	st.b	r9[0x0],r8
    par_str2[0] = '\0';
80007856:	fe fc 0a e6 	ld.w	r12,pc[2790]
8000785a:	b8 88       	st.b	r12[0x0],r8

    // Decode command type.
    if      (!strcmp(cmd_str, STR_CD      )) cmd_type = CMD_CD;
8000785c:	fe fb 0a f4 	ld.w	r11,pc[2804]
80007860:	40 0c       	lddsp	r12,sp[0x0]
80007862:	f0 1f 02 bd 	mcall	80008354 <main+0xd88>
80007866:	c0 61       	brne	80007872 <main+0x2a6>
80007868:	30 39       	mov	r9,3
8000786a:	fe f8 0a c2 	ld.w	r8,pc[2754]
8000786e:	b0 89       	st.b	r8[0x0],r9
80007870:	c0 89       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_MOUNT   )) cmd_type = CMD_MOUNT;
80007872:	fe fb 0a e6 	ld.w	r11,pc[2790]
80007876:	40 0c       	lddsp	r12,sp[0x0]
80007878:	f0 1f 02 b7 	mcall	80008354 <main+0xd88>
8000787c:	c0 61       	brne	80007888 <main+0x2bc>
8000787e:	30 19       	mov	r9,1
80007880:	fe f8 0a ac 	ld.w	r8,pc[2732]
80007884:	b0 89       	st.b	r8[0x0],r9
80007886:	cf d8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_FAT     )) cmd_type = CMD_FAT;
80007888:	fe fb 0a d4 	ld.w	r11,pc[2772]
8000788c:	40 0c       	lddsp	r12,sp[0x0]
8000788e:	f0 1f 02 b2 	mcall	80008354 <main+0xd88>
80007892:	c0 61       	brne	8000789e <main+0x2d2>
80007894:	31 19       	mov	r9,17
80007896:	fe f8 0a 96 	ld.w	r8,pc[2710]
8000789a:	b0 89       	st.b	r8[0x0],r9
8000789c:	cf 28       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_CP      )) cmd_type = CMD_CP;
8000789e:	fe fb 0a c2 	ld.w	r11,pc[2754]
800078a2:	40 0c       	lddsp	r12,sp[0x0]
800078a4:	f0 1f 02 ac 	mcall	80008354 <main+0xd88>
800078a8:	c0 61       	brne	800078b4 <main+0x2e8>
800078aa:	30 d9       	mov	r9,13
800078ac:	fe f8 0a 80 	ld.w	r8,pc[2688]
800078b0:	b0 89       	st.b	r8[0x0],r9
800078b2:	ce 78       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_LS      )) cmd_type = CMD_LS;
800078b4:	fe fb 0a b0 	ld.w	r11,pc[2736]
800078b8:	40 0c       	lddsp	r12,sp[0x0]
800078ba:	f0 1f 02 a7 	mcall	80008354 <main+0xd88>
800078be:	c0 61       	brne	800078ca <main+0x2fe>
800078c0:	30 29       	mov	r9,2
800078c2:	fe f8 0a 6a 	ld.w	r8,pc[2666]
800078c6:	b0 89       	st.b	r8[0x0],r9
800078c8:	cd c8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_RM      )) cmd_type = CMD_RM;
800078ca:	fe fb 0a 9e 	ld.w	r11,pc[2718]
800078ce:	40 0c       	lddsp	r12,sp[0x0]
800078d0:	f0 1f 02 a1 	mcall	80008354 <main+0xd88>
800078d4:	c0 61       	brne	800078e0 <main+0x314>
800078d6:	30 89       	mov	r9,8
800078d8:	fe f8 0a 54 	ld.w	r8,pc[2644]
800078dc:	b0 89       	st.b	r8[0x0],r9
800078de:	cd 18       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_DF      )) cmd_type = CMD_DF;
800078e0:	fe fb 0a 8c 	ld.w	r11,pc[2700]
800078e4:	40 0c       	lddsp	r12,sp[0x0]
800078e6:	f0 1f 02 9c 	mcall	80008354 <main+0xd88>
800078ea:	c0 61       	brne	800078f6 <main+0x32a>
800078ec:	30 e9       	mov	r9,14
800078ee:	fe f8 0a 3e 	ld.w	r8,pc[2622]
800078f2:	b0 89       	st.b	r8[0x0],r9
800078f4:	cc 68       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_MKDIR   )) cmd_type = CMD_MKDIR;
800078f6:	fe fb 0a 7a 	ld.w	r11,pc[2682]
800078fa:	40 0c       	lddsp	r12,sp[0x0]
800078fc:	f0 1f 02 96 	mcall	80008354 <main+0xd88>
80007900:	c0 61       	brne	8000790c <main+0x340>
80007902:	30 69       	mov	r9,6
80007904:	fe f8 0a 28 	ld.w	r8,pc[2600]
80007908:	b0 89       	st.b	r8[0x0],r9
8000790a:	cb b8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_TOUCH   )) cmd_type = CMD_TOUCH;
8000790c:	fe fb 0a 68 	ld.w	r11,pc[2664]
80007910:	40 0c       	lddsp	r12,sp[0x0]
80007912:	f0 1f 02 91 	mcall	80008354 <main+0xd88>
80007916:	c0 61       	brne	80007922 <main+0x356>
80007918:	30 79       	mov	r9,7
8000791a:	fe f8 0a 12 	ld.w	r8,pc[2578]
8000791e:	b0 89       	st.b	r8[0x0],r9
80007920:	cb 08       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_APPEND  )) cmd_type = CMD_APPEND;
80007922:	fe fb 0a 56 	ld.w	r11,pc[2646]
80007926:	40 0c       	lddsp	r12,sp[0x0]
80007928:	f0 1f 02 8b 	mcall	80008354 <main+0xd88>
8000792c:	c0 61       	brne	80007938 <main+0x36c>
8000792e:	30 99       	mov	r9,9
80007930:	fe f8 09 fc 	ld.w	r8,pc[2556]
80007934:	b0 89       	st.b	r8[0x0],r9
80007936:	ca 58       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_CAT     )) cmd_type = CMD_CAT;
80007938:	fe fb 0a 44 	ld.w	r11,pc[2628]
8000793c:	40 0c       	lddsp	r12,sp[0x0]
8000793e:	f0 1f 02 86 	mcall	80008354 <main+0xd88>
80007942:	c0 61       	brne	8000794e <main+0x382>
80007944:	30 49       	mov	r9,4
80007946:	fe f8 09 e6 	ld.w	r8,pc[2534]
8000794a:	b0 89       	st.b	r8[0x0],r9
8000794c:	c9 a8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_DISK    )) cmd_type = CMD_NB_DRIVE;
8000794e:	fe fb 0a 32 	ld.w	r11,pc[2610]
80007952:	40 0c       	lddsp	r12,sp[0x0]
80007954:	f0 1f 02 80 	mcall	80008354 <main+0xd88>
80007958:	c0 61       	brne	80007964 <main+0x398>
8000795a:	30 a9       	mov	r9,10
8000795c:	fe f8 09 d0 	ld.w	r8,pc[2512]
80007960:	b0 89       	st.b	r8[0x0],r9
80007962:	c8 f8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_MARK    )) cmd_type = CMD_SET_ID;
80007964:	fe fb 0a 20 	ld.w	r11,pc[2592]
80007968:	40 0c       	lddsp	r12,sp[0x0]
8000796a:	f0 1f 02 7b 	mcall	80008354 <main+0xd88>
8000796e:	c0 61       	brne	8000797a <main+0x3ae>
80007970:	30 b9       	mov	r9,11
80007972:	fe f8 09 ba 	ld.w	r8,pc[2490]
80007976:	b0 89       	st.b	r8[0x0],r9
80007978:	c8 48       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_GOTO    )) cmd_type = CMD_GOTO_ID;
8000797a:	fe fb 0a 0e 	ld.w	r11,pc[2574]
8000797e:	40 0c       	lddsp	r12,sp[0x0]
80007980:	f0 1f 02 75 	mcall	80008354 <main+0xd88>
80007984:	c0 61       	brne	80007990 <main+0x3c4>
80007986:	30 c9       	mov	r9,12
80007988:	fe f8 09 a4 	ld.w	r8,pc[2468]
8000798c:	b0 89       	st.b	r8[0x0],r9
8000798e:	c7 98       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_MV      )) cmd_type = CMD_MV;
80007990:	fe fb 09 fc 	ld.w	r11,pc[2556]
80007994:	40 0c       	lddsp	r12,sp[0x0]
80007996:	f0 1f 02 70 	mcall	80008354 <main+0xd88>
8000799a:	c0 61       	brne	800079a6 <main+0x3da>
8000799c:	30 f9       	mov	r9,15
8000799e:	fe f8 09 8e 	ld.w	r8,pc[2446]
800079a2:	b0 89       	st.b	r8[0x0],r9
800079a4:	c6 e8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_A       )) cmd_type = CMD_MOUNT, par_str1[0] = 'a', par_str1[1] = '\0';
800079a6:	fe fb 09 ea 	ld.w	r11,pc[2538]
800079aa:	40 0c       	lddsp	r12,sp[0x0]
800079ac:	f0 1f 02 6a 	mcall	80008354 <main+0xd88>
800079b0:	c0 c1       	brne	800079c8 <main+0x3fc>
800079b2:	30 19       	mov	r9,1
800079b4:	fe f8 09 78 	ld.w	r8,pc[2424]
800079b8:	b0 89       	st.b	r8[0x0],r9
800079ba:	fe f8 09 92 	ld.w	r8,pc[2450]
800079be:	36 19       	mov	r9,97
800079c0:	b0 89       	st.b	r8[0x0],r9
800079c2:	30 09       	mov	r9,0
800079c4:	b0 99       	st.b	r8[0x1],r9
800079c6:	c5 d8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_B       )) cmd_type = CMD_MOUNT, par_str1[0] = 'b', par_str1[1] = '\0';
800079c8:	fe fb 09 cc 	ld.w	r11,pc[2508]
800079cc:	40 0c       	lddsp	r12,sp[0x0]
800079ce:	f0 1f 02 62 	mcall	80008354 <main+0xd88>
800079d2:	c0 c1       	brne	800079ea <main+0x41e>
800079d4:	30 19       	mov	r9,1
800079d6:	fe f8 09 56 	ld.w	r8,pc[2390]
800079da:	b0 89       	st.b	r8[0x0],r9
800079dc:	fe f8 09 70 	ld.w	r8,pc[2416]
800079e0:	36 29       	mov	r9,98
800079e2:	b0 89       	st.b	r8[0x0],r9
800079e4:	30 09       	mov	r9,0
800079e6:	b0 99       	st.b	r8[0x1],r9
800079e8:	c4 c8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_C       )) cmd_type = CMD_MOUNT, par_str1[0] = 'c', par_str1[1] = '\0';
800079ea:	fe fb 09 ae 	ld.w	r11,pc[2478]
800079ee:	40 0c       	lddsp	r12,sp[0x0]
800079f0:	f0 1f 02 59 	mcall	80008354 <main+0xd88>
800079f4:	c0 c1       	brne	80007a0c <main+0x440>
800079f6:	30 19       	mov	r9,1
800079f8:	fe f8 09 34 	ld.w	r8,pc[2356]
800079fc:	b0 89       	st.b	r8[0x0],r9
800079fe:	fe f8 09 4e 	ld.w	r8,pc[2382]
80007a02:	36 39       	mov	r9,99
80007a04:	b0 89       	st.b	r8[0x0],r9
80007a06:	30 09       	mov	r9,0
80007a08:	b0 99       	st.b	r8[0x1],r9
80007a0a:	c3 b8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_D       )) cmd_type = CMD_MOUNT, par_str1[0] = 'd', par_str1[1] = '\0';
80007a0c:	fe fb 09 90 	ld.w	r11,pc[2448]
80007a10:	40 0c       	lddsp	r12,sp[0x0]
80007a12:	f0 1f 02 51 	mcall	80008354 <main+0xd88>
80007a16:	c0 c1       	brne	80007a2e <main+0x462>
80007a18:	30 19       	mov	r9,1
80007a1a:	fe f8 09 12 	ld.w	r8,pc[2322]
80007a1e:	b0 89       	st.b	r8[0x0],r9
80007a20:	fe f8 09 2c 	ld.w	r8,pc[2348]
80007a24:	36 49       	mov	r9,100
80007a26:	b0 89       	st.b	r8[0x0],r9
80007a28:	30 09       	mov	r9,0
80007a2a:	b0 99       	st.b	r8[0x1],r9
80007a2c:	c2 a8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_HELP    )) cmd_type = CMD_HELP;
80007a2e:	fe fb 09 72 	ld.w	r11,pc[2418]
80007a32:	40 0c       	lddsp	r12,sp[0x0]
80007a34:	f0 1f 02 48 	mcall	80008354 <main+0xd88>
80007a38:	c0 61       	brne	80007a44 <main+0x478>
80007a3a:	30 59       	mov	r9,5
80007a3c:	fe f8 08 f0 	ld.w	r8,pc[2288]
80007a40:	b0 89       	st.b	r8[0x0],r9
80007a42:	c1 f8       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_FORMAT  )) cmd_type = CMD_FORMAT;
80007a44:	fe fb 09 60 	ld.w	r11,pc[2400]
80007a48:	40 0c       	lddsp	r12,sp[0x0]
80007a4a:	f0 1f 02 43 	mcall	80008354 <main+0xd88>
80007a4e:	c0 61       	brne	80007a5a <main+0x48e>
80007a50:	31 09       	mov	r9,16
80007a52:	fe f8 08 da 	ld.w	r8,pc[2266]
80007a56:	b0 89       	st.b	r8[0x0],r9
80007a58:	c1 48       	rjmp	80007a80 <main+0x4b4>
    else if (!strcmp(cmd_str, STR_FORMAT32)) cmd_type = CMD_FORMAT32;
80007a5a:	fe fb 09 4e 	ld.w	r11,pc[2382]
80007a5e:	40 0c       	lddsp	r12,sp[0x0]
80007a60:	f0 1f 02 3d 	mcall	80008354 <main+0xd88>
80007a64:	c0 61       	brne	80007a70 <main+0x4a4>
80007a66:	31 29       	mov	r9,18
80007a68:	fe f8 08 c4 	ld.w	r8,pc[2244]
80007a6c:	b0 89       	st.b	r8[0x0],r9
80007a6e:	c0 98       	rjmp	80007a80 <main+0x4b4>
    else
    {
      // error : command not found
      print(SHL_USART, MSG_ER_CMD_NOT_FOUND);
80007a70:	fe fb 09 3c 	ld.w	r11,pc[2364]
80007a74:	fe 7c 18 00 	mov	r12,-59392
80007a78:	f0 1f 02 22 	mcall	80008300 <main+0xd34>
      cmd = false;
80007a7c:	30 08       	mov	r8,0
80007a7e:	ae 88       	st.b	r7[0x0],r8
    }
    // restore last byte
    cmd_str[i] = j;
80007a80:	e6 05 0b 04 	st.b	r3[r5],r4
80007a84:	c0 28       	rjmp	80007a88 <main+0x4bc>
80007a86:	30 06       	mov	r6,0
  }
  // if command isn't found, display prompt
  if (!cmd)
80007a88:	0f 89       	ld.ub	r9,r7[0x0]
80007a8a:	30 08       	mov	r8,0
80007a8c:	f0 09 18 00 	cp.b	r9,r8
80007a90:	c0 81       	brne	80007aa0 <main+0x4d4>
  {
    print(SHL_USART, MSG_PROMPT);
80007a92:	fe fb 08 92 	ld.w	r11,pc[2194]
80007a96:	fe 7c 18 00 	mov	r12,-59392
80007a9a:	f0 1f 02 1a 	mcall	80008300 <main+0xd34>
80007a9e:	c9 b8       	rjmp	80007bd4 <main+0x608>
    return;
  }

  // Get first arg (if any).
  if (++i < i_str)
80007aa0:	ec c8 ff ff 	sub	r8,r6,-1
80007aa4:	5c 58       	castu.b	r8
80007aa6:	fe f9 08 a2 	ld.w	r9,pc[2210]
80007aaa:	13 8b       	ld.ub	r11,r9[0x0]
80007aac:	f6 08 18 00 	cp.b	r8,r11
80007ab0:	c4 72       	brcc	80007b3e <main+0x572>
  {
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
80007ab2:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007ab6:	32 29       	mov	r9,34
80007ab8:	f2 0a 18 00 	cp.b	r10,r9
80007abc:	c0 60       	breq	80007ac8 <main+0x4fc>
      i++;
    }
    // get the arg directly
    else
    {
      for(; cmd_str[i] != ' ' && i < i_str; i++, j++)
80007abe:	e4 0a 18 00 	cp.b	r10,r2
80007ac2:	c2 71       	brne	80007b10 <main+0x544>
80007ac4:	30 09       	mov	r9,0
80007ac6:	c3 78       	rjmp	80007b34 <main+0x568>
  {
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
80007ac8:	2f f8       	sub	r8,-1
80007aca:	5c 58       	castu.b	r8
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
80007acc:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007ad0:	32 2e       	mov	lr,34
80007ad2:	fc 0a 18 00 	cp.b	r10,lr
80007ad6:	c1 90       	breq	80007b08 <main+0x53c>
80007ad8:	f0 0b 18 00 	cp.b	r11,r8
80007adc:	e0 88 00 16 	brls	80007b08 <main+0x53c>
80007ae0:	30 09       	mov	r9,0
      {
        par_str1[j] = cmd_str[i];
80007ae2:	fe fc 08 6a 	ld.w	r12,pc[2154]
80007ae6:	f8 09 0b 0a 	st.b	r12[r9],r10
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
80007aea:	2f f8       	sub	r8,-1
80007aec:	5c 58       	castu.b	r8
80007aee:	2f f9       	sub	r9,-1
80007af0:	5c 59       	castu.b	r9
80007af2:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007af6:	32 2e       	mov	lr,34
80007af8:	fc 0a 18 00 	cp.b	r10,lr
80007afc:	c0 70       	breq	80007b0a <main+0x53e>
80007afe:	f0 0b 18 00 	cp.b	r11,r8
80007b02:	fe 9b ff f2 	brhi	80007ae6 <main+0x51a>
80007b06:	c0 28       	rjmp	80007b0a <main+0x53e>
80007b08:	30 09       	mov	r9,0
      {
        par_str1[j] = cmd_str[i];
      }
      i++;
80007b0a:	2f f8       	sub	r8,-1
80007b0c:	5c 58       	castu.b	r8
80007b0e:	c1 38       	rjmp	80007b34 <main+0x568>
80007b10:	30 09       	mov	r9,0
    // get the arg directly
    else
    {
      for(; cmd_str[i] != ' ' && i < i_str; i++, j++)
      {
        par_str1[j] = cmd_str[i];
80007b12:	fe fc 08 3a 	ld.w	r12,pc[2106]
80007b16:	f8 09 0b 0a 	st.b	r12[r9],r10
      i++;
    }
    // get the arg directly
    else
    {
      for(; cmd_str[i] != ' ' && i < i_str; i++, j++)
80007b1a:	2f f8       	sub	r8,-1
80007b1c:	5c 58       	castu.b	r8
80007b1e:	2f f9       	sub	r9,-1
80007b20:	5c 59       	castu.b	r9
80007b22:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007b26:	e4 0a 18 00 	cp.b	r10,r2
80007b2a:	c0 50       	breq	80007b34 <main+0x568>
80007b2c:	f0 0b 18 00 	cp.b	r11,r8
80007b30:	fe 9b ff f3 	brhi	80007b16 <main+0x54a>
      {
        par_str1[j] = cmd_str[i];
      }
    }
    // null terminated arg
    par_str1[j] = '\0';
80007b34:	30 0b       	mov	r11,0
80007b36:	fe fa 08 16 	ld.w	r10,pc[2070]
80007b3a:	f4 09 0b 0b 	st.b	r10[r9],r11
  }

  // Get second arg (if any).
  if (++i < i_str)
80007b3e:	2f f8       	sub	r8,-1
80007b40:	5c 58       	castu.b	r8
80007b42:	fe f9 08 06 	ld.w	r9,pc[2054]
80007b46:	13 8b       	ld.ub	r11,r9[0x0]
80007b48:	f6 08 18 00 	cp.b	r8,r11
80007b4c:	c4 42       	brcc	80007bd4 <main+0x608>
  {
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
80007b4e:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007b52:	32 2c       	mov	r12,34
80007b54:	f8 0a 18 00 	cp.b	r10,r12
80007b58:	c0 50       	breq	80007b62 <main+0x596>
      i++;
    }
    // get the arg directly
    else
    {
      for (; cmd_str[i] != ' ' && i < i_str; i++, j++)
80007b5a:	e4 0a 18 00 	cp.b	r10,r2
80007b5e:	c2 21       	brne	80007ba2 <main+0x5d6>
80007b60:	c3 48       	rjmp	80007bc8 <main+0x5fc>
  {
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
80007b62:	2f f8       	sub	r8,-1
80007b64:	5c 58       	castu.b	r8
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
80007b66:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007b6a:	32 29       	mov	r9,34
80007b6c:	f2 0a 18 00 	cp.b	r10,r9
80007b70:	c2 c0       	breq	80007bc8 <main+0x5fc>
80007b72:	f0 0b 18 00 	cp.b	r11,r8
80007b76:	e0 88 00 29 	brls	80007bc8 <main+0x5fc>
80007b7a:	30 09       	mov	r9,0
      {
        par_str2[j] = cmd_str[i];
80007b7c:	fe fe 07 c0 	ld.w	lr,pc[1984]
80007b80:	fc 09 0b 0a 	st.b	lr[r9],r10
    j = 0;
    // remove " if used
    if (cmd_str[i] == '"')
    {
      i++;
      for (; cmd_str[i] != '"' && i < i_str; i++, j++)
80007b84:	2f f8       	sub	r8,-1
80007b86:	5c 58       	castu.b	r8
80007b88:	2f f9       	sub	r9,-1
80007b8a:	5c 59       	castu.b	r9
80007b8c:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007b90:	32 2c       	mov	r12,34
80007b92:	f8 0a 18 00 	cp.b	r10,r12
80007b96:	c1 a0       	breq	80007bca <main+0x5fe>
80007b98:	f0 0b 18 00 	cp.b	r11,r8
80007b9c:	fe 9b ff f0 	brhi	80007b7c <main+0x5b0>
80007ba0:	c1 58       	rjmp	80007bca <main+0x5fe>
80007ba2:	30 09       	mov	r9,0
    // get the arg directly
    else
    {
      for (; cmd_str[i] != ' ' && i < i_str; i++, j++)
      {
        par_str2[j] = cmd_str[i];
80007ba4:	fe fe 07 98 	ld.w	lr,pc[1944]
80007ba8:	fc 09 0b 0a 	st.b	lr[r9],r10
      i++;
    }
    // get the arg directly
    else
    {
      for (; cmd_str[i] != ' ' && i < i_str; i++, j++)
80007bac:	2f f8       	sub	r8,-1
80007bae:	5c 58       	castu.b	r8
80007bb0:	2f f9       	sub	r9,-1
80007bb2:	5c 59       	castu.b	r9
80007bb4:	e6 08 07 0a 	ld.ub	r10,r3[r8]
80007bb8:	e4 0a 18 00 	cp.b	r10,r2
80007bbc:	c0 70       	breq	80007bca <main+0x5fe>
80007bbe:	f0 0b 18 00 	cp.b	r11,r8
80007bc2:	fe 9b ff f1 	brhi	80007ba4 <main+0x5d8>
80007bc6:	c0 28       	rjmp	80007bca <main+0x5fe>
80007bc8:	30 09       	mov	r9,0
      {
        par_str2[j] = cmd_str[i];
      }
    }
    // null terminated arg
    par_str2[j] = '\0';
80007bca:	30 08       	mov	r8,0
80007bcc:	fe fc 07 70 	ld.w	r12,pc[1904]
80007bd0:	f8 09 0b 08 	st.b	r12[r9],r8
      print(SHL_USART, CRLF);
      // Add NUL char.
      cmd_str[i_str] = '\0';
      // Decode the command.
      fat_example_parse_cmd();
      i_str = 0;
80007bd4:	30 09       	mov	r9,0
80007bd6:	fe f8 07 72 	ld.w	r8,pc[1906]
80007bda:	b0 89       	st.b	r8[0x0],r9
80007bdc:	fe 9f fd f2 	bral	800077c0 <main+0x1f4>
      break;
    // ^c abort cmd.
    case ABORT_CHAR:
      // Reset command length.
      i_str = 0;
80007be0:	30 09       	mov	r9,0
80007be2:	fe f8 07 66 	ld.w	r8,pc[1894]
80007be6:	b0 89       	st.b	r8[0x0],r9
      // Display prompt.
      print(SHL_USART, "\r\n" MSG_PROMPT);
80007be8:	fe fb 07 c8 	ld.w	r11,pc[1992]
80007bec:	fe 7c 18 00 	mov	r12,-59392
80007bf0:	f0 1f 01 c4 	mcall	80008300 <main+0xd34>
80007bf4:	fe 9f fd e6 	bral	800077c0 <main+0x1f4>
      break;
    // Backspace.
    case BKSPACE_CHAR:
      if (i_str > 0)
80007bf8:	fe f8 07 50 	ld.w	r8,pc[1872]
80007bfc:	11 89       	ld.ub	r9,r8[0x0]
80007bfe:	30 08       	mov	r8,0
80007c00:	f0 09 18 00 	cp.b	r9,r8
80007c04:	fe 90 fd de 	breq	800077c0 <main+0x1f4>
      {
        // Replace last char.
        print(SHL_USART, "\b \b");
80007c08:	fe fb 07 ac 	ld.w	r11,pc[1964]
80007c0c:	fe 7c 18 00 	mov	r12,-59392
80007c10:	f0 1f 01 bc 	mcall	80008300 <main+0xd34>
        // Decraese command length.
        i_str--;
80007c14:	fe f8 07 34 	ld.w	r8,pc[1844]
80007c18:	11 89       	ld.ub	r9,r8[0x0]
80007c1a:	20 19       	sub	r9,1
80007c1c:	b0 89       	st.b	r8[0x0],r9
80007c1e:	fe 9f fd d1 	bral	800077c0 <main+0x1f4>
      }
      break;
    default:
      // Echo.
      print_char(SHL_USART, c);
80007c22:	fe 7c 18 00 	mov	r12,-59392
80007c26:	f0 1f 01 e5 	mcall	800083b8 <main+0xdec>
      // Append to cmd line.
      cmd_str[i_str++] = c;
80007c2a:	fe f8 07 1e 	ld.w	r8,pc[1822]
80007c2e:	11 89       	ld.ub	r9,r8[0x0]
80007c30:	40 9a       	lddsp	r10,sp[0x24]
80007c32:	e6 09 0b 0a 	st.b	r3[r9],r10
80007c36:	2f f9       	sub	r9,-1
80007c38:	b0 89       	st.b	r8[0x0],r9
80007c3a:	fe 9f fd c3 	bral	800077c0 <main+0x1f4>
      fat_example_build_cmd();
    }
    // perform the command
    else
    {
      switch (cmd_type)
80007c3e:	fe f8 06 ee 	ld.w	r8,pc[1774]
80007c42:	11 88       	ld.ub	r8,r8[0x0]
80007c44:	20 18       	sub	r8,1
80007c46:	59 18       	cp.w	r8,17
80007c48:	e0 8b 03 1d 	brhi	80008282 <main+0xcb6>
80007c4c:	fe f9 07 70 	ld.w	r9,pc[1904]
80007c50:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
      {
      // this is a "mount" command
      case CMD_MOUNT:
        // Get drive number
        i = par_str1[0] - 'a';
80007c54:	fe f8 06 f8 	ld.w	r8,pc[1784]
80007c58:	11 86       	ld.ub	r6,r8[0x0]
80007c5a:	26 16       	sub	r6,97
80007c5c:	5c 56       	castu.b	r6
        // If drive doesn't exist
        if (i >= nav_drive_nb())
80007c5e:	f0 1f 01 d9 	mcall	800083c0 <main+0xdf4>
80007c62:	f8 06 18 00 	cp.b	r6,r12
80007c66:	c0 93       	brcs	80007c78 <main+0x6ac>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_DRIVE);
80007c68:	fe fb 07 5c 	ld.w	r11,pc[1884]
80007c6c:	fe 7c 18 00 	mov	r12,-59392
80007c70:	f0 1f 01 a4 	mcall	80008300 <main+0xd34>
80007c74:	e0 8f 03 0c 	bral	8000828c <main+0xcc0>
        }
        else
        {
          // Reset all navigators.
          nav_reset();
80007c78:	f0 1f 01 af 	mcall	80008334 <main+0xd68>
          // Select the desired drive.
          nav_drive_set(i);
80007c7c:	0c 9c       	mov	r12,r6
80007c7e:	f0 1f 01 d3 	mcall	800083c8 <main+0xdfc>
          // Try to mount it.
          if (!nav_partition_mount())
80007c82:	f0 1f 01 d3 	mcall	800083cc <main+0xe00>
80007c86:	c0 d1       	brne	80007ca0 <main+0x6d4>
          {
            // Display error message.
            print(SHL_USART, MSG_ER_MOUNT);
80007c88:	fe fb 07 48 	ld.w	r11,pc[1864]
80007c8c:	fe 7c 18 00 	mov	r12,-59392
80007c90:	f0 1f 01 9c 	mcall	80008300 <main+0xd34>
            // Retry to mount at next "ls".
            first_ls = true;
80007c94:	30 19       	mov	r9,1
80007c96:	fe f8 06 9a 	ld.w	r8,pc[1690]
80007c9a:	b0 89       	st.b	r8[0x0],r9
80007c9c:	e0 8f 02 f8 	bral	8000828c <main+0xcc0>
          }
          else
          {
            // Clear flag, no need to remount at next "ls".
            first_ls = false;
80007ca0:	30 09       	mov	r9,0
80007ca2:	fe f8 06 8e 	ld.w	r8,pc[1678]
80007ca6:	b0 89       	st.b	r8[0x0],r9
80007ca8:	e0 8f 02 f2 	bral	8000828c <main+0xcc0>
        }
        break;
      // this is a "fat" information command
      case CMD_FAT:
        // Regarding the partition type :
        switch (nav_partition_type())
80007cac:	f0 1f 01 ca 	mcall	800083d4 <main+0xe08>
      cmd = false;
      // Display prompt.
      print(SHL_USART, MSG_PROMPT);
    }
  }
}
80007cb0:	f8 c8 00 01 	sub	r8,r12,1
80007cb4:	5c 58       	castu.b	r8
80007cb6:	30 29       	mov	r9,2
80007cb8:	f2 08 18 00 	cp.b	r8,r9
80007cbc:	e0 88 00 05 	brls	80007cc6 <main+0x6fa>
80007cc0:	fe fb 07 18 	ld.w	r11,pc[1816]
80007cc4:	c0 58       	rjmp	80007cce <main+0x702>
80007cc6:	fe f9 07 16 	ld.w	r9,pc[1814]
80007cca:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
        default:
          // Display error message.
          part_type = "Drive uses an unknown partition type\r\n";
          break;
        }
        print(SHL_USART, part_type);
80007cce:	fe 7c 18 00 	mov	r12,-59392
80007cd2:	f0 1f 01 8c 	mcall	80008300 <main+0xd34>
        break;
80007cd6:	e0 8f 02 db 	bral	8000828c <main+0xcc0>
      // this is a "ls" command
      case CMD_LS:
        // Check if params are correct or mount needed.
        if (nav_drive_get() >= nav_drive_nb() || first_ls)
80007cda:	f0 1f 01 c2 	mcall	800083e0 <main+0xe14>
80007cde:	18 96       	mov	r6,r12
80007ce0:	f0 1f 01 b8 	mcall	800083c0 <main+0xdf4>
80007ce4:	f8 06 18 00 	cp.b	r6,r12
80007ce8:	c0 82       	brcc	80007cf8 <main+0x72c>
80007cea:	fe f8 06 46 	ld.w	r8,pc[1606]
80007cee:	11 89       	ld.ub	r9,r8[0x0]
80007cf0:	30 08       	mov	r8,0
80007cf2:	f0 09 18 00 	cp.b	r9,r8
80007cf6:	c0 f0       	breq	80007d14 <main+0x748>
        {
          first_ls = false;
80007cf8:	30 09       	mov	r9,0
80007cfa:	fe f8 06 36 	ld.w	r8,pc[1590]
80007cfe:	b0 89       	st.b	r8[0x0],r9
          // Reset navigators .
          nav_reset();
80007d00:	f0 1f 01 8d 	mcall	80008334 <main+0xd68>
          // Use the last drive available as default.
          nav_drive_set(nav_drive_nb() - 1);
80007d04:	f0 1f 01 af 	mcall	800083c0 <main+0xdf4>
80007d08:	20 1c       	sub	r12,1
80007d0a:	5c 5c       	castu.b	r12
80007d0c:	f0 1f 01 af 	mcall	800083c8 <main+0xdfc>
          // Mount it.
          nav_partition_mount();
80007d10:	f0 1f 01 af 	mcall	800083cc <main+0xe00>
        }
        // Get the volume name
        nav_dir_name((FS_STRING)str_buff, MAX_FILE_PATH_LENGTH);
80007d14:	fe f6 06 d0 	ld.w	r6,pc[1744]
80007d18:	31 eb       	mov	r11,30
80007d1a:	0c 9c       	mov	r12,r6
80007d1c:	f0 1f 01 b3 	mcall	800083e8 <main+0xe1c>
        // Display general informations (drive letter and current path)
        print(SHL_USART, "\r\nVolume is ");
80007d20:	fe fb 06 cc 	ld.w	r11,pc[1740]
80007d24:	fe 7c 18 00 	mov	r12,-59392
80007d28:	f0 1f 01 76 	mcall	80008300 <main+0xd34>
        print_char(SHL_USART, 'A' + nav_drive_get());
80007d2c:	f0 1f 01 ad 	mcall	800083e0 <main+0xe14>
80007d30:	f8 cb ff bf 	sub	r11,r12,-65
80007d34:	fe 7c 18 00 	mov	r12,-59392
80007d38:	f0 1f 01 a0 	mcall	800083b8 <main+0xdec>
        print(SHL_USART, ":\r\nDir name is ");
80007d3c:	fe fb 06 b4 	ld.w	r11,pc[1716]
80007d40:	fe 7c 18 00 	mov	r12,-59392
80007d44:	f0 1f 01 6f 	mcall	80008300 <main+0xd34>
        print(SHL_USART, str_buff);
80007d48:	0c 9b       	mov	r11,r6
80007d4a:	fe 7c 18 00 	mov	r12,-59392
80007d4e:	f0 1f 01 6d 	mcall	80008300 <main+0xd34>
        print(SHL_USART, CRLF);
80007d52:	fe fb 05 f2 	ld.w	r11,pc[1522]
80007d56:	fe 7c 18 00 	mov	r12,-59392
80007d5a:	f0 1f 01 6a 	mcall	80008300 <main+0xd34>
        // Try to sort items by folders
        if (!nav_filelist_first(FS_DIR))
80007d5e:	30 0c       	mov	r12,0
80007d60:	f0 1f 01 a5 	mcall	800083f4 <main+0xe28>
80007d64:	c0 41       	brne	80007d6c <main+0x7a0>
        {
          // Sort items by files
          nav_filelist_first(FS_FILE);
80007d66:	30 1c       	mov	r12,1
80007d68:	f0 1f 01 a3 	mcall	800083f4 <main+0xe28>
        }
        // Display items informations
        print(SHL_USART, "\tSize (Bytes)\tName\r\n");
80007d6c:	fe fb 06 8c 	ld.w	r11,pc[1676]
80007d70:	fe 7c 18 00 	mov	r12,-59392
80007d74:	f0 1f 01 63 	mcall	80008300 <main+0xd34>
        // reset filelist before to start the listing
        nav_filelist_reset();
80007d78:	f0 1f 01 a1 	mcall	800083fc <main+0xe30>
        // While an item can be found
        while (nav_filelist_set(0, FS_FIND_NEXT))
80007d7c:	30 15       	mov	r5,1
80007d7e:	30 01       	mov	r1,0
        {
          // Get and display current item informations
          print(SHL_USART, (nav_file_isdir()) ? "Dir\t" : "   \t");
80007d80:	fe f0 06 80 	ld.w	r0,pc[1664]
80007d84:	fe 76 18 00 	mov	r6,-59392
          print_ulong(SHL_USART, nav_file_lgt());
          print(SHL_USART, "\t\t");
          nav_file_name((FS_STRING)str_buff, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
80007d88:	fe f4 06 5c 	ld.w	r4,pc[1628]
        // Display items informations
        print(SHL_USART, "\tSize (Bytes)\tName\r\n");
        // reset filelist before to start the listing
        nav_filelist_reset();
        // While an item can be found
        while (nav_filelist_set(0, FS_FIND_NEXT))
80007d8c:	c2 58       	rjmp	80007dd6 <main+0x80a>
        {
          // Get and display current item informations
          print(SHL_USART, (nav_file_isdir()) ? "Dir\t" : "   \t");
80007d8e:	f0 1f 01 9e 	mcall	80008404 <main+0xe38>
80007d92:	fe fb 06 76 	ld.w	r11,pc[1654]
80007d96:	58 0c       	cp.w	r12,0
80007d98:	e0 0b 17 10 	movne	r11,r0
80007d9c:	0c 9c       	mov	r12,r6
80007d9e:	f0 1f 01 59 	mcall	80008300 <main+0xd34>
          print_ulong(SHL_USART, nav_file_lgt());
80007da2:	f0 1f 01 9b 	mcall	8000840c <main+0xe40>
80007da6:	18 9b       	mov	r11,r12
80007da8:	0c 9c       	mov	r12,r6
80007daa:	f0 1f 01 5a 	mcall	80008310 <main+0xd44>
          print(SHL_USART, "\t\t");
80007dae:	fe fb 06 62 	ld.w	r11,pc[1634]
80007db2:	0c 9c       	mov	r12,r6
80007db4:	f0 1f 01 53 	mcall	80008300 <main+0xd34>
          nav_file_name((FS_STRING)str_buff, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
80007db8:	0a 99       	mov	r9,r5
80007dba:	0a 9a       	mov	r10,r5
80007dbc:	31 eb       	mov	r11,30
80007dbe:	08 9c       	mov	r12,r4
80007dc0:	f0 1f 01 95 	mcall	80008414 <main+0xe48>
          print(SHL_USART, str_buff);
80007dc4:	08 9b       	mov	r11,r4
80007dc6:	0c 9c       	mov	r12,r6
80007dc8:	f0 1f 01 4e 	mcall	80008300 <main+0xd34>
          print(SHL_USART, CRLF);
80007dcc:	fe fb 05 78 	ld.w	r11,pc[1400]
80007dd0:	0c 9c       	mov	r12,r6
80007dd2:	f0 1f 01 4c 	mcall	80008300 <main+0xd34>
        // Display items informations
        print(SHL_USART, "\tSize (Bytes)\tName\r\n");
        // reset filelist before to start the listing
        nav_filelist_reset();
        // While an item can be found
        while (nav_filelist_set(0, FS_FIND_NEXT))
80007dd6:	0a 9b       	mov	r11,r5
80007dd8:	02 9c       	mov	r12,r1
80007dda:	f0 1f 01 90 	mcall	80008418 <main+0xe4c>
80007dde:	cd 81       	brne	80007d8e <main+0x7c2>
          nav_file_name((FS_STRING)str_buff, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
          print(SHL_USART, str_buff);
          print(SHL_USART, CRLF);
        }
        // Display the files number
        print_ulong(SHL_USART, nav_filelist_nb(FS_FILE));
80007de0:	30 1c       	mov	r12,1
80007de2:	f0 1f 01 8f 	mcall	8000841c <main+0xe50>
80007de6:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
80007dea:	fe 7c 18 00 	mov	r12,-59392
80007dee:	f0 1f 01 49 	mcall	80008310 <main+0xd44>
        print(SHL_USART, "  Files\r\n");
80007df2:	fe fb 06 2e 	ld.w	r11,pc[1582]
80007df6:	fe 7c 18 00 	mov	r12,-59392
80007dfa:	f0 1f 01 42 	mcall	80008300 <main+0xd34>
        // Display the folders number
        print_ulong(SHL_USART, nav_filelist_nb(FS_DIR));
80007dfe:	30 0c       	mov	r12,0
80007e00:	f0 1f 01 87 	mcall	8000841c <main+0xe50>
80007e04:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
80007e08:	fe 7c 18 00 	mov	r12,-59392
80007e0c:	f0 1f 01 41 	mcall	80008310 <main+0xd44>
        print(SHL_USART, "  Dir\r\n");
80007e10:	fe fb 06 14 	ld.w	r11,pc[1556]
80007e14:	fe 7c 18 00 	mov	r12,-59392
80007e18:	f0 1f 01 3a 	mcall	80008300 <main+0xd34>
        break;
80007e1c:	e0 8f 02 38 	bral	8000828c <main+0xcc0>
      // this is a "cd" command
      case CMD_CD:
        // get arg1 length
        i = strlen(par_str1);
80007e20:	fe f6 05 2c 	ld.w	r6,pc[1324]
80007e24:	0c 9c       	mov	r12,r6
80007e26:	f0 1f 01 81 	mcall	80008428 <main+0xe5c>
        // Append the '/' char for the nav_setcwd to enter the chosen directory.
        if (par_str1[i - 1] != '/')
80007e2a:	5c 5c       	castu.b	r12
80007e2c:	18 06       	add	r6,r12
80007e2e:	ed 39 ff ff 	ld.ub	r9,r6[-1]
80007e32:	32 f8       	mov	r8,47
80007e34:	f0 09 18 00 	cp.b	r9,r8
80007e38:	c0 80       	breq	80007e48 <main+0x87c>
        {
          par_str1[i] = '/';
80007e3a:	fe f8 05 12 	ld.w	r8,pc[1298]
80007e3e:	32 f9       	mov	r9,47
80007e40:	f0 0c 0b 09 	st.b	r8[r12],r9
          par_str1[i + 1] = '\0';
80007e44:	30 09       	mov	r9,0
80007e46:	ac 99       	st.b	r6[0x1],r9
        }
        // Try to to set navigator on arg1 folder.
        if (!nav_setcwd((FS_STRING)par_str1, true, false))
80007e48:	30 0a       	mov	r10,0
80007e4a:	30 1b       	mov	r11,1
80007e4c:	fe fc 05 00 	ld.w	r12,pc[1280]
80007e50:	f0 1f 01 77 	mcall	8000842c <main+0xe60>
80007e54:	e0 81 02 1c 	brne	8000828c <main+0xcc0>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_UNKNOWN_FILE);
80007e58:	fe fb 05 d8 	ld.w	r11,pc[1496]
80007e5c:	fe 7c 18 00 	mov	r12,-59392
80007e60:	f0 1f 01 28 	mcall	80008300 <main+0xd34>
80007e64:	e0 8f 02 14 	bral	8000828c <main+0xcc0>
        }
        break;
      // this is a "cat" command
      case CMD_CAT:
        // Try to to set navigator on arg1 file.
        if (!nav_setcwd((FS_STRING)par_str1, true, false))
80007e68:	30 0a       	mov	r10,0
80007e6a:	30 1b       	mov	r11,1
80007e6c:	fe fc 04 e0 	ld.w	r12,pc[1248]
80007e70:	f0 1f 01 6f 	mcall	8000842c <main+0xe60>
80007e74:	c0 91       	brne	80007e86 <main+0x8ba>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_UNKNOWN_FILE);
80007e76:	fe fb 05 ba 	ld.w	r11,pc[1466]
80007e7a:	fe 7c 18 00 	mov	r12,-59392
80007e7e:	f0 1f 01 21 	mcall	80008300 <main+0xd34>
80007e82:	e0 8f 02 05 	bral	8000828c <main+0xcc0>
        }
        else
        {
          // Open the file.
          file_open(FOPEN_MODE_R);
80007e86:	30 9c       	mov	r12,9
80007e88:	f0 1f 01 6b 	mcall	80008434 <main+0xe68>
          // While the end isn't reached
          while (!file_eof())
          {
            // Display next char from file.
            print_char(SHL_USART, file_getc());
80007e8c:	fe 76 18 00 	mov	r6,-59392
        else
        {
          // Open the file.
          file_open(FOPEN_MODE_R);
          // While the end isn't reached
          while (!file_eof())
80007e90:	c0 88       	rjmp	80007ea0 <main+0x8d4>
          {
            // Display next char from file.
            print_char(SHL_USART, file_getc());
80007e92:	f0 1f 01 6a 	mcall	80008438 <main+0xe6c>
80007e96:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
80007e9a:	0c 9c       	mov	r12,r6
80007e9c:	f0 1f 01 47 	mcall	800083b8 <main+0xdec>
        else
        {
          // Open the file.
          file_open(FOPEN_MODE_R);
          // While the end isn't reached
          while (!file_eof())
80007ea0:	f0 1f 01 67 	mcall	8000843c <main+0xe70>
80007ea4:	cf 70       	breq	80007e92 <main+0x8c6>
          {
            // Display next char from file.
            print_char(SHL_USART, file_getc());
          }
          // Close the file.
          file_close();
80007ea6:	f0 1f 01 67 	mcall	80008440 <main+0xe74>
          print(SHL_USART, CRLF);
80007eaa:	fe fb 04 9a 	ld.w	r11,pc[1178]
80007eae:	fe 7c 18 00 	mov	r12,-59392
80007eb2:	f0 1f 01 14 	mcall	80008300 <main+0xd34>
80007eb6:	e0 8f 01 eb 	bral	8000828c <main+0xcc0>
        }
        break;
      // this is a "help" command
      case CMD_HELP:
        // Display help on USART
        print(SHL_USART, MSG_HELP);
80007eba:	fe fb 05 8a 	ld.w	r11,pc[1418]
80007ebe:	fe 7c 18 00 	mov	r12,-59392
80007ec2:	f0 1f 01 10 	mcall	80008300 <main+0xd34>
        break;
80007ec6:	e0 8f 01 e3 	bral	8000828c <main+0xcc0>
      // this is a "mkdir" command
      case CMD_MKDIR:
        // Create the folder;
        nav_dir_make((FS_STRING)par_str1);
80007eca:	fe fc 04 82 	ld.w	r12,pc[1154]
80007ece:	f0 1f 01 5f 	mcall	80008448 <main+0xe7c>
        break;
80007ed2:	e0 8f 01 dd 	bral	8000828c <main+0xcc0>
      // this is a "touch" command
      case CMD_TOUCH:
        // Create the file.
        nav_file_create((FS_STRING)par_str1);
80007ed6:	fe fc 04 76 	ld.w	r12,pc[1142]
80007eda:	f0 1f 01 5d 	mcall	8000844c <main+0xe80>
        break;
80007ede:	e0 8f 01 d7 	bral	8000828c <main+0xcc0>
      // this is a "rm" command
      case CMD_RM:
        // Save current nav position.
        sav_index = nav_getindex();
80007ee2:	fa c6 ff f8 	sub	r6,sp,-8
80007ee6:	0c 9c       	mov	r12,r6
80007ee8:	f0 1f 01 5a 	mcall	80008450 <main+0xe84>
80007eec:	fa c8 ff d4 	sub	r8,sp,-44
80007ef0:	ec ea 00 00 	ld.d	r10,r6[0]
80007ef4:	f0 eb 00 00 	st.d	r8[0],r10
80007ef8:	6c 29       	ld.w	r9,r6[0x8]
80007efa:	91 29       	st.w	r8[0x8],r9
        // Try to to set navigator on arg1 folder or file.
        if (!nav_setcwd((FS_STRING)par_str1, true, false))
80007efc:	30 0a       	mov	r10,0
80007efe:	30 1b       	mov	r11,1
80007f00:	fe fc 04 4c 	ld.w	r12,pc[1100]
80007f04:	f0 1f 01 4a 	mcall	8000842c <main+0xe60>
80007f08:	c0 81       	brne	80007f18 <main+0x94c>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_UNKNOWN_FILE);
80007f0a:	fe fb 05 26 	ld.w	r11,pc[1318]
80007f0e:	fe 7c 18 00 	mov	r12,-59392
80007f12:	f0 1f 00 fc 	mcall	80008300 <main+0xd34>
80007f16:	c0 b8       	rjmp	80007f2c <main+0x960>
        }
        // Try to delete the file
        else if (!nav_file_del(false))
80007f18:	30 0c       	mov	r12,0
80007f1a:	f0 1f 01 4f 	mcall	80008454 <main+0xe88>
80007f1e:	c0 71       	brne	80007f2c <main+0x960>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_RM);
80007f20:	fe fb 05 38 	ld.w	r11,pc[1336]
80007f24:	fe 7c 18 00 	mov	r12,-59392
80007f28:	f0 1f 00 f6 	mcall	80008300 <main+0xd34>
        }
        // Restore nav position.
        nav_gotoindex(&sav_index);
80007f2c:	fa cc ff d4 	sub	r12,sp,-44
80007f30:	f0 1f 01 4b 	mcall	8000845c <main+0xe90>
        break;
80007f34:	e0 8f 01 ac 	bral	8000828c <main+0xcc0>
      // this is a "append"  command: Append a char to selected file.
      case CMD_APPEND:
        // Try to to set navigator on arg1 file.
        if (!nav_setcwd((FS_STRING)par_str1, true, true))
80007f38:	30 1a       	mov	r10,1
80007f3a:	14 9b       	mov	r11,r10
80007f3c:	fe fc 04 10 	ld.w	r12,pc[1040]
80007f40:	f0 1f 01 3b 	mcall	8000842c <main+0xe60>
80007f44:	c0 91       	brne	80007f56 <main+0x98a>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_UNKNOWN_FILE);
80007f46:	fe fb 04 ea 	ld.w	r11,pc[1258]
80007f4a:	fe 7c 18 00 	mov	r12,-59392
80007f4e:	f0 1f 00 ed 	mcall	80008300 <main+0xd34>
80007f52:	e0 8f 01 9d 	bral	8000828c <main+0xcc0>
        }
        else
        {
          // File exists, open it in append mode
          file_open(FOPEN_MODE_APPEND);
80007f56:	30 2c       	mov	r12,2
80007f58:	f0 1f 01 37 	mcall	80008434 <main+0xe68>
 */
static void fat_example_append_file(void)
{
  int c;

  print(SHL_USART, MSG_APPEND_WELCOME);
80007f5c:	fe fb 05 04 	ld.w	r11,pc[1284]
80007f60:	fe 7c 18 00 	mov	r12,-59392
80007f64:	f0 1f 00 e7 	mcall	80008300 <main+0xd34>
80007f68:	fe 76 18 00 	mov	r6,-59392
80007f6c:	e0 65 01 00 	mov	r5,256
  // Wait for ^q to quit.
  while (true)
  {
    // If something new in the USART
    usart_reset_status(SHL_USART);
    if (usart_read_char(SHL_USART, &c) == USART_SUCCESS)
80007f70:	fa c4 ff dc 	sub	r4,sp,-36
80007f74:	8d 05       	st.w	r6[0x0],r5
80007f76:	08 9b       	mov	r11,r4
80007f78:	0c 9c       	mov	r12,r6
80007f7a:	f0 1f 00 f2 	mcall	80008340 <main+0xd74>
80007f7e:	cf b1       	brne	80007f74 <main+0x9a8>
    {
      // if this is not the quit char
      if (c != QUIT_APPEND)
80007f80:	40 9b       	lddsp	r11,sp[0x24]
80007f82:	59 1b       	cp.w	r11,17
80007f84:	c0 90       	breq	80007f96 <main+0x9ca>
      {
        // Echo the char.
        print_char(SHL_USART, c);
80007f86:	0c 9c       	mov	r12,r6
80007f88:	f0 1f 01 0c 	mcall	800083b8 <main+0xdec>
        // Add it to the file.
        file_putc(c);
80007f8c:	fb 3c 00 27 	ld.ub	r12,sp[39]
80007f90:	f0 1f 01 35 	mcall	80008464 <main+0xe98>
80007f94:	cf 0b       	rjmp	80007f74 <main+0x9a8>
          // File exists, open it in append mode
          file_open(FOPEN_MODE_APPEND);
          // Append from USART
          fat_example_append_file();
          // Close the file
          file_close();
80007f96:	f0 1f 01 2b 	mcall	80008440 <main+0xe74>
          // Display a CRLF to user
          print(SHL_USART, CRLF);
80007f9a:	fe fb 03 aa 	ld.w	r11,pc[938]
80007f9e:	fe 7c 18 00 	mov	r12,-59392
80007fa2:	f0 1f 00 d8 	mcall	80008300 <main+0xd34>
80007fa6:	e0 8f 01 73 	bral	8000828c <main+0xcc0>
        }
        break;
      // this is a "disk" command
      case CMD_NB_DRIVE:
        // Display number of drives.
        print(SHL_USART, "Nb Drive(s): ");
80007faa:	fe fb 04 be 	ld.w	r11,pc[1214]
80007fae:	fe 7c 18 00 	mov	r12,-59392
80007fb2:	f0 1f 00 d4 	mcall	80008300 <main+0xd34>
        print_char(SHL_USART, '0' + nav_drive_nb());
80007fb6:	f0 1f 01 03 	mcall	800083c0 <main+0xdf4>
80007fba:	f8 cb ff d0 	sub	r11,r12,-48
80007fbe:	fe 7c 18 00 	mov	r12,-59392
80007fc2:	f0 1f 00 fe 	mcall	800083b8 <main+0xdec>
        print(SHL_USART, CRLF);
80007fc6:	fe fb 03 7e 	ld.w	r11,pc[894]
80007fca:	fe 7c 18 00 	mov	r12,-59392
80007fce:	f0 1f 00 cd 	mcall	80008300 <main+0xd34>
        break;
80007fd2:	e0 8f 01 5d 	bral	8000828c <main+0xcc0>
      // this is a "mark" command
      case CMD_SET_ID:
        // get marked index from current navigator location
        mark_index = nav_getindex();
80007fd6:	fe f5 04 96 	ld.w	r5,pc[1174]
80007fda:	fa c6 ff f8 	sub	r6,sp,-8
80007fde:	0c 9c       	mov	r12,r6
80007fe0:	f0 1f 01 1c 	mcall	80008450 <main+0xe84>
80007fe4:	ec e8 00 00 	ld.d	r8,r6[0]
80007fe8:	ea e9 00 00 	st.d	r5[0],r8
80007fec:	6c 28       	ld.w	r8,r6[0x8]
80007fee:	8b 28       	st.w	r5[0x8],r8
        break;
80007ff0:	e0 8f 01 4e 	bral	8000828c <main+0xcc0>
      // this is a "goto" command
      case CMD_GOTO_ID:
        // set navigator to the marked index
        nav_gotoindex(&mark_index);
80007ff4:	fe fc 04 78 	ld.w	r12,pc[1144]
80007ff8:	f0 1f 01 19 	mcall	8000845c <main+0xe90>
        break;
80007ffc:	e0 8f 01 48 	bral	8000828c <main+0xcc0>
      // this is a "cp" command: Copy file to other location.
      case CMD_CP:
        // Try to set navigator on arg1 file.
        if (!nav_setcwd((FS_STRING)par_str1, true, false))
80008000:	30 0a       	mov	r10,0
80008002:	30 1b       	mov	r11,1
80008004:	fe fc 03 48 	ld.w	r12,pc[840]
80008008:	f0 1f 01 09 	mcall	8000842c <main+0xe60>
8000800c:	c0 91       	brne	8000801e <main+0xa52>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_UNKNOWN_FILE);
8000800e:	fe fb 04 22 	ld.w	r11,pc[1058]
80008012:	fe 7c 18 00 	mov	r12,-59392
80008016:	f0 1f 00 bb 	mcall	80008300 <main+0xd34>
8000801a:	e0 8f 01 39 	bral	8000828c <main+0xcc0>
        }
        else
        {
          // Get name of source to be used as same destination name.
          nav_file_name((FS_STRING)par_str1, MAX_FILE_PATH_LENGTH, FS_NAME_GET, true);
8000801e:	30 19       	mov	r9,1
80008020:	12 9a       	mov	r10,r9
80008022:	31 eb       	mov	r11,30
80008024:	fe fc 03 28 	ld.w	r12,pc[808]
80008028:	f0 1f 00 fb 	mcall	80008414 <main+0xe48>
          // Get file size.
          file_size = nav_file_lgtsector();
8000802c:	f0 1f 01 11 	mcall	80008470 <main+0xea4>
80008030:	eb dc b0 10 	bfexts	r5,r12,0x0,0x10
          // Mark source.
          nav_file_copy();
80008034:	f0 1f 01 10 	mcall	80008474 <main+0xea8>
          // Save current source position.
          sav_index = nav_getindex();
80008038:	fa c6 ff f8 	sub	r6,sp,-8
8000803c:	0c 9c       	mov	r12,r6
8000803e:	f0 1f 01 05 	mcall	80008450 <main+0xe84>
80008042:	fa c8 ff d4 	sub	r8,sp,-44
80008046:	ec ea 00 00 	ld.d	r10,r6[0]
8000804a:	f0 eb 00 00 	st.d	r8[0],r10
8000804e:	6c 29       	ld.w	r9,r6[0x8]
80008050:	91 29       	st.w	r8[0x8],r9
          // Goto destination.
          nav_gotoindex(&mark_index);
80008052:	fe fc 04 1a 	ld.w	r12,pc[1050]
80008056:	f0 1f 01 02 	mcall	8000845c <main+0xe90>
          // Free space check.
          if (nav_partition_space() > file_size)
8000805a:	f0 1f 01 08 	mcall	80008478 <main+0xeac>
8000805e:	5c 75       	castu.h	r5
80008060:	0a 3c       	cp.w	r12,r5
80008062:	e0 88 00 0f 	brls	80008080 <main+0xab4>
          {
            // Paste.
            nav_file_paste_start((FS_STRING)par_str1);
80008066:	fe fc 02 e6 	ld.w	r12,pc[742]
8000806a:	f0 1f 01 05 	mcall	8000847c <main+0xeb0>
            // Restore previous nav position.
            nav_gotoindex(&sav_index);
8000806e:	fa cc ff d4 	sub	r12,sp,-44
80008072:	f0 1f 00 fb 	mcall	8000845c <main+0xe90>
            // Performs copy.
            while (nav_file_paste_state(false) == COPY_BUSY);
80008076:	30 06       	mov	r6,0
80008078:	0c 9c       	mov	r12,r6
8000807a:	f0 1f 01 02 	mcall	80008480 <main+0xeb4>
8000807e:	cf d0       	breq	80008078 <main+0xaac>
          }
          // Restore previous nav position.
          nav_gotoindex(&sav_index);
80008080:	fa cc ff d4 	sub	r12,sp,-44
80008084:	f0 1f 00 f6 	mcall	8000845c <main+0xe90>
80008088:	c0 29       	rjmp	8000828c <main+0xcc0>
        }
        break;
      // this is a "mv" command: Rename file.
      case CMD_MV:
        // Save current nav position.
        sav_index = nav_getindex();
8000808a:	fa c6 ff f8 	sub	r6,sp,-8
8000808e:	0c 9c       	mov	r12,r6
80008090:	f0 1f 00 f0 	mcall	80008450 <main+0xe84>
80008094:	fa c8 ff d4 	sub	r8,sp,-44
80008098:	ec ea 00 00 	ld.d	r10,r6[0]
8000809c:	f0 eb 00 00 	st.d	r8[0],r10
800080a0:	6c 29       	ld.w	r9,r6[0x8]
800080a2:	91 29       	st.w	r8[0x8],r9
        // Try to to set navigator on arg1 folder or file.
        if (!nav_setcwd((FS_STRING)par_str1, true, false))
800080a4:	30 0a       	mov	r10,0
800080a6:	30 1b       	mov	r11,1
800080a8:	fe fc 02 a4 	ld.w	r12,pc[676]
800080ac:	f0 1f 00 e0 	mcall	8000842c <main+0xe60>
800080b0:	c0 81       	brne	800080c0 <main+0xaf4>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_UNKNOWN_FILE);
800080b2:	fe fb 03 7e 	ld.w	r11,pc[894]
800080b6:	fe 7c 18 00 	mov	r12,-59392
800080ba:	f0 1f 00 92 	mcall	80008300 <main+0xd34>
800080be:	c0 b8       	rjmp	800080d4 <main+0xb08>
        }
        // Try to rename the file
        else if (!nav_file_rename((FS_STRING)par_str2))
800080c0:	40 1c       	lddsp	r12,sp[0x4]
800080c2:	f0 1f 00 f1 	mcall	80008484 <main+0xeb8>
800080c6:	c0 71       	brne	800080d4 <main+0xb08>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_MV);
800080c8:	fe fb 03 c0 	ld.w	r11,pc[960]
800080cc:	fe 7c 18 00 	mov	r12,-59392
800080d0:	f0 1f 00 8c 	mcall	80008300 <main+0xd34>
        }
        // Restore nav position.
        nav_gotoindex(&sav_index);
800080d4:	fa cc ff d4 	sub	r12,sp,-44
800080d8:	f0 1f 00 e1 	mcall	8000845c <main+0xe90>
        break;
800080dc:	cd 88       	rjmp	8000828c <main+0xcc0>
      // this is a "df" command: Display free space information for all connected drives.
      case CMD_DF:
        // Save current nav position.
        sav_index = nav_getindex();
800080de:	fa c6 ff f8 	sub	r6,sp,-8
800080e2:	0c 9c       	mov	r12,r6
800080e4:	f0 1f 00 db 	mcall	80008450 <main+0xe84>
800080e8:	fa c8 ff d4 	sub	r8,sp,-44
800080ec:	ec ea 00 00 	ld.d	r10,r6[0]
800080f0:	f0 eb 00 00 	st.d	r8[0],r10
800080f4:	6c 29       	ld.w	r9,r6[0x8]
800080f6:	91 29       	st.w	r8[0x8],r9
800080f8:	30 05       	mov	r5,0
          nav_drive_set(i);
          // Try to mount.
          if (nav_partition_mount())
          {
            // Display memory name.
            print(SHL_USART, mem_name(i));
800080fa:	fe 74 18 00 	mov	r4,-59392
            // Display drive letter name.
            print(SHL_USART, " (");
800080fe:	fe f1 03 8e 	ld.w	r1,pc[910]
            print_char(SHL_USART, 'A' + i);
            print(SHL_USART, ":) Free Space: ");
80008102:	fe f0 03 8e 	ld.w	r0,pc[910]
      // this is a "df" command: Display free space information for all connected drives.
      case CMD_DF:
        // Save current nav position.
        sav_index = nav_getindex();
        // For all available drives :
        for (i = 0; i < nav_drive_nb(); i++)
80008106:	c3 58       	rjmp	80008170 <main+0xba4>
        {
          // Select drive.
          nav_drive_set(i);
80008108:	0a 9c       	mov	r12,r5
8000810a:	f0 1f 00 b0 	mcall	800083c8 <main+0xdfc>
          // Try to mount.
          if (nav_partition_mount())
8000810e:	f0 1f 00 b0 	mcall	800083cc <main+0xe00>
80008112:	c2 d0       	breq	8000816c <main+0xba0>
          {
            // Display memory name.
            print(SHL_USART, mem_name(i));
80008114:	0a 9c       	mov	r12,r5
80008116:	f0 1f 00 e0 	mcall	80008494 <main+0xec8>
8000811a:	18 9b       	mov	r11,r12
8000811c:	08 9c       	mov	r12,r4
8000811e:	f0 1f 00 79 	mcall	80008300 <main+0xd34>
            // Display drive letter name.
            print(SHL_USART, " (");
80008122:	02 9b       	mov	r11,r1
80008124:	08 9c       	mov	r12,r4
80008126:	f0 1f 00 77 	mcall	80008300 <main+0xd34>
            print_char(SHL_USART, 'A' + i);
8000812a:	ea cb ff bf 	sub	r11,r5,-65
8000812e:	08 9c       	mov	r12,r4
80008130:	f0 1f 00 a2 	mcall	800083b8 <main+0xdec>
            print(SHL_USART, ":) Free Space: ");
80008134:	00 9b       	mov	r11,r0
80008136:	08 9c       	mov	r12,r4
80008138:	f0 1f 00 72 	mcall	80008300 <main+0xd34>
            // Display free space.
            print_ulong(SHL_USART, nav_partition_freespace() << FS_SHIFT_B_TO_SECTOR);
8000813c:	f0 1f 00 d7 	mcall	80008498 <main+0xecc>
80008140:	f8 0b 15 09 	lsl	r11,r12,0x9
80008144:	08 9c       	mov	r12,r4
80008146:	f0 1f 00 73 	mcall	80008310 <main+0xd44>
            print(SHL_USART, " Bytes / ");
8000814a:	fe fb 03 52 	ld.w	r11,pc[850]
8000814e:	08 9c       	mov	r12,r4
80008150:	f0 1f 00 6c 	mcall	80008300 <main+0xd34>
            // Display available space.
            print_ulong(SHL_USART, nav_partition_space() << FS_SHIFT_B_TO_SECTOR);
80008154:	f0 1f 00 c9 	mcall	80008478 <main+0xeac>
80008158:	f8 0b 15 09 	lsl	r11,r12,0x9
8000815c:	08 9c       	mov	r12,r4
8000815e:	f0 1f 00 6d 	mcall	80008310 <main+0xd44>
            print(SHL_USART, " Bytes\r\n");
80008162:	fe fb 03 3e 	ld.w	r11,pc[830]
80008166:	08 9c       	mov	r12,r4
80008168:	f0 1f 00 66 	mcall	80008300 <main+0xd34>
      // this is a "df" command: Display free space information for all connected drives.
      case CMD_DF:
        // Save current nav position.
        sav_index = nav_getindex();
        // For all available drives :
        for (i = 0; i < nav_drive_nb(); i++)
8000816c:	2f f5       	sub	r5,-1
8000816e:	5c 55       	castu.b	r5
80008170:	f0 1f 00 94 	mcall	800083c0 <main+0xdf4>
80008174:	f8 05 18 00 	cp.b	r5,r12
80008178:	cc 83       	brcs	80008108 <main+0xb3c>
            print_ulong(SHL_USART, nav_partition_space() << FS_SHIFT_B_TO_SECTOR);
            print(SHL_USART, " Bytes\r\n");
          }
        }
        // Restore nav position.
        nav_gotoindex(&sav_index);
8000817a:	fa cc ff d4 	sub	r12,sp,-44
8000817e:	f0 1f 00 b8 	mcall	8000845c <main+0xe90>
        break;
80008182:	c8 58       	rjmp	8000828c <main+0xcc0>
      // this is a "format" command : Format disk.
      case CMD_FORMAT:
        // Get disk number.
        i = par_str1[0] - 'a';
80008184:	4f 28       	lddpc	r8,8000834c <main+0xd80>
80008186:	11 86       	ld.ub	r6,r8[0x0]
80008188:	26 16       	sub	r6,97
8000818a:	5c 56       	castu.b	r6
        // if drive number isn't valid
        if (i >= nav_drive_nb())
8000818c:	f0 1f 00 8d 	mcall	800083c0 <main+0xdf4>
80008190:	f8 06 18 00 	cp.b	r6,r12
80008194:	c0 83       	brcs	800081a4 <main+0xbd8>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_DRIVE);
80008196:	fe fb 02 2e 	ld.w	r11,pc[558]
8000819a:	fe 7c 18 00 	mov	r12,-59392
8000819e:	f0 1f 00 59 	mcall	80008300 <main+0xd34>
800081a2:	c7 58       	rjmp	8000828c <main+0xcc0>
        }
        else
        {
          // Get the current drive in the navigator.
          j = nav_drive_get();
800081a4:	f0 1f 00 8f 	mcall	800083e0 <main+0xe14>
800081a8:	18 95       	mov	r5,r12
          // Select drive to format.
          nav_drive_set(i);
800081aa:	0c 9c       	mov	r12,r6
800081ac:	f0 1f 00 87 	mcall	800083c8 <main+0xdfc>
          // If format fails.
          if (!nav_drive_format(FS_FORMAT_DEFAULT))
800081b0:	30 1c       	mov	r12,1
800081b2:	f0 1f 00 bd 	mcall	800084a4 <main+0xed8>
800081b6:	c0 b1       	brne	800081cc <main+0xc00>
          {
            // Display error message.
            print(SHL_USART, MSG_ER_FORMAT);
800081b8:	fe fb 02 f0 	ld.w	r11,pc[752]
800081bc:	fe 7c 18 00 	mov	r12,-59392
800081c0:	f0 1f 00 50 	mcall	80008300 <main+0xd34>
            // Return to the previous.
            nav_drive_set(j);
800081c4:	0a 9c       	mov	r12,r5
800081c6:	f0 1f 00 81 	mcall	800083c8 <main+0xdfc>
800081ca:	c6 18       	rjmp	8000828c <main+0xcc0>
          }
          // Format succeds, if drives is the one we were navigating on
          else if (i == j)
800081cc:	ea 06 18 00 	cp.b	r6,r5
800081d0:	c1 61       	brne	800081fc <main+0xc30>
          {
            // Reset the navigators.
            nav_reset();
800081d2:	f0 1f 00 59 	mcall	80008334 <main+0xd68>
            // Set current drive.
            nav_drive_set(j);
800081d6:	0c 9c       	mov	r12,r6
800081d8:	f0 1f 00 7c 	mcall	800083c8 <main+0xdfc>
            // If partition mounting fails.
            if (!nav_partition_mount())
800081dc:	f0 1f 00 7c 	mcall	800083cc <main+0xe00>
800081e0:	c0 a1       	brne	800081f4 <main+0xc28>
            {
              // Display error message.
              print(SHL_USART, MSG_ER_MOUNT);
800081e2:	4f cb       	lddpc	r11,800083d0 <main+0xe04>
800081e4:	fe 7c 18 00 	mov	r12,-59392
800081e8:	f0 1f 00 46 	mcall	80008300 <main+0xd34>
              // this will be the first "ls"
              first_ls = true;
800081ec:	30 19       	mov	r9,1
800081ee:	4d 18       	lddpc	r8,80008330 <main+0xd64>
800081f0:	b0 89       	st.b	r8[0x0],r9
800081f2:	c4 d8       	rjmp	8000828c <main+0xcc0>
            }
            else
            {
              // this won't be the first "ls", system is already mounted
              first_ls = false;
800081f4:	30 09       	mov	r9,0
800081f6:	4c f8       	lddpc	r8,80008330 <main+0xd64>
800081f8:	b0 89       	st.b	r8[0x0],r9
800081fa:	c4 98       	rjmp	8000828c <main+0xcc0>
            }
          }
          // Format succeds, restore previous navigator drive.
          else nav_drive_set(j);
800081fc:	0a 9c       	mov	r12,r5
800081fe:	f0 1f 00 73 	mcall	800083c8 <main+0xdfc>
80008202:	c4 58       	rjmp	8000828c <main+0xcc0>
        }
        break;
      // this is a "format32" command: Format disk as FAT 32 if possible.
      case CMD_FORMAT32:
        // Get disk number.
        i = par_str1[0] - 'a';
80008204:	4d 28       	lddpc	r8,8000834c <main+0xd80>
80008206:	11 86       	ld.ub	r6,r8[0x0]
80008208:	26 16       	sub	r6,97
8000820a:	5c 56       	castu.b	r6
        // if drive number isn't valid
        if (i >= nav_drive_nb())
8000820c:	f0 1f 00 6d 	mcall	800083c0 <main+0xdf4>
80008210:	f8 06 18 00 	cp.b	r6,r12
80008214:	c0 73       	brcs	80008222 <main+0xc56>
        {
          // Display error message.
          print(SHL_USART, MSG_ER_DRIVE);
80008216:	4e cb       	lddpc	r11,800083c4 <main+0xdf8>
80008218:	fe 7c 18 00 	mov	r12,-59392
8000821c:	f0 1f 00 39 	mcall	80008300 <main+0xd34>
80008220:	c3 68       	rjmp	8000828c <main+0xcc0>
        }
        else
        {
          // Get the current drive in the navigator.
          j = nav_drive_get();
80008222:	f0 1f 00 70 	mcall	800083e0 <main+0xe14>
80008226:	18 95       	mov	r5,r12
          // Select drive to format.
          nav_drive_set(i);
80008228:	0c 9c       	mov	r12,r6
8000822a:	f0 1f 00 68 	mcall	800083c8 <main+0xdfc>
          // If format fails.
          if (!nav_drive_format(FS_FORMAT_FAT32))
8000822e:	30 3c       	mov	r12,3
80008230:	f0 1f 00 9d 	mcall	800084a4 <main+0xed8>
80008234:	c0 b1       	brne	8000824a <main+0xc7e>
          {
            // Display error message.
            print(SHL_USART, MSG_ER_FORMAT);
80008236:	fe fb 02 72 	ld.w	r11,pc[626]
8000823a:	fe 7c 18 00 	mov	r12,-59392
8000823e:	f0 1f 00 31 	mcall	80008300 <main+0xd34>
            // Return to the previous.
            nav_drive_set(j);
80008242:	0a 9c       	mov	r12,r5
80008244:	f0 1f 00 61 	mcall	800083c8 <main+0xdfc>
80008248:	c2 28       	rjmp	8000828c <main+0xcc0>
          }
          // Format succeds, if drives is the one we were navigating on
          else if (i == j)
8000824a:	ea 06 18 00 	cp.b	r6,r5
8000824e:	c1 61       	brne	8000827a <main+0xcae>
          {
            // Reset the navigators.
            nav_reset();
80008250:	f0 1f 00 39 	mcall	80008334 <main+0xd68>
            // Set current drive.
            nav_drive_set(j);
80008254:	0c 9c       	mov	r12,r6
80008256:	f0 1f 00 5d 	mcall	800083c8 <main+0xdfc>
            // If partition mounting fails.
            if (!nav_partition_mount())
8000825a:	f0 1f 00 5d 	mcall	800083cc <main+0xe00>
8000825e:	c0 a1       	brne	80008272 <main+0xca6>
            {
              // Display error message.
              print(SHL_USART, MSG_ER_MOUNT);
80008260:	4d cb       	lddpc	r11,800083d0 <main+0xe04>
80008262:	fe 7c 18 00 	mov	r12,-59392
80008266:	f0 1f 00 27 	mcall	80008300 <main+0xd34>
              // this will be the first "ls"
              first_ls = true;
8000826a:	30 19       	mov	r9,1
8000826c:	4b 18       	lddpc	r8,80008330 <main+0xd64>
8000826e:	b0 89       	st.b	r8[0x0],r9
80008270:	c0 e8       	rjmp	8000828c <main+0xcc0>
            }
            else
            {
              // this won't be the first "ls", system is already mounted
              first_ls = false;
80008272:	30 09       	mov	r9,0
80008274:	4a f8       	lddpc	r8,80008330 <main+0xd64>
80008276:	b0 89       	st.b	r8[0x0],r9
80008278:	c0 a8       	rjmp	8000828c <main+0xcc0>
            }
          }
          // Format succeds, restore previous navigator drive.
          else nav_drive_set(j);
8000827a:	0a 9c       	mov	r12,r5
8000827c:	f0 1f 00 53 	mcall	800083c8 <main+0xdfc>
80008280:	c0 68       	rjmp	8000828c <main+0xcc0>
        }
        break;
      // Unknown command.
      default:
        // Display error message.
        print(SHL_USART, MSG_ER_CMD_NOT_FOUND);
80008282:	4c bb       	lddpc	r11,800083ac <main+0xde0>
80008284:	fe 7c 18 00 	mov	r12,-59392
80008288:	f0 1f 00 1e 	mcall	80008300 <main+0xd34>
        break;
      }
      // Reset vars.
      cmd_type = CMD_NONE;
8000828c:	30 08       	mov	r8,0
8000828e:	4a 89       	lddpc	r9,8000832c <main+0xd60>
80008290:	b2 88       	st.b	r9[0x0],r8
      cmd = false;
80008292:	ae 88       	st.b	r7[0x0],r8
      // Display prompt.
      print(SHL_USART, MSG_PROMPT);
80008294:	4a 4b       	lddpc	r11,80008324 <main+0xd58>
80008296:	fe 7c 18 00 	mov	r12,-59392
8000829a:	f0 1f 00 1a 	mcall	80008300 <main+0xd34>
8000829e:	fe 9f fa 91 	bral	800077c0 <main+0x1f4>
800082a2:	00 00       	add	r0,r0
800082a4:	80 00       	ld.sh	r0,r0[0x0]
800082a6:	2e e8       	sub	r8,-18
800082a8:	80 00       	ld.sh	r0,r0[0x0]
800082aa:	8c f0       	ld.uh	r0,r6[0xe]
800082ac:	80 00       	ld.sh	r0,r0[0x0]
800082ae:	2d c8       	sub	r8,-36
800082b0:	80 00       	ld.sh	r0,r0[0x0]
800082b2:	8c f4       	ld.uh	r4,r6[0xe]
800082b4:	80 00       	ld.sh	r0,r0[0x0]
800082b6:	32 0c       	mov	r12,32
800082b8:	80 00       	ld.sh	r0,r0[0x0]
800082ba:	8c e0       	ld.uh	r0,r6[0xc]
800082bc:	80 00       	ld.sh	r0,r0[0x0]
800082be:	93 3c       	st.w	r9[0xc],r12
800082c0:	80 00       	ld.sh	r0,r0[0x0]
800082c2:	2f 2c       	sub	r12,-14
800082c4:	80 00       	ld.sh	r0,r0[0x0]
800082c6:	2f 64       	sub	r4,-10
800082c8:	80 00       	ld.sh	r0,r0[0x0]
800082ca:	30 bc       	mov	r12,11
800082cc:	80 00       	ld.sh	r0,r0[0x0]
800082ce:	73 68       	ld.w	r8,r9[0x58]
800082d0:	80 00       	ld.sh	r0,r0[0x0]
800082d2:	93 44       	st.w	r9[0x10],r4
800082d4:	80 00       	ld.sh	r0,r0[0x0]
800082d6:	8c d8       	ld.uh	r8,r6[0xa]
800082d8:	80 00       	ld.sh	r0,r0[0x0]
800082da:	2b 10       	sub	r0,-79
800082dc:	80 00       	ld.sh	r0,r0[0x0]
800082de:	2a e8       	sub	r8,-82
800082e0:	80 00       	ld.sh	r0,r0[0x0]
800082e2:	8d 00       	st.w	r6[0x0],r0
800082e4:	80 00       	ld.sh	r0,r0[0x0]
800082e6:	6f 2c       	ld.w	r12,r7[0x48]
800082e8:	80 00       	ld.sh	r0,r0[0x0]
800082ea:	20 04       	sub	r4,0
800082ec:	80 00       	ld.sh	r0,r0[0x0]
800082ee:	8d 14       	st.w	r6[0x4],r4
800082f0:	00 00       	add	r0,r0
800082f2:	05 ec       	ld.ub	r12,r2[0x6]
800082f4:	80 00       	ld.sh	r0,r0[0x0]
800082f6:	6f 18       	ld.w	r8,r7[0x44]
800082f8:	80 00       	ld.sh	r0,r0[0x0]
800082fa:	8d 20       	st.w	r6[0x8],r0
800082fc:	80 00       	ld.sh	r0,r0[0x0]
800082fe:	8d 28       	st.w	r6[0x8],r8
80008300:	80 00       	ld.sh	r0,r0[0x0]
80008302:	6e c4       	ld.w	r4,r7[0x30]
80008304:	80 00       	ld.sh	r0,r0[0x0]
80008306:	74 38       	ld.w	r8,r10[0xc]
80008308:	80 00       	ld.sh	r0,r0[0x0]
8000830a:	74 5c       	ld.w	r12,r10[0x14]
8000830c:	80 00       	ld.sh	r0,r0[0x0]
8000830e:	8d 84       	st.w	r6[0x20],r4
80008310:	80 00       	ld.sh	r0,r0[0x0]
80008312:	6e d0       	ld.w	r0,r7[0x34]
80008314:	80 00       	ld.sh	r0,r0[0x0]
80008316:	8d 94       	st.w	r6[0x24],r4
80008318:	80 00       	ld.sh	r0,r0[0x0]
8000831a:	8d 9c       	st.w	r6[0x24],r12
8000831c:	80 00       	ld.sh	r0,r0[0x0]
8000831e:	8d d4       	st.w	r6[0x34],r4
80008320:	80 00       	ld.sh	r0,r0[0x0]
80008322:	8d dc       	st.w	r6[0x34],r12
80008324:	80 00       	ld.sh	r0,r0[0x0]
80008326:	8e 08       	ld.sh	r8,r7[0x0]
80008328:	00 00       	add	r0,r0
8000832a:	03 4c       	ld.w	r12,--r1
8000832c:	00 00       	add	r0,r0
8000832e:	03 e4       	ld.ub	r4,r1[0x6]
80008330:	00 00       	add	r0,r0
80008332:	03 28       	ld.uh	r8,r1++
80008334:	80 00       	ld.sh	r0,r0[0x0]
80008336:	6e 4c       	ld.w	r12,r7[0x10]
80008338:	00 00       	add	r0,r0
8000833a:	03 7c       	ld.ub	r12,--r1
8000833c:	00 00       	add	r0,r0
8000833e:	03 50       	ld.sh	r0,--r1
80008340:	80 00       	ld.sh	r0,r0[0x0]
80008342:	31 98       	mov	r8,25
80008344:	80 00       	ld.sh	r0,r0[0x0]
80008346:	8e 04       	ld.sh	r4,r7[0x0]
80008348:	00 00       	add	r0,r0
8000834a:	03 e5       	ld.ub	r5,r1[0x6]
8000834c:	00 00       	add	r0,r0
8000834e:	03 c4       	ld.ub	r4,r1[0x4]
80008350:	80 00       	ld.sh	r0,r0[0x0]
80008352:	8e 0c       	ld.sh	r12,r7[0x0]
80008354:	80 00       	ld.sh	r0,r0[0x0]
80008356:	86 28       	ld.sh	r8,r3[0x4]
80008358:	80 00       	ld.sh	r0,r0[0x0]
8000835a:	8e 10       	ld.sh	r0,r7[0x2]
8000835c:	80 00       	ld.sh	r0,r0[0x0]
8000835e:	8e 18       	ld.sh	r8,r7[0x2]
80008360:	80 00       	ld.sh	r0,r0[0x0]
80008362:	8e 1c       	ld.sh	r12,r7[0x2]
80008364:	80 00       	ld.sh	r0,r0[0x0]
80008366:	8e 20       	ld.sh	r0,r7[0x4]
80008368:	80 00       	ld.sh	r0,r0[0x0]
8000836a:	8e 24       	ld.sh	r4,r7[0x4]
8000836c:	80 00       	ld.sh	r0,r0[0x0]
8000836e:	8e 28       	ld.sh	r8,r7[0x4]
80008370:	80 00       	ld.sh	r0,r0[0x0]
80008372:	8e 2c       	ld.sh	r12,r7[0x4]
80008374:	80 00       	ld.sh	r0,r0[0x0]
80008376:	8e 34       	ld.sh	r4,r7[0x6]
80008378:	80 00       	ld.sh	r0,r0[0x0]
8000837a:	8e 3c       	ld.sh	r12,r7[0x6]
8000837c:	80 00       	ld.sh	r0,r0[0x0]
8000837e:	8e 44       	ld.sh	r4,r7[0x8]
80008380:	80 00       	ld.sh	r0,r0[0x0]
80008382:	8e 48       	ld.sh	r8,r7[0x8]
80008384:	80 00       	ld.sh	r0,r0[0x0]
80008386:	8e 50       	ld.sh	r0,r7[0xa]
80008388:	80 00       	ld.sh	r0,r0[0x0]
8000838a:	8e 58       	ld.sh	r8,r7[0xa]
8000838c:	80 00       	ld.sh	r0,r0[0x0]
8000838e:	8e 60       	ld.sh	r0,r7[0xc]
80008390:	80 00       	ld.sh	r0,r0[0x0]
80008392:	8e 64       	ld.sh	r4,r7[0xc]
80008394:	80 00       	ld.sh	r0,r0[0x0]
80008396:	8e 68       	ld.sh	r8,r7[0xc]
80008398:	80 00       	ld.sh	r0,r0[0x0]
8000839a:	8e 6c       	ld.sh	r12,r7[0xc]
8000839c:	80 00       	ld.sh	r0,r0[0x0]
8000839e:	8e 70       	ld.sh	r0,r7[0xe]
800083a0:	80 00       	ld.sh	r0,r0[0x0]
800083a2:	8e 74       	ld.sh	r4,r7[0xe]
800083a4:	80 00       	ld.sh	r0,r0[0x0]
800083a6:	8e 7c       	ld.sh	r12,r7[0xe]
800083a8:	80 00       	ld.sh	r0,r0[0x0]
800083aa:	8e 84       	ld.uh	r4,r7[0x0]
800083ac:	80 00       	ld.sh	r0,r0[0x0]
800083ae:	8e 90       	ld.uh	r0,r7[0x2]
800083b0:	80 00       	ld.sh	r0,r0[0x0]
800083b2:	8e a4       	ld.uh	r4,r7[0x4]
800083b4:	80 00       	ld.sh	r0,r0[0x0]
800083b6:	8e ac       	ld.uh	r12,r7[0x4]
800083b8:	80 00       	ld.sh	r0,r0[0x0]
800083ba:	6e b8       	ld.w	r8,r7[0x2c]
800083bc:	80 00       	ld.sh	r0,r0[0x0]
800083be:	8c 84       	ld.uh	r4,r6[0x0]
800083c0:	80 00       	ld.sh	r0,r0[0x0]
800083c2:	6b 48       	ld.w	r8,r5[0x50]
800083c4:	80 00       	ld.sh	r0,r0[0x0]
800083c6:	8e b0       	ld.uh	r0,r7[0x6]
800083c8:	80 00       	ld.sh	r0,r0[0x0]
800083ca:	68 d4       	ld.w	r4,r4[0x34]
800083cc:	80 00       	ld.sh	r0,r0[0x0]
800083ce:	68 2c       	ld.w	r12,r4[0x8]
800083d0:	80 00       	ld.sh	r0,r0[0x0]
800083d2:	8e c8       	ld.uh	r8,r7[0x8]
800083d4:	80 00       	ld.sh	r0,r0[0x0]
800083d6:	68 74       	ld.w	r4,r4[0x1c]
800083d8:	80 00       	ld.sh	r0,r0[0x0]
800083da:	8e e0       	ld.uh	r0,r7[0xc]
800083dc:	80 00       	ld.sh	r0,r0[0x0]
800083de:	8c cc       	ld.uh	r12,r6[0x8]
800083e0:	80 00       	ld.sh	r0,r0[0x0]
800083e2:	5f b8       	srhi	r8
800083e4:	00 00       	add	r0,r0
800083e6:	03 2c       	ld.uh	r12,r1++
800083e8:	80 00       	ld.sh	r0,r0[0x0]
800083ea:	63 c8       	ld.w	r8,r1[0x70]
800083ec:	80 00       	ld.sh	r0,r0[0x0]
800083ee:	8f 08       	st.w	r7[0x0],r8
800083f0:	80 00       	ld.sh	r0,r0[0x0]
800083f2:	8f 18       	st.w	r7[0x4],r8
800083f4:	80 00       	ld.sh	r0,r0[0x0]
800083f6:	65 b8       	ld.w	r8,r2[0x6c]
800083f8:	80 00       	ld.sh	r0,r0[0x0]
800083fa:	8f 28       	st.w	r7[0x8],r8
800083fc:	80 00       	ld.sh	r0,r0[0x0]
800083fe:	62 a4       	ld.w	r4,r1[0x28]
80008400:	80 00       	ld.sh	r0,r0[0x0]
80008402:	8f 48       	st.w	r7[0x10],r8
80008404:	80 00       	ld.sh	r0,r0[0x0]
80008406:	60 1c       	ld.w	r12,r0[0x4]
80008408:	80 00       	ld.sh	r0,r0[0x0]
8000840a:	8f 40       	st.w	r7[0x10],r0
8000840c:	80 00       	ld.sh	r0,r0[0x0]
8000840e:	60 00       	ld.w	r0,r0[0x0]
80008410:	80 00       	ld.sh	r0,r0[0x0]
80008412:	8f 50       	st.w	r7[0x14],r0
80008414:	80 00       	ld.sh	r0,r0[0x0]
80008416:	60 28       	ld.w	r8,r0[0x8]
80008418:	80 00       	ld.sh	r0,r0[0x0]
8000841a:	61 0c       	ld.w	r12,r0[0x40]
8000841c:	80 00       	ld.sh	r0,r0[0x0]
8000841e:	65 f8       	ld.w	r8,r2[0x7c]
80008420:	80 00       	ld.sh	r0,r0[0x0]
80008422:	8f 54       	st.w	r7[0x14],r4
80008424:	80 00       	ld.sh	r0,r0[0x0]
80008426:	8f 60       	st.w	r7[0x18],r0
80008428:	80 00       	ld.sh	r0,r0[0x0]
8000842a:	86 d0       	ld.uh	r0,r3[0xa]
8000842c:	80 00       	ld.sh	r0,r0[0x0]
8000842e:	69 84       	ld.w	r4,r4[0x60]
80008430:	80 00       	ld.sh	r0,r0[0x0]
80008432:	8f 68       	st.w	r7[0x18],r8
80008434:	80 00       	ld.sh	r0,r0[0x0]
80008436:	5f 0c       	sreq	r12
80008438:	80 00       	ld.sh	r0,r0[0x0]
8000843a:	5d ac       	*unknown*
8000843c:	80 00       	ld.sh	r0,r0[0x0]
8000843e:	5b 64       	cp.w	r4,-10
80008440:	80 00       	ld.sh	r0,r0[0x0]
80008442:	5c 3c       	neg	r12
80008444:	80 00       	ld.sh	r0,r0[0x0]
80008446:	8f 78       	st.w	r7[0x1c],r8
80008448:	80 00       	ld.sh	r0,r0[0x0]
8000844a:	67 48       	ld.w	r8,r3[0x50]
8000844c:	80 00       	ld.sh	r0,r0[0x0]
8000844e:	62 bc       	ld.w	r12,r1[0x2c]
80008450:	80 00       	ld.sh	r0,r0[0x0]
80008452:	5f e0       	srqs	r0
80008454:	80 00       	ld.sh	r0,r0[0x0]
80008456:	65 0c       	ld.w	r12,r2[0x40]
80008458:	80 00       	ld.sh	r0,r0[0x0]
8000845a:	92 1c       	ld.sh	r12,r9[0x2]
8000845c:	80 00       	ld.sh	r0,r0[0x0]
8000845e:	69 28       	ld.w	r8,r4[0x48]
80008460:	80 00       	ld.sh	r0,r0[0x0]
80008462:	92 5c       	ld.sh	r12,r9[0xa]
80008464:	80 00       	ld.sh	r0,r0[0x0]
80008466:	5c f8       	rol	r8
80008468:	80 00       	ld.sh	r0,r0[0x0]
8000846a:	92 a0       	ld.uh	r0,r9[0x4]
8000846c:	00 00       	add	r0,r0
8000846e:	03 70       	ld.ub	r0,--r1
80008470:	80 00       	ld.sh	r0,r0[0x0]
80008472:	60 0c       	ld.w	r12,r0[0x0]
80008474:	80 00       	ld.sh	r0,r0[0x0]
80008476:	6b 7c       	ld.w	r12,r5[0x5c]
80008478:	80 00       	ld.sh	r0,r0[0x0]
8000847a:	67 d8       	ld.w	r8,r3[0x74]
8000847c:	80 00       	ld.sh	r0,r0[0x0]
8000847e:	6d c8       	ld.w	r8,r6[0x70]
80008480:	80 00       	ld.sh	r0,r0[0x0]
80008482:	6b e8       	ld.w	r8,r5[0x78]
80008484:	80 00       	ld.sh	r0,r0[0x0]
80008486:	66 b8       	ld.w	r8,r3[0x2c]
80008488:	80 00       	ld.sh	r0,r0[0x0]
8000848a:	92 b0       	ld.uh	r0,r9[0x6]
8000848c:	80 00       	ld.sh	r0,r0[0x0]
8000848e:	92 c4       	ld.uh	r4,r9[0x8]
80008490:	80 00       	ld.sh	r0,r0[0x0]
80008492:	92 c8       	ld.uh	r8,r9[0x8]
80008494:	80 00       	ld.sh	r0,r0[0x0]
80008496:	74 b8       	ld.w	r8,r10[0x2c]
80008498:	80 00       	ld.sh	r0,r0[0x0]
8000849a:	68 04       	ld.w	r4,r4[0x0]
8000849c:	80 00       	ld.sh	r0,r0[0x0]
8000849e:	92 d8       	ld.uh	r8,r9[0xa]
800084a0:	80 00       	ld.sh	r0,r0[0x0]
800084a2:	92 e4       	ld.uh	r4,r9[0xc]
800084a4:	80 00       	ld.sh	r0,r0[0x0]
800084a6:	68 9c       	ld.w	r12,r4[0x24]
800084a8:	80 00       	ld.sh	r0,r0[0x0]
800084aa:	92 f0       	ld.uh	r0,r9[0xe]

800084ac <memcmp>:
800084ac:	d4 01       	pushm	lr
800084ae:	30 08       	mov	r8,0
800084b0:	c0 d8       	rjmp	800084ca <memcmp+0x1e>
800084b2:	f8 08 07 0e 	ld.ub	lr,r12[r8]
800084b6:	f6 08 07 09 	ld.ub	r9,r11[r8]
800084ba:	20 1a       	sub	r10,1
800084bc:	2f f8       	sub	r8,-1
800084be:	f2 0e 18 00 	cp.b	lr,r9
800084c2:	c0 40       	breq	800084ca <memcmp+0x1e>
800084c4:	fc 09 01 0c 	sub	r12,lr,r9
800084c8:	d8 02       	popm	pc
800084ca:	58 0a       	cp.w	r10,0
800084cc:	cf 31       	brne	800084b2 <memcmp+0x6>
800084ce:	14 9c       	mov	r12,r10
800084d0:	d8 02       	popm	pc

800084d2 <memcpy>:
800084d2:	58 8a       	cp.w	r10,8
800084d4:	c2 f5       	brlt	80008532 <memcpy+0x60>
800084d6:	f9 eb 10 09 	or	r9,r12,r11
800084da:	e2 19 00 03 	andl	r9,0x3,COH
800084de:	e0 81 00 97 	brne	8000860c <memcpy+0x13a>
800084e2:	e0 4a 00 20 	cp.w	r10,32
800084e6:	c3 b4       	brge	8000855c <memcpy+0x8a>
800084e8:	f4 08 14 02 	asr	r8,r10,0x2
800084ec:	f0 09 11 08 	rsub	r9,r8,8
800084f0:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800084f4:	76 69       	ld.w	r9,r11[0x18]
800084f6:	99 69       	st.w	r12[0x18],r9
800084f8:	76 59       	ld.w	r9,r11[0x14]
800084fa:	99 59       	st.w	r12[0x14],r9
800084fc:	76 49       	ld.w	r9,r11[0x10]
800084fe:	99 49       	st.w	r12[0x10],r9
80008500:	76 39       	ld.w	r9,r11[0xc]
80008502:	99 39       	st.w	r12[0xc],r9
80008504:	76 29       	ld.w	r9,r11[0x8]
80008506:	99 29       	st.w	r12[0x8],r9
80008508:	76 19       	ld.w	r9,r11[0x4]
8000850a:	99 19       	st.w	r12[0x4],r9
8000850c:	76 09       	ld.w	r9,r11[0x0]
8000850e:	99 09       	st.w	r12[0x0],r9
80008510:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80008514:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008518:	e0 1a 00 03 	andl	r10,0x3
8000851c:	f4 0a 11 04 	rsub	r10,r10,4
80008520:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008524:	17 a9       	ld.ub	r9,r11[0x2]
80008526:	b0 a9       	st.b	r8[0x2],r9
80008528:	17 99       	ld.ub	r9,r11[0x1]
8000852a:	b0 99       	st.b	r8[0x1],r9
8000852c:	17 89       	ld.ub	r9,r11[0x0]
8000852e:	b0 89       	st.b	r8[0x0],r9
80008530:	5e fc       	retal	r12
80008532:	f4 0a 11 09 	rsub	r10,r10,9
80008536:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000853a:	17 f9       	ld.ub	r9,r11[0x7]
8000853c:	b8 f9       	st.b	r12[0x7],r9
8000853e:	17 e9       	ld.ub	r9,r11[0x6]
80008540:	b8 e9       	st.b	r12[0x6],r9
80008542:	17 d9       	ld.ub	r9,r11[0x5]
80008544:	b8 d9       	st.b	r12[0x5],r9
80008546:	17 c9       	ld.ub	r9,r11[0x4]
80008548:	b8 c9       	st.b	r12[0x4],r9
8000854a:	17 b9       	ld.ub	r9,r11[0x3]
8000854c:	b8 b9       	st.b	r12[0x3],r9
8000854e:	17 a9       	ld.ub	r9,r11[0x2]
80008550:	b8 a9       	st.b	r12[0x2],r9
80008552:	17 99       	ld.ub	r9,r11[0x1]
80008554:	b8 99       	st.b	r12[0x1],r9
80008556:	17 89       	ld.ub	r9,r11[0x0]
80008558:	b8 89       	st.b	r12[0x0],r9
8000855a:	5e fc       	retal	r12
8000855c:	eb cd 40 c0 	pushm	r6-r7,lr
80008560:	18 99       	mov	r9,r12
80008562:	22 0a       	sub	r10,32
80008564:	b7 07       	ld.d	r6,r11++
80008566:	b3 26       	st.d	r9++,r6
80008568:	b7 07       	ld.d	r6,r11++
8000856a:	b3 26       	st.d	r9++,r6
8000856c:	b7 07       	ld.d	r6,r11++
8000856e:	b3 26       	st.d	r9++,r6
80008570:	b7 07       	ld.d	r6,r11++
80008572:	b3 26       	st.d	r9++,r6
80008574:	22 0a       	sub	r10,32
80008576:	cf 74       	brge	80008564 <memcpy+0x92>
80008578:	2f 0a       	sub	r10,-16
8000857a:	c0 65       	brlt	80008586 <memcpy+0xb4>
8000857c:	b7 07       	ld.d	r6,r11++
8000857e:	b3 26       	st.d	r9++,r6
80008580:	b7 07       	ld.d	r6,r11++
80008582:	b3 26       	st.d	r9++,r6
80008584:	21 0a       	sub	r10,16
80008586:	5c 3a       	neg	r10
80008588:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000858c:	d7 03       	nop
8000858e:	d7 03       	nop
80008590:	f7 36 00 0e 	ld.ub	r6,r11[14]
80008594:	f3 66 00 0e 	st.b	r9[14],r6
80008598:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000859c:	f3 66 00 0d 	st.b	r9[13],r6
800085a0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800085a4:	f3 66 00 0c 	st.b	r9[12],r6
800085a8:	f7 36 00 0b 	ld.ub	r6,r11[11]
800085ac:	f3 66 00 0b 	st.b	r9[11],r6
800085b0:	f7 36 00 0a 	ld.ub	r6,r11[10]
800085b4:	f3 66 00 0a 	st.b	r9[10],r6
800085b8:	f7 36 00 09 	ld.ub	r6,r11[9]
800085bc:	f3 66 00 09 	st.b	r9[9],r6
800085c0:	f7 36 00 08 	ld.ub	r6,r11[8]
800085c4:	f3 66 00 08 	st.b	r9[8],r6
800085c8:	f7 36 00 07 	ld.ub	r6,r11[7]
800085cc:	f3 66 00 07 	st.b	r9[7],r6
800085d0:	f7 36 00 06 	ld.ub	r6,r11[6]
800085d4:	f3 66 00 06 	st.b	r9[6],r6
800085d8:	f7 36 00 05 	ld.ub	r6,r11[5]
800085dc:	f3 66 00 05 	st.b	r9[5],r6
800085e0:	f7 36 00 04 	ld.ub	r6,r11[4]
800085e4:	f3 66 00 04 	st.b	r9[4],r6
800085e8:	f7 36 00 03 	ld.ub	r6,r11[3]
800085ec:	f3 66 00 03 	st.b	r9[3],r6
800085f0:	f7 36 00 02 	ld.ub	r6,r11[2]
800085f4:	f3 66 00 02 	st.b	r9[2],r6
800085f8:	f7 36 00 01 	ld.ub	r6,r11[1]
800085fc:	f3 66 00 01 	st.b	r9[1],r6
80008600:	f7 36 00 00 	ld.ub	r6,r11[0]
80008604:	f3 66 00 00 	st.b	r9[0],r6
80008608:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000860c:	20 1a       	sub	r10,1
8000860e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80008612:	f8 0a 0b 09 	st.b	r12[r10],r9
80008616:	cf b1       	brne	8000860c <memcpy+0x13a>
80008618:	5e fc       	retal	r12

8000861a <memset>:
8000861a:	18 98       	mov	r8,r12
8000861c:	c0 38       	rjmp	80008622 <memset+0x8>
8000861e:	10 cb       	st.b	r8++,r11
80008620:	20 1a       	sub	r10,1
80008622:	58 0a       	cp.w	r10,0
80008624:	cf d1       	brne	8000861e <memset+0x4>
80008626:	5e fc       	retal	r12

80008628 <strcmp>:
80008628:	f9 eb 10 0a 	or	r10,r12,r11
8000862c:	e2 1a 00 03 	andl	r10,0x3,COH
80008630:	c3 41       	brne	80008698 <strcmp+0x70>
80008632:	78 0a       	ld.w	r10,r12[0x0]
80008634:	76 09       	ld.w	r9,r11[0x0]
80008636:	5c ea       	tnbz	r10
80008638:	c1 70       	breq	80008666 <strcmp+0x3e>
8000863a:	12 3a       	cp.w	r10,r9
8000863c:	c1 51       	brne	80008666 <strcmp+0x3e>
8000863e:	78 1a       	ld.w	r10,r12[0x4]
80008640:	76 19       	ld.w	r9,r11[0x4]
80008642:	5c ea       	tnbz	r10
80008644:	c1 10       	breq	80008666 <strcmp+0x3e>
80008646:	12 3a       	cp.w	r10,r9
80008648:	c0 f1       	brne	80008666 <strcmp+0x3e>
8000864a:	78 2a       	ld.w	r10,r12[0x8]
8000864c:	76 29       	ld.w	r9,r11[0x8]
8000864e:	5c ea       	tnbz	r10
80008650:	c0 b0       	breq	80008666 <strcmp+0x3e>
80008652:	12 3a       	cp.w	r10,r9
80008654:	c0 91       	brne	80008666 <strcmp+0x3e>
80008656:	78 3a       	ld.w	r10,r12[0xc]
80008658:	76 39       	ld.w	r9,r11[0xc]
8000865a:	5c ea       	tnbz	r10
8000865c:	c0 50       	breq	80008666 <strcmp+0x3e>
8000865e:	2f 0c       	sub	r12,-16
80008660:	2f 0b       	sub	r11,-16
80008662:	12 3a       	cp.w	r10,r9
80008664:	ce 70       	breq	80008632 <strcmp+0xa>
80008666:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8000866a:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000866e:	5e 0c       	reteq	r12
80008670:	16 1c       	sub	r12,r11
80008672:	5e 1c       	retne	r12
80008674:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
80008678:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
8000867c:	5e 0c       	reteq	r12
8000867e:	16 1c       	sub	r12,r11
80008680:	5e 1c       	retne	r12
80008682:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
80008686:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
8000868a:	5e 0c       	reteq	r12
8000868c:	16 1c       	sub	r12,r11
8000868e:	5e 1c       	retne	r12
80008690:	5c 5a       	castu.b	r10
80008692:	5c 59       	castu.b	r9
80008694:	12 1a       	sub	r10,r9
80008696:	5e fa       	retal	r10
80008698:	17 8a       	ld.ub	r10,r11[0x0]
8000869a:	19 89       	ld.ub	r9,r12[0x0]
8000869c:	58 0a       	cp.w	r10,0
8000869e:	5e 09       	reteq	r9
800086a0:	14 19       	sub	r9,r10
800086a2:	5e 19       	retne	r9
800086a4:	17 9a       	ld.ub	r10,r11[0x1]
800086a6:	19 99       	ld.ub	r9,r12[0x1]
800086a8:	58 0a       	cp.w	r10,0
800086aa:	5e 09       	reteq	r9
800086ac:	14 19       	sub	r9,r10
800086ae:	5e 19       	retne	r9
800086b0:	17 aa       	ld.ub	r10,r11[0x2]
800086b2:	19 a9       	ld.ub	r9,r12[0x2]
800086b4:	58 0a       	cp.w	r10,0
800086b6:	5e 09       	reteq	r9
800086b8:	14 19       	sub	r9,r10
800086ba:	5e 19       	retne	r9
800086bc:	17 ba       	ld.ub	r10,r11[0x3]
800086be:	19 b9       	ld.ub	r9,r12[0x3]
800086c0:	58 0a       	cp.w	r10,0
800086c2:	5e 09       	reteq	r9
800086c4:	14 19       	sub	r9,r10
800086c6:	5e 19       	retne	r9
800086c8:	2f cb       	sub	r11,-4
800086ca:	2f cc       	sub	r12,-4
800086cc:	ce 6b       	rjmp	80008698 <strcmp+0x70>
800086ce:	d7 03       	nop

800086d0 <strlen>:
800086d0:	30 09       	mov	r9,0
800086d2:	18 98       	mov	r8,r12
800086d4:	c0 28       	rjmp	800086d8 <strlen+0x8>
800086d6:	2f f8       	sub	r8,-1
800086d8:	11 8a       	ld.ub	r10,r8[0x0]
800086da:	f2 0a 18 00 	cp.b	r10,r9
800086de:	cf c1       	brne	800086d6 <strlen+0x6>
800086e0:	f0 0c 01 0c 	sub	r12,r8,r12
800086e4:	5e fc       	retal	r12

Disassembly of section .exception:

80008800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008800:	c0 08       	rjmp	80008800 <_evba>
	...

80008804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008804:	c0 08       	rjmp	80008804 <_handle_TLB_Multiple_Hit>
	...

80008808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008808:	c0 08       	rjmp	80008808 <_handle_Bus_Error_Data_Fetch>
	...

8000880c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000880c:	c0 08       	rjmp	8000880c <_handle_Bus_Error_Instruction_Fetch>
	...

80008810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008810:	c0 08       	rjmp	80008810 <_handle_NMI>
	...

80008814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008814:	c0 08       	rjmp	80008814 <_handle_Instruction_Address>
	...

80008818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008818:	c0 08       	rjmp	80008818 <_handle_ITLB_Protection>
	...

8000881c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000881c:	c0 08       	rjmp	8000881c <_handle_Breakpoint>
	...

80008820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008820:	c0 08       	rjmp	80008820 <_handle_Illegal_Opcode>
	...

80008824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008824:	c0 08       	rjmp	80008824 <_handle_Unimplemented_Instruction>
	...

80008828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008828:	c0 08       	rjmp	80008828 <_handle_Privilege_Violation>
	...

8000882c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000882c:	c0 08       	rjmp	8000882c <_handle_Floating_Point>
	...

80008830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008830:	c0 08       	rjmp	80008830 <_handle_Coprocessor_Absent>
	...

80008834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008834:	c0 08       	rjmp	80008834 <_handle_Data_Address_Read>
	...

80008838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008838:	c0 08       	rjmp	80008838 <_handle_Data_Address_Write>
	...

8000883c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000883c:	c0 08       	rjmp	8000883c <_handle_DTLB_Protection_Read>
	...

80008840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008840:	c0 08       	rjmp	80008840 <_handle_DTLB_Protection_Write>
	...

80008844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008844:	c0 08       	rjmp	80008844 <_handle_DTLB_Modified>
	...

80008850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008850:	c0 08       	rjmp	80008850 <_handle_ITLB_Miss>
	...

80008860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008860:	c0 08       	rjmp	80008860 <_handle_DTLB_Miss_Read>
	...

80008870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008870:	c0 08       	rjmp	80008870 <_handle_DTLB_Miss_Write>
	...

80008900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008900:	c0 08       	rjmp	80008900 <_handle_Supervisor_Call>
80008902:	d7 03       	nop

80008904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008904:	30 0c       	mov	r12,0
80008906:	fe b0 d2 79 	rcall	80002df8 <_get_interrupt_handler>
8000890a:	58 0c       	cp.w	r12,0
8000890c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008910:	d6 03       	rete

80008912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008912:	30 1c       	mov	r12,1
80008914:	fe b0 d2 72 	rcall	80002df8 <_get_interrupt_handler>
80008918:	58 0c       	cp.w	r12,0
8000891a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000891e:	d6 03       	rete

80008920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008920:	30 2c       	mov	r12,2
80008922:	fe b0 d2 6b 	rcall	80002df8 <_get_interrupt_handler>
80008926:	58 0c       	cp.w	r12,0
80008928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000892c:	d6 03       	rete

8000892e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000892e:	30 3c       	mov	r12,3
80008930:	fe b0 d2 64 	rcall	80002df8 <_get_interrupt_handler>
80008934:	58 0c       	cp.w	r12,0
80008936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000893a:	d6 03       	rete
8000893c:	d7 03       	nop
8000893e:	d7 03       	nop
80008940:	d7 03       	nop
80008942:	d7 03       	nop
80008944:	d7 03       	nop
80008946:	d7 03       	nop
80008948:	d7 03       	nop
8000894a:	d7 03       	nop
8000894c:	d7 03       	nop
8000894e:	d7 03       	nop
80008950:	d7 03       	nop
80008952:	d7 03       	nop
80008954:	d7 03       	nop
80008956:	d7 03       	nop
80008958:	d7 03       	nop
8000895a:	d7 03       	nop
8000895c:	d7 03       	nop
8000895e:	d7 03       	nop
80008960:	d7 03       	nop
80008962:	d7 03       	nop
80008964:	d7 03       	nop
80008966:	d7 03       	nop
80008968:	d7 03       	nop
8000896a:	d7 03       	nop
8000896c:	d7 03       	nop
8000896e:	d7 03       	nop
80008970:	d7 03       	nop
80008972:	d7 03       	nop
80008974:	d7 03       	nop
80008976:	d7 03       	nop
80008978:	d7 03       	nop
8000897a:	d7 03       	nop
8000897c:	d7 03       	nop
8000897e:	d7 03       	nop
80008980:	d7 03       	nop
80008982:	d7 03       	nop
80008984:	d7 03       	nop
80008986:	d7 03       	nop
80008988:	d7 03       	nop
8000898a:	d7 03       	nop
8000898c:	d7 03       	nop
8000898e:	d7 03       	nop
80008990:	d7 03       	nop
80008992:	d7 03       	nop
80008994:	d7 03       	nop
80008996:	d7 03       	nop
80008998:	d7 03       	nop
8000899a:	d7 03       	nop
8000899c:	d7 03       	nop
8000899e:	d7 03       	nop
800089a0:	d7 03       	nop
800089a2:	d7 03       	nop
800089a4:	d7 03       	nop
800089a6:	d7 03       	nop
800089a8:	d7 03       	nop
800089aa:	d7 03       	nop
800089ac:	d7 03       	nop
800089ae:	d7 03       	nop
800089b0:	d7 03       	nop
800089b2:	d7 03       	nop
800089b4:	d7 03       	nop
800089b6:	d7 03       	nop
800089b8:	d7 03       	nop
800089ba:	d7 03       	nop
800089bc:	d7 03       	nop
800089be:	d7 03       	nop
800089c0:	d7 03       	nop
800089c2:	d7 03       	nop
800089c4:	d7 03       	nop
800089c6:	d7 03       	nop
800089c8:	d7 03       	nop
800089ca:	d7 03       	nop
800089cc:	d7 03       	nop
800089ce:	d7 03       	nop
800089d0:	d7 03       	nop
800089d2:	d7 03       	nop
800089d4:	d7 03       	nop
800089d6:	d7 03       	nop
800089d8:	d7 03       	nop
800089da:	d7 03       	nop
800089dc:	d7 03       	nop
800089de:	d7 03       	nop
800089e0:	d7 03       	nop
800089e2:	d7 03       	nop
800089e4:	d7 03       	nop
800089e6:	d7 03       	nop
800089e8:	d7 03       	nop
800089ea:	d7 03       	nop
800089ec:	d7 03       	nop
800089ee:	d7 03       	nop
800089f0:	d7 03       	nop
800089f2:	d7 03       	nop
800089f4:	d7 03       	nop
800089f6:	d7 03       	nop
800089f8:	d7 03       	nop
800089fa:	d7 03       	nop
800089fc:	d7 03       	nop
800089fe:	d7 03       	nop
